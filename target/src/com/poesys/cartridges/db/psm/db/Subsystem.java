/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
//
// Attention: Generated code! Do not modify by hand!
// Generated by: PSMmetaclass.vsl in andromda-meta-cartridge.
//
package com.poesys.cartridges.db.psm.db;

/**
 * 
 */
public class Subsystem
{

    public Subsystem()
    {
        this.name = null;
        this.fullyQualifiedName = null;
        this.documentation = null;
        this.className = null;
        this.businessPackageName = null;
        this.building = false;
        this.memory = null;
        this.software = null;
        this.dtos = null;
        this.queries = null;
    }

    public Subsystem(java.lang.String name, java.lang.String fullyQualifiedName, java.lang.String documentation, java.lang.String className, java.lang.String businessPackageName, boolean building, java.lang.String memory, java.lang.String software, java.util.Collection dtos, java.util.Collection queries)
    {
        this.name = name;
        this.fullyQualifiedName = fullyQualifiedName;
        this.documentation = documentation;
        this.className = className;
        this.businessPackageName = businessPackageName;
        this.building = building;
        this.memory = memory;
        this.software = software;
        this.dtos = dtos;
        this.queries = queries;
    }

    /**
     * Copy-constructor from other Subsystem
     *
     * @param otherBean, cannot be <code>null</code>
     * @throws java.lang.NullPointerException if the argument is <code>null</code>
     */
    public Subsystem(Subsystem otherBean)
    {
        this(otherBean.getName(), otherBean.getFullyQualifiedName(), otherBean.getDocumentation(), otherBean.getClassName(), otherBean.getBusinessPackageName(), otherBean.isBuilding(), otherBean.getMemory(), otherBean.getSoftware(), otherBean.getDtos(), otherBean.getQueries());
    }

    protected java.lang.String name;

    /**
     * 
     */
    public java.lang.String getName()
    {
        return this.name;
    }

    public void setName(java.lang.String name)
    {
        this.name = name;
    }

    protected java.lang.String fullyQualifiedName;

    /**
     * 
     */
    public java.lang.String getFullyQualifiedName()
    {
        return this.fullyQualifiedName;
    }

    public void setFullyQualifiedName(java.lang.String fullyQualifiedName)
    {
        this.fullyQualifiedName = fullyQualifiedName;
    }

    protected java.lang.String documentation;

    /**
     * 
     */
    public java.lang.String getDocumentation()
    {
        return this.documentation;
    }

    public void setDocumentation(java.lang.String documentation)
    {
        this.documentation = documentation;
    }

    protected java.lang.String className;

    /**
     * <p>
     * The subsystem name in a format suitable for use in a class name
     * (init-capped)
     * </p>
     */
    public java.lang.String getClassName()
    {
        return this.className;
    }

    public void setClassName(java.lang.String className)
    {
        this.className = className;
    }

    protected java.lang.String businessPackageName;

    /**
     * 
     */
    public java.lang.String getBusinessPackageName()
    {
        return this.businessPackageName;
    }

    public void setBusinessPackageName(java.lang.String businessPackageName)
    {
        this.businessPackageName = businessPackageName;
    }

    protected boolean building;

    /**
     * <p>
     * whether the subsystem is in the process of being built; this
     * flag is a semaphore indicating that the subsystem is in process
     * and should not be altered as a result of a recursive call to
     * build the subsystem
     * </p>
     */
    public boolean isBuilding()
    {
        return this.building;
    }

    public void setBuilding(boolean building)
    {
        this.building = building;
    }

    protected java.lang.String memory = "cached";

    /**
     * <p>
     * The kind of memory management that the subsystem uses:
     * </p>
     * <p>
     * * direct--no caching
     * </p>
     * <p>
     * * cached--map-based caching for one app/node
     * </p>
     * <p>
     * * clustered--map-based caching for multiple, clustered nodes
     * </p>
     * <p>
     * * distributed--distributed caching (memcached)
     * </p>
     */
    public java.lang.String getMemory()
    {
        return this.memory;
    }

    public void setMemory(java.lang.String memory)
    {
        this.memory = memory;
    }

    protected java.lang.String software;

    /**
     * <p>
     * the kind of software that implements the distributed caching;
     * null unless the memory is "distributed"
     * </p>
     */
    public java.lang.String getSoftware()
    {
        return this.software;
    }

    public void setSoftware(java.lang.String software)
    {
        this.software = software;
    }

    protected java.util.Collection dtos;

    /**
     * Get the dtos
     * 
     */
    public java.util.Collection getDtos()
    {
        return this.dtos;
    }

    /**
     * Sets the dtos
     */
    public void setDtos(java.util.Collection dtos)
    {
        this.dtos = dtos;
    }

    protected java.util.Collection queries;

    /**
     * Get the queries
     * 
     */
    public java.util.Collection getQueries()
    {
        return this.queries;
    }

    /**
     * Sets the queries
     */
    public void setQueries(java.util.Collection queries)
    {
        this.queries = queries;
    }


}