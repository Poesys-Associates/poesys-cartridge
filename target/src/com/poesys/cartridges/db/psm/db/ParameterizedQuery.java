/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
//
// Attention: Generated code! Do not modify by hand!
// Generated by: PSMmetaclass.vsl in andromda-meta-cartridge.
//
package com.poesys.cartridges.db.psm.db;

/**
 * 
 */
public abstract class ParameterizedQuery
{

    public ParameterizedQuery()
    {
        this.typeName = null;
        this.foreignTypeName = null;
        this.sqlTableName = null;
        this.name = null;
        this.associationTypeName = null;
        this.sqlLinkingTableName = null;
        this.linksPropertyName = null;
        this.foreignPackageName = null;
        this.packageName = null;
        this.associationPackageName = null;
        this.queriedCols = null;
        this.keyCols = null;
        this.subsystem = null;
        this.queriedLinkCols = null;
        this.linkKeyCols = null;
        this.manyKeyCols = null;
    }

    public ParameterizedQuery(java.lang.String typeName, java.lang.String foreignTypeName, java.lang.String sqlTableName, java.lang.String name, java.lang.String associationTypeName, java.lang.String sqlLinkingTableName, java.lang.String linksPropertyName, java.lang.String foreignPackageName, java.lang.String packageName, java.lang.String associationPackageName, java.util.Collection queriedCols, java.util.Collection keyCols, com.poesys.cartridges.db.psm.db.Subsystem subsystem, java.util.Collection queriedLinkCols, java.util.List linkKeyCols, java.util.List manyKeyCols)
    {
        this.typeName = typeName;
        this.foreignTypeName = foreignTypeName;
        this.sqlTableName = sqlTableName;
        this.name = name;
        this.associationTypeName = associationTypeName;
        this.sqlLinkingTableName = sqlLinkingTableName;
        this.linksPropertyName = linksPropertyName;
        this.foreignPackageName = foreignPackageName;
        this.packageName = packageName;
        this.associationPackageName = associationPackageName;
        this.queriedCols = queriedCols;
        this.keyCols = keyCols;
        this.subsystem = subsystem;
        this.queriedLinkCols = queriedLinkCols;
        this.linkKeyCols = linkKeyCols;
        this.manyKeyCols = manyKeyCols;
    }

    public ParameterizedQuery(java.lang.String typeName, java.lang.String foreignTypeName, java.lang.String sqlTableName, java.lang.String name, java.lang.String associationTypeName, java.lang.String sqlLinkingTableName, java.lang.String linksPropertyName, java.lang.String foreignPackageName, java.lang.String packageName, java.lang.String associationPackageName, java.util.Collection queriedCols, java.util.Collection keyCols, com.poesys.cartridges.db.psm.db.Subsystem subsystem, java.util.Collection joinCols, java.util.Collection queriedLinkCols, java.util.List linkKeyCols, com.poesys.cartridges.db.psm.db.Dto associationDto, com.poesys.cartridges.db.psm.db.Dto associatedDto, com.poesys.cartridges.db.psm.db.Subsystem linksSubsystem, com.poesys.cartridges.db.psm.db.Dto dto, java.util.List manyKeyCols)
    {
        this.typeName = typeName;
        this.foreignTypeName = foreignTypeName;
        this.sqlTableName = sqlTableName;
        this.name = name;
        this.associationTypeName = associationTypeName;
        this.sqlLinkingTableName = sqlLinkingTableName;
        this.linksPropertyName = linksPropertyName;
        this.foreignPackageName = foreignPackageName;
        this.packageName = packageName;
        this.associationPackageName = associationPackageName;
        this.queriedCols = queriedCols;
        this.keyCols = keyCols;
        this.subsystem = subsystem;
        this.joinCols = joinCols;
        this.queriedLinkCols = queriedLinkCols;
        this.linkKeyCols = linkKeyCols;
        this.associationDto = associationDto;
        this.associatedDto = associatedDto;
        this.linksSubsystem = linksSubsystem;
        this.dto = dto;
        this.manyKeyCols = manyKeyCols;
    }

    /**
     * Copy-constructor from other ParameterizedQuery
     *
     * @param otherBean, cannot be <code>null</code>
     * @throws java.lang.NullPointerException if the argument is <code>null</code>
     */
    public ParameterizedQuery(ParameterizedQuery otherBean)
    {
        this(otherBean.getTypeName(), otherBean.getForeignTypeName(), otherBean.getSqlTableName(), otherBean.getName(), otherBean.getAssociationTypeName(), otherBean.getSqlLinkingTableName(), otherBean.getLinksPropertyName(), otherBean.getForeignPackageName(), otherBean.getPackageName(), otherBean.getAssociationPackageName(), otherBean.getQueriedCols(), otherBean.getKeyCols(), otherBean.getSubsystem(), otherBean.getJoinCols(), otherBean.getQueriedLinkCols(), otherBean.getLinkKeyCols(), otherBean.getAssociationDto(), otherBean.getAssociatedDto(), otherBean.getLinksSubsystem(), otherBean.getDto(), otherBean.getManyKeyCols());
    }

    protected java.lang.String typeName;

    /**
     * <p>
     * The type name of the queried object
     * </p>
     */
    public java.lang.String getTypeName()
    {
        return this.typeName;
    }

    public void setTypeName(java.lang.String typeName)
    {
        this.typeName = typeName;
    }

    protected java.lang.String foreignTypeName;

    /**
     * <p>
     * the type name of the foreign type
     * </p>
     */
    public java.lang.String getForeignTypeName()
    {
        return this.foreignTypeName;
    }

    public void setForeignTypeName(java.lang.String foreignTypeName)
    {
        this.foreignTypeName = foreignTypeName;
    }

    protected java.lang.String sqlTableName;

    /**
     * <p>
     * the name of the SQL table corresponding to the type of the
     * queried object
     * </p>
     */
    public java.lang.String getSqlTableName()
    {
        return this.sqlTableName;
    }

    public void setSqlTableName(java.lang.String sqlTableName)
    {
        this.sqlTableName = sqlTableName;
    }

    protected java.lang.String name;

    /**
     * <p>
     * the name of the query, provides a standardized and
     * Java-convention-formatted name for the query class
     * </p>
     */
    public java.lang.String getName()
    {
        return this.name;
    }

    public void setName(java.lang.String name)
    {
        this.name = name;
    }

    protected java.lang.String associationTypeName;

    /**
     * <p>
     * the name of the association class if there is one
     * </p>
     */
    public java.lang.String getAssociationTypeName()
    {
        return this.associationTypeName;
    }

    public void setAssociationTypeName(java.lang.String associationTypeName)
    {
        this.associationTypeName = associationTypeName;
    }

    protected java.lang.String sqlLinkingTableName;

    /**
     * <p>
     * the name of the SQL linking table corresponding to an
     * association class
     * </p>
     */
    public java.lang.String getSqlLinkingTableName()
    {
        return this.sqlLinkingTableName;
    }

    public void setSqlLinkingTableName(java.lang.String sqlLinkingTableName)
    {
        this.sqlLinkingTableName = sqlLinkingTableName;
    }

    protected java.lang.String linksPropertyName;

    /**
     * <p>
     * the name of the property in the associated classes that is a
     * collection of objects of the association class type: that is,
     * the collection of link objects rather than the collection of
     * associated objects; this is either the association class name or
     * the name tagged value on the AssociationKey stereotype
     * </p>
     */
    public java.lang.String getLinksPropertyName()
    {
        return this.linksPropertyName;
    }

    public void setLinksPropertyName(java.lang.String linksPropertyName)
    {
        this.linksPropertyName = linksPropertyName;
    }

    protected java.lang.String foreignPackageName;

    /**
     * <p>
     * the fully qualified name of the package that contains the
     * foreign type
     * </p>
     */
    public java.lang.String getForeignPackageName()
    {
        return this.foreignPackageName;
    }

    public void setForeignPackageName(java.lang.String foreignPackageName)
    {
        this.foreignPackageName = foreignPackageName;
    }

    protected java.lang.String packageName;

    /**
     * <p>
     * The fully qualified name of the package that contains the type
     * of the queried object
     * </p>
     */
    public java.lang.String getPackageName()
    {
        return this.packageName;
    }

    public void setPackageName(java.lang.String packageName)
    {
        this.packageName = packageName;
    }

    protected java.lang.String associationPackageName;

    /**
     * <p>
     * the name of the package containing the association type (the
     * linking table type)
     * </p>
     */
    public java.lang.String getAssociationPackageName()
    {
        return this.associationPackageName;
    }

    public void setAssociationPackageName(java.lang.String associationPackageName)
    {
        this.associationPackageName = associationPackageName;
    }

    protected java.util.Collection queriedCols;

    /**
     * Get the queriedCols
     * 
     */
    public java.util.Collection getQueriedCols()
    {
        return this.queriedCols;
    }

    /**
     * Sets the queriedCols
     */
    public void setQueriedCols(java.util.Collection queriedCols)
    {
        this.queriedCols = queriedCols;
    }

    protected java.util.Collection keyCols;

    /**
     * Get the keyCols
     * 
     */
    public java.util.Collection getKeyCols()
    {
        return this.keyCols;
    }

    /**
     * Sets the keyCols
     */
    public void setKeyCols(java.util.Collection keyCols)
    {
        this.keyCols = keyCols;
    }

    protected com.poesys.cartridges.db.psm.db.Subsystem subsystem;

    /**
     * Get the subsystem
     * 
     */
    public com.poesys.cartridges.db.psm.db.Subsystem getSubsystem()
    {
        return this.subsystem;
    }

    /**
     * Sets the subsystem
     */
    public void setSubsystem(com.poesys.cartridges.db.psm.db.Subsystem subsystem)
    {
        this.subsystem = subsystem;
    }

    protected java.util.Collection joinCols;

    /**
     * Get the joinCols
     * 
     */
    public java.util.Collection getJoinCols()
    {
        return this.joinCols;
    }

    /**
     * Sets the joinCols
     */
    public void setJoinCols(java.util.Collection joinCols)
    {
        this.joinCols = joinCols;
    }

    protected java.util.Collection queriedLinkCols;

    /**
     * Get the queriedLinkCols
     * 
     */
    public java.util.Collection getQueriedLinkCols()
    {
        return this.queriedLinkCols;
    }

    /**
     * Sets the queriedLinkCols
     */
    public void setQueriedLinkCols(java.util.Collection queriedLinkCols)
    {
        this.queriedLinkCols = queriedLinkCols;
    }

    protected java.util.List linkKeyCols;

    /**
     * Get the linkKeyCols
     * <p>
     * the ordered list of association class key columns used to query
     * the association class objects by the associated class id
     * </p>
     */
    public java.util.List getLinkKeyCols()
    {
        return this.linkKeyCols;
    }

    /**
     * Sets the linkKeyCols
     */
    public void setLinkKeyCols(java.util.List linkKeyCols)
    {
        this.linkKeyCols = linkKeyCols;
    }

    protected com.poesys.cartridges.db.psm.db.Dto associationDto;

    /**
     * Get the associationDto
     * <p>
     * The DTO that represents the many-to-many association being
     * queried by the parameterized query; enables the query to access
     * superclass information
     * </p>
     */
    public com.poesys.cartridges.db.psm.db.Dto getAssociationDto()
    {
        return this.associationDto;
    }

    /**
     * Sets the associationDto
     */
    public void setAssociationDto(com.poesys.cartridges.db.psm.db.Dto associationDto)
    {
        this.associationDto = associationDto;
    }

    protected com.poesys.cartridges.db.psm.db.Dto associatedDto;

    /**
     * Get the associatedDto
     * 
     */
    public com.poesys.cartridges.db.psm.db.Dto getAssociatedDto()
    {
        return this.associatedDto;
    }

    /**
     * Sets the associatedDto
     */
    public void setAssociatedDto(com.poesys.cartridges.db.psm.db.Dto associatedDto)
    {
        this.associatedDto = associatedDto;
    }

    protected com.poesys.cartridges.db.psm.db.Subsystem linksSubsystem;

    /**
     * Get the linksSubsystem
     * <p>
     * The subsystem that contains the linking association class (as
     * opposed to the subsystem that contains the query/association
     * end)
     * </p>
     */
    public com.poesys.cartridges.db.psm.db.Subsystem getLinksSubsystem()
    {
        return this.linksSubsystem;
    }

    /**
     * Sets the linksSubsystem
     */
    public void setLinksSubsystem(com.poesys.cartridges.db.psm.db.Subsystem linksSubsystem)
    {
        this.linksSubsystem = linksSubsystem;
    }

    protected com.poesys.cartridges.db.psm.db.Dto dto;

    /**
     * Get the dto
     * <p>
     * The DTO that will execute the parameterized query
     * </p>
     */
    public com.poesys.cartridges.db.psm.db.Dto getDto()
    {
        return this.dto;
    }

    /**
     * Sets the dto
     */
    public void setDto(com.poesys.cartridges.db.psm.db.Dto dto)
    {
        this.dto = dto;
    }

    protected java.util.List manyKeyCols;

    /**
     * Get the manyKeyCols
     * <p>
     * the ordered list of association class key columns used to query
     * objects from one associated class by the key of the other
     * associated class
     * </p>
     */
    public java.util.List getManyKeyCols()
    {
        return this.manyKeyCols;
    }

    /**
     * Sets the manyKeyCols
     */
    public void setManyKeyCols(java.util.List manyKeyCols)
    {
        this.manyKeyCols = manyKeyCols;
    }

    /**
     * <p>
     * Get the SQL WHERE expression that constitutes the foreign-key
     * selection expression for the SQL query.
     * </p>
     */
    public abstract java.lang.String getWhereExpr();

    /**
     * <p>
     * Get a comma-separated list of SELECT expressions (usually column
     * names).
     * </p>
     */
    public abstract java.lang.String getSelectList();

    /**
     * 
     */
    public abstract java.lang.String getJoinExpr();

    /**
     * 
     */
    public abstract java.lang.String getLinksSelectList();

    /**
     * <p>
     * Get the WHERE clause expression for the association links
     * Query<Link><Assoc>By<Class> SQL statement. This consists of the
     * link key columns associated with the parameterized query. These
     * should be the key column names for the specific property that
     * correspond to the primary key in the associated object for this
     * query. So, if AB links A and B, and this is the property on A,
     * the key should be the column names in AB that refer to the
     * columns in A. For a recursive association (AA), this would be
     * the particular key columns in AA that link to the particular
     * association end in A.
     * </p>
     */
    public abstract java.lang.String getLinksWhereExpr();

    /**
     * <p>
     * Get the SQL FROM clause for the parameterized query of a linking
     * table (a many-to-many association). This can be the linking
     * table name or a series of table names if the linking table is a
     * subclass of another class.
     * </p>
     */
    public abstract java.lang.String getFromClause();

    /**
     * <p>
     * Get the WHERE clause expression for the many-to-many objects
     * Query<Link>By<Class> SQL statement. If A links to B through
     * association C, and you want to get the set of Bs linked to an A,
     * you query the set of B objects joined to C objects where the A
     * key of the C object is the same as the A key of the current A
     * object. The where clause thus contains the key attributes for
     * the A key.
     * </p>
     */
    public abstract java.lang.String getManyToManyWhereExpr();

    /**
     * <p>
     * Get the SQL FROM clause appropriate to a query of a linked
     * object through a many-to-many link, possibly with subclass
     * objects included
     * </p>
     */
    public abstract java.lang.String getLinksFromClause();

    /**
     * <p>
     * Get the FROM clause expression for the many-to-many objects
     * Query<Link>By<Class> SQL statement. If A links to B through
     * association C, and you want to get the set of Bs linked to an A,
     * you query the set of B objects joined to C objects where the A
     * key of the C object is the same as the A key of the current A
     * object. The FROM clause thus contains the association table C as
     * well as the associated table A and any subclass tables of A.
     * </p>
     */
    public abstract java.lang.String getManyToManyFromClause();


}