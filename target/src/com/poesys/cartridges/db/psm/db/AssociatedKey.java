/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
//
// Attention: Generated code! Do not modify by hand!
// Generated by: PSMmetaclass.vsl in andromda-meta-cartridge.
//
package com.poesys.cartridges.db.psm.db;

/**
 * <p>
 * A key associated with a DTO that has a set of key properties;
 * represents either a foreign key in the DTO or some kind of
 * association key
 * </p>
 */
public abstract class AssociatedKey
{

    public AssociatedKey()
    {
        this.name = null;
        this.keyType = null;
        this.parentName = null;
        this.prefix = null;
        this.typeName = null;
        this.packageName = null;
        this.tableName = null;
        this.required = false;
        this.objectName = null;
        this.businessPackageName = null;
        this.fullSubsystemName = null;
        this.generalization = false;
        this.persistent = false;
        this.readWrite = false;
        this.dto = null;
        this.keyProperties = null;
    }

    public AssociatedKey(java.lang.String name, java.lang.String keyType, java.lang.String parentName, java.lang.String prefix, java.lang.String typeName, java.lang.String packageName, java.lang.String tableName, boolean required, java.lang.String objectName, java.lang.String businessPackageName, java.lang.String fullSubsystemName, boolean generalization, boolean persistent, boolean readWrite, com.poesys.cartridges.db.psm.db.Dto dto, java.util.Collection keyProperties)
    {
        this.name = name;
        this.keyType = keyType;
        this.parentName = parentName;
        this.prefix = prefix;
        this.typeName = typeName;
        this.packageName = packageName;
        this.tableName = tableName;
        this.required = required;
        this.objectName = objectName;
        this.businessPackageName = businessPackageName;
        this.fullSubsystemName = fullSubsystemName;
        this.generalization = generalization;
        this.persistent = persistent;
        this.readWrite = readWrite;
        this.dto = dto;
        this.keyProperties = keyProperties;
    }

    public AssociatedKey(java.lang.String name, java.lang.String keyType, java.lang.String parentName, java.lang.String prefix, java.lang.String typeName, java.lang.String packageName, java.lang.String tableName, boolean required, java.lang.String objectName, java.lang.String businessPackageName, java.lang.String fullSubsystemName, boolean generalization, boolean persistent, boolean readWrite, com.poesys.cartridges.db.psm.db.Dto dto, java.util.Collection keyProperties, java.util.Collection parentKeyProperties)
    {
        this.name = name;
        this.keyType = keyType;
        this.parentName = parentName;
        this.prefix = prefix;
        this.typeName = typeName;
        this.packageName = packageName;
        this.tableName = tableName;
        this.required = required;
        this.objectName = objectName;
        this.businessPackageName = businessPackageName;
        this.fullSubsystemName = fullSubsystemName;
        this.generalization = generalization;
        this.persistent = persistent;
        this.readWrite = readWrite;
        this.dto = dto;
        this.keyProperties = keyProperties;
        this.parentKeyProperties = parentKeyProperties;
    }

    /**
     * Copy-constructor from other AssociatedKey
     *
     * @param otherBean, cannot be <code>null</code>
     * @throws java.lang.NullPointerException if the argument is <code>null</code>
     */
    public AssociatedKey(AssociatedKey otherBean)
    {
        this(otherBean.getName(), otherBean.getKeyType(), otherBean.getParentName(), otherBean.getPrefix(), otherBean.getTypeName(), otherBean.getPackageName(), otherBean.getTableName(), otherBean.isRequired(), otherBean.getObjectName(), otherBean.getBusinessPackageName(), otherBean.getFullSubsystemName(), otherBean.isGeneralization(), otherBean.isPersistent(), otherBean.isReadWrite(), otherBean.getDto(), otherBean.getKeyProperties(), otherBean.getParentKeyProperties());
    }

    protected java.lang.String name;

    /**
     * <p>
     * the association end name for this key; used in getForeignKey to
     * look up the key after first looking for the object name
     * </p>
     */
    public java.lang.String getName()
    {
        return this.name;
    }

    public void setName(java.lang.String name)
    {
        this.name = name;
    }

    protected java.lang.String keyType;

    /**
     * <p>
     * The key type of the associated object
     * </p>
     */
    public java.lang.String getKeyType()
    {
        return this.keyType;
    }

    public void setKeyType(java.lang.String keyType)
    {
        this.keyType = keyType;
    }

    protected java.lang.String parentName;

    /**
     * <p>
     * The name of the parent class for a composite key
     * </p>
     */
    public java.lang.String getParentName()
    {
        return this.parentName;
    }

    public void setParentName(java.lang.String parentName)
    {
        this.parentName = parentName;
    }

    protected java.lang.String prefix;

    /**
     * <p>
     * For a composite key, the prefix is the name of the association
     * property end with first letter in lower case; the subsystem
     * factory and DTO implementation use this prefix to construct the
     * variable names for the keys in the composite key, avoiding
     * problems with duplicate names in complex sub-key situations.
     * </p>
     */
    public java.lang.String getPrefix()
    {
        return this.prefix;
    }

    public void setPrefix(java.lang.String prefix)
    {
        this.prefix = prefix;
    }

    protected java.lang.String typeName;

    /**
     * <p>
     * The class name of the associated object class with first letter
     * in upper case
     * </p>
     */
    public java.lang.String getTypeName()
    {
        return this.typeName;
    }

    public void setTypeName(java.lang.String typeName)
    {
        this.typeName = typeName;
    }

    protected java.lang.String packageName;

    /**
     * <p>
     * The package name of the associated class
     * </p>
     */
    public java.lang.String getPackageName()
    {
        return this.packageName;
    }

    public void setPackageName(java.lang.String packageName)
    {
        this.packageName = packageName;
    }

    protected java.lang.String tableName;

    /**
     * <p>
     * the SQL table name for the target of the foreign key assocation
     * </p>
     */
    public java.lang.String getTableName()
    {
        return this.tableName;
    }

    public void setTableName(java.lang.String tableName)
    {
        this.tableName = tableName;
    }

    protected boolean required = false;

    /**
     * <p>
     * Whether the key is required in the owning class (that is,
     * whether the property that the foriegn key represents has a lower
     * bound multiplicity of 1 versus 0)
     * </p>
     */
    public boolean isRequired()
    {
        return this.required;
    }

    public void setRequired(boolean required)
    {
        this.required = required;
    }

    protected java.lang.String objectName;

    /**
     * <p>
     * the class name of the associated object as a variable name with
     * its first letter in lower case; used in getForeignKey to look up
     * the foreign key before checking the foreign key association end
     * name
     * </p>
     */
    public java.lang.String getObjectName()
    {
        return this.objectName;
    }

    public void setObjectName(java.lang.String objectName)
    {
        this.objectName = objectName;
    }

    protected java.lang.String businessPackageName;

    /**
     * <p>
     * the name of the business layer package for the associated key's
     * class
     * </p>
     */
    public java.lang.String getBusinessPackageName()
    {
        return this.businessPackageName;
    }

    public void setBusinessPackageName(java.lang.String businessPackageName)
    {
        this.businessPackageName = businessPackageName;
    }

    protected java.lang.String fullSubsystemName;

    /**
     * <p>
     * the fully qualified name of the subsystem that contains the
     * associated key DTO class
     * </p>
     */
    public java.lang.String getFullSubsystemName()
    {
        return this.fullSubsystemName;
    }

    public void setFullSubsystemName(java.lang.String fullSubsystemName)
    {
        this.fullSubsystemName = fullSubsystemName;
    }

    protected boolean generalization = false;

    /**
     * <p>
     * whether the associated key/foreign key represents an inherited
     * key (the generalization relationship)
     * </p>
     */
    public boolean isGeneralization()
    {
        return this.generalization;
    }

    public void setGeneralization(boolean generalization)
    {
        this.generalization = generalization;
    }

    protected boolean persistent = false;

    /**
     * <p>
     * whether the associated key is persistent; that is, whether the
     * association represents a foreign key constraint in a persistent
     * store or just a transient association of objects, potentially
     * from different stores
     * </p>
     */
    public boolean isPersistent()
    {
        return this.persistent;
    }

    public void setPersistent(boolean persistent)
    {
        this.persistent = persistent;
    }

    protected boolean readWrite = true;

    /**
     * <p>
     * whether the object that is associated by key is read/write
     * </p>
     */
    public boolean isReadWrite()
    {
        return this.readWrite;
    }

    public void setReadWrite(boolean readWrite)
    {
        this.readWrite = readWrite;
    }

    protected com.poesys.cartridges.db.psm.db.Dto dto;

    /**
     * Get the dto
     * <p>
     * the DTO corresponding to the associated key
     * </p>
     */
    public com.poesys.cartridges.db.psm.db.Dto getDto()
    {
        return this.dto;
    }

    /**
     * Sets the dto
     */
    public void setDto(com.poesys.cartridges.db.psm.db.Dto dto)
    {
        this.dto = dto;
    }

    protected java.util.Collection keyProperties;

    /**
     * Get the keyProperties
     * <p>
     * the set of key attributes for the associated key
     * </p>
     */
    public java.util.Collection getKeyProperties()
    {
        return this.keyProperties;
    }

    /**
     * Sets the keyProperties
     */
    public void setKeyProperties(java.util.Collection keyProperties)
    {
        this.keyProperties = keyProperties;
    }

    protected java.util.Collection parentKeyProperties;

    /**
     * Get the parentKeyProperties
     * <p>
     * the subset of the key attributes of the associated key that come
     * from a composite aggregation parent (for composite aggregation
     * targets only)
     * </p>
     */
    public java.util.Collection getParentKeyProperties()
    {
        return this.parentKeyProperties;
    }

    /**
     * Sets the parentKeyProperties
     */
    public void setParentKeyProperties(java.util.Collection parentKeyProperties)
    {
        this.parentKeyProperties = parentKeyProperties;
    }

    /**
     * <p>
     * Is this foreign key also a primary key (does it have primary key
     * properties)?
     * </p>
     */
    public abstract boolean isKey();

    /**
     * <p>
     * Get a unique name for the type of the associated key by
     * combining the package name and the type name.
     * org.tair.test.MyTestClass would become OrgTairTestMyTestClass.
     * </p>
     */
    public abstract java.lang.String getUniqueTypeName();

    /**
     * <p>
     * Get the name of the subsystem that contains the associated key
     * type; this is just the name without the package, with the name
     * init-capped
     * </p>
     */
    public abstract java.lang.String getSubsystemName();

    /**
     * <p>
     * Get the type of the key for a key inherited from a superclass
     * (when keyType == 'None')
     * </p>
     */
    public abstract java.lang.String getInheritedKeyType();


}