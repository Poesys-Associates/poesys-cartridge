/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractQuery.vsl

package com.poesys.db.test.sql;


import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.dao.query.IKeyQuerySql;
import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A query Command pattern object that implements a SQL key query for the 
 * Base. This SQL specification contains a SQL statement that queries
 * a single Base object from the database using the primary key.
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractQueryBase implements IKeyQuerySql<com.poesys.db.test.IBase> {
  /** SQL query statement for Base */
  private static final String SQL =
    "SELECT Base.baseId, Base.baseString, ConcreteMiddle.middleString, LeafC.cString, Middle.middleString, LeafB.bString, LeafA.aString, CASE WHEN LeafC.baseId IS NOT NULL THEN 'LeafC' WHEN ConcreteMiddle.baseId IS NOT NULL THEN 'ConcreteMiddle' WHEN LeafB.baseId IS NOT NULL THEN 'LeafB' WHEN LeafA.baseId IS NOT NULL THEN 'LeafA' ELSE NULL END AS discriminant FROM Base LEFT OUTER JOIN LeafC LeafC ON Base.baseId = LeafC.baseId LEFT OUTER JOIN ConcreteMiddle ConcreteMiddle ON Base.baseId = ConcreteMiddle.baseId LEFT OUTER JOIN LeafB LeafB ON Base.baseId = LeafB.baseId LEFT OUTER JOIN LeafA LeafA ON Base.baseId = LeafA.baseId LEFT OUTER JOIN Middle Middle ON Base.baseId = Middle.baseId WHERE ";

  public com.poesys.db.test.IBase getData(IPrimaryKey key, ResultSet rs) throws SQLException {
    // Base has concrete subclasses, so the query returns an object of the actual
    // type rather than just of type Base. It uses a discriminant expression
    // that the result set returns to figure out which class to instantiate.
    
    // Get the discriminant from the result set.
    String discriminant = rs.getString("discriminant");
    
    // Check whether the discriminant is null and throw exception.
    if (discriminant == null) {
      throw new com.poesys.bs.delegate.DelegateException("Missing subclass for queried object of superclass com.poesys.db.test.Base");
    }
    
    com.poesys.db.test.IBase data = null;
    // Check for LeafC, set return only if not already set
    if (discriminant.equals("LeafC") && data == null) {
      // Use the test factory to get the data.
      data = com.poesys.db.test.TestFactory.getLeafCData(key, rs);
    }
    // Check for ConcreteMiddle, set return only if not already set
    if (discriminant.equals("ConcreteMiddle") && data == null) {
      // Use the test factory to get the data.
      data = com.poesys.db.test.TestFactory.getConcreteMiddleData(key, rs);
    }
    // Check for LeafB, set return only if not already set
    if (discriminant.equals("LeafB") && data == null) {
      // Use the test factory to get the data.
      data = com.poesys.db.test.TestFactory.getLeafBData(key, rs);
    }
    // Check for LeafA, set return only if not already set
    if (discriminant.equals("LeafA") && data == null) {
      // Use the test factory to get the data.
      data = com.poesys.db.test.TestFactory.getLeafAData(key, rs);
    }
    return data;
  }

  public String getSql(IPrimaryKey key) {
    return SQL + key.getSqlWhereExpression("Base");
  }
}