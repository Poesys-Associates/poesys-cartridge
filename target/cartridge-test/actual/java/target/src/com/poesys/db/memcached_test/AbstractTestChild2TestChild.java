/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.db.memcached_test;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the TestChild2TestChild. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Immutable</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTestChild2TestChild extends AbstractDto implements ITestChild2TestChild {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the up association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryUpSetter extends com.poesys.db.dto.AbstractObjectSetter<com.poesys.db.memcached_test.ITestChild> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryUpSetter object.
     */
    public QueryUpSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return upKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestChild();
    }

    @Override
    protected void set(com.poesys.db.memcached_test.ITestChild dto) {
      // No status change, this is just filling in the object data.
      up = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated upTestChild is not null
      return up != null;
    }
  }


  /**
   * Foreign key object used by QueryUpSetter nested class to query object
   */
  private IPrimaryKey upKey;
  
  /**
   * Set the foreign key upKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param upKey the foreign key
   */
  void setUpKey(IPrimaryKey upKey) {
    this.upKey = upKey;
  }

  /**
   * Nested class that manages the down association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryDownSetter extends com.poesys.db.dto.AbstractObjectSetter<com.poesys.db.memcached_test.ITestChild> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryDownSetter object.
     */
    public QueryDownSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return downKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestChild();
    }

    @Override
    protected void set(com.poesys.db.memcached_test.ITestChild dto) {
      // No status change, this is just filling in the object data.
      down = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated downTestChild is not null
      return down != null;
    }
  }


  /**
   * Foreign key object used by QueryDownSetter nested class to query object
   */
  private IPrimaryKey downKey;
  
  /**
   * Set the foreign key downKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param downKey the foreign key
   */
  void setDownKey(IPrimaryKey downKey) {
    this.downKey = downKey;
  }

  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested tc1
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTc1ByTestChild2TestChild
   */
  private class QueryTc1Setter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.memcached_test.ITestChild2TestChild, ITestChild2TestChild, java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryTc1Setter object.
     */
    public QueryTc1Setter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild2TestChild.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITestChild2TestChild getParametersDto() {
      return AbstractTestChild2TestChild.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.memcached_test.ITestChild2TestChild, ITestChild2TestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTc1ByTestChild2TestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> list) {
      // No status change; this is just filling in the object data.
      tc1 = list;
      // Add the primary keys to the serialized key list if there are any.
      if (tc1 != null) {
        for (com.poesys.db.dto.IDbDto object : tc1) {
          tc1Keys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated tc1 list is not null
      return tc1 != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested tc1 collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTestChild2TestChild
   */
  private class ReadTc1Setter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.memcached_test.ITestChild2TestChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadTc1Setter object to read the tc1 collection.
     */
    public ReadTc1Setter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild2TestChild.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> getObjectCollection() {
      return tc1;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return tc1Keys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestChild2TestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestChild2TestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> collection) {
     tc1 = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association tc1.
   *
   * @see com.poesys.db.memcached_test.sql.InsertTestChild2TestChild
   */
  private class InsertTc1Setter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association tc1 source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertTc1Setter object.
     */
    public InsertTc1Setter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild2TestChild.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = tc1;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added tc1, updated tc1, and 
   * deleted tc1. 
   */
   
  /**
   * Query setter for querying nested tc2
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTc2ByTestChild2TestChild
   */
  private class QueryTc2Setter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.memcached_test.ITestChild2TestChild, ITestChild2TestChild, java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryTc2Setter object.
     */
    public QueryTc2Setter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild2TestChild.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITestChild2TestChild getParametersDto() {
      return AbstractTestChild2TestChild.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.memcached_test.ITestChild2TestChild, ITestChild2TestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTc2ByTestChild2TestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> list) {
      // No status change; this is just filling in the object data.
      tc2 = list;
      // Add the primary keys to the serialized key list if there are any.
      if (tc2 != null) {
        for (com.poesys.db.dto.IDbDto object : tc2) {
          tc2Keys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated tc2 list is not null
      return tc2 != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested tc2 collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTestChild2TestChild
   */
  private class ReadTc2Setter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.memcached_test.ITestChild2TestChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadTc2Setter object to read the tc2 collection.
     */
    public ReadTc2Setter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild2TestChild.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> getObjectCollection() {
      return tc2;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return tc2Keys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestChild2TestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestChild2TestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> collection) {
     tc2 = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association tc2.
   *
   * @see com.poesys.db.memcached_test.sql.InsertTestChild2TestChild
   */
  private class InsertTc2Setter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association tc2 source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertTc2Setter object.
     */
    public InsertTc2Setter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild2TestChild.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = tc2;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added tc2, updated tc2, and 
   * deleted tc2. 
   */
   
  /**
   * Query setter for querying nested tc1TC2TC2TC2TCLinks
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTc1TC2TC2TC2TCLinksByTestChild2TestChild
   */
  private class QueryTc1TC2TC2TC2TCLinksSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.memcached_test.ITC2TC2TC2TC, ITestChild2TestChild, java.util.Collection<com.poesys.db.memcached_test.ITC2TC2TC2TC>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryTc1TC2TC2TC2TCLinksSetter object.
     */
    public QueryTc1TC2TC2TC2TCLinksSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TC2TC2TC2TC.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITestChild2TestChild getParametersDto() {
      return AbstractTestChild2TestChild.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.memcached_test.ITC2TC2TC2TC, ITestChild2TestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTc1TC2TC2TC2TCLinksByTestChild2TestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITC2TC2TC2TC> list) {
      // No status change; this is just filling in the object data.
      tc1TC2TC2TC2TCLinks = list;
      // Add the primary keys to the serialized key list if there are any.
      if (tc1TC2TC2TC2TCLinks != null) {
        for (com.poesys.db.dto.IDbDto object : tc1TC2TC2TC2TCLinks) {
          tc1TC2TC2TC2TCLinksKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated tc1TC2TC2TC2TCLinks list is not null
      return tc1TC2TC2TC2TCLinks != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested tc1TC2TC2TC2TCLinks collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTC2TC2TC2TC
   */
  private class ReadTc1TC2TC2TC2TCLinksSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.memcached_test.ITC2TC2TC2TC> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadTc1TC2TC2TC2TCLinksSetter object to read the tc1TC2TC2TC2TCLinks collection.
     */
    public ReadTc1TC2TC2TC2TCLinksSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TC2TC2TC2TC.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.ITC2TC2TC2TC> getObjectCollection() {
      return tc1TC2TC2TC2TCLinks;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return tc1TC2TC2TC2TCLinksKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITC2TC2TC2TC> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTC2TC2TC2TC();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITC2TC2TC2TC> collection) {
     tc1TC2TC2TC2TCLinks = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association tc1TC2TC2TC2TCLinks.
   *
   * @see com.poesys.db.memcached_test.sql.InsertTC2TC2TC2TC
   */
  private class InsertTc1TC2TC2TC2TCLinksSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association tc1TC2TC2TC2TCLinks source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertTc1TC2TC2TC2TCLinksSetter object.
     */
    public InsertTc1TC2TC2TC2TCLinksSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TC2TC2TC2TC.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = tc1TC2TC2TC2TCLinks;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added tc1TC2TC2TC2TCLinks and updated tc1TC2TC2TC2TCLinks.
   * Deleted tc1TC2TC2TC2TCLinks are deleted in the database cascade delete.
   */
   
  /**
   * Query setter for querying nested tc2TC2TC2TC2TCLinks
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTc2TC2TC2TC2TCLinksByTestChild2TestChild
   */
  private class QueryTc2TC2TC2TC2TCLinksSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.memcached_test.ITC2TC2TC2TC, ITestChild2TestChild, java.util.Collection<com.poesys.db.memcached_test.ITC2TC2TC2TC>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryTc2TC2TC2TC2TCLinksSetter object.
     */
    public QueryTc2TC2TC2TC2TCLinksSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TC2TC2TC2TC.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITestChild2TestChild getParametersDto() {
      return AbstractTestChild2TestChild.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.memcached_test.ITC2TC2TC2TC, ITestChild2TestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTc2TC2TC2TC2TCLinksByTestChild2TestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITC2TC2TC2TC> list) {
      // No status change; this is just filling in the object data.
      tc2TC2TC2TC2TCLinks = list;
      // Add the primary keys to the serialized key list if there are any.
      if (tc2TC2TC2TC2TCLinks != null) {
        for (com.poesys.db.dto.IDbDto object : tc2TC2TC2TC2TCLinks) {
          tc2TC2TC2TC2TCLinksKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated tc2TC2TC2TC2TCLinks list is not null
      return tc2TC2TC2TC2TCLinks != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested tc2TC2TC2TC2TCLinks collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTC2TC2TC2TC
   */
  private class ReadTc2TC2TC2TC2TCLinksSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.memcached_test.ITC2TC2TC2TC> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadTc2TC2TC2TC2TCLinksSetter object to read the tc2TC2TC2TC2TCLinks collection.
     */
    public ReadTc2TC2TC2TC2TCLinksSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TC2TC2TC2TC.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.ITC2TC2TC2TC> getObjectCollection() {
      return tc2TC2TC2TC2TCLinks;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return tc2TC2TC2TC2TCLinksKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITC2TC2TC2TC> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTC2TC2TC2TC();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITC2TC2TC2TC> collection) {
     tc2TC2TC2TC2TCLinks = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association tc2TC2TC2TC2TCLinks.
   *
   * @see com.poesys.db.memcached_test.sql.InsertTC2TC2TC2TC
   */
  private class InsertTc2TC2TC2TC2TCLinksSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association tc2TC2TC2TC2TCLinks source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertTc2TC2TC2TC2TCLinksSetter object.
     */
    public InsertTc2TC2TC2TC2TCLinksSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TC2TC2TC2TC.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = tc2TC2TC2TC2TCLinks;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added tc2TC2TC2TC2TCLinks and updated tc2TC2TC2TC2TCLinks.
   * Deleted tc2TC2TC2TC2TCLinks are deleted in the database cascade delete.
   */
   
  /**
   * Create an empty TestChild2TestChild for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractTestChild2TestChild() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the upTestChild property.
    querySetters.add(new QueryUpSetter());

    // Add the setters for the downTestChild property.
    querySetters.add(new QueryDownSetter());
    
    // Add the many-to-many collection setters for the tc1 property.
    querySetters.add(new QueryTc1Setter());
    readObjectSetters.add(new ReadTc1Setter());
    insertSetters.add(new InsertTc1Setter());
    
    // Add the many-to-many collection setters for the tc2 property.
    querySetters.add(new QueryTc2Setter());
    readObjectSetters.add(new ReadTc2Setter());
    insertSetters.add(new InsertTc2Setter());
    
    // Add the many-to-many collection setters for the tc1TC2TC2TC2TCLinks property.
    querySetters.add(new QueryTc1TC2TC2TC2TCLinksSetter());
    readObjectSetters.add(new ReadTc1TC2TC2TC2TCLinksSetter());
    insertSetters.add(new InsertTc1TC2TC2TC2TCLinksSetter());
    
    // Add the many-to-many collection setters for the tc2TC2TC2TC2TCLinks property.
    querySetters.add(new QueryTc2TC2TC2TC2TCLinksSetter());
    readObjectSetters.add(new ReadTc2TC2TC2TC2TCLinksSetter());
    insertSetters.add(new InsertTc2TC2TC2TC2TCLinksSetter());
  }

  /**
   * Create a TestChild2TestChild. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the TestChild2TestChild
   * @param downObject wraps an associated ITestChild object
   * @param upObject wraps an associated ITestChild object
   * @param downChildNo Attribute that is part of the association key
   * @param upChildNo Attribute that is part of the association key
   * @param downTestParentId Attribute that is part of the association key
   * @param upTestParentId Attribute that is part of the association key
   */
  public AbstractTestChild2TestChild(IPrimaryKey key, com.poesys.db.memcached_test.ITestChild downObject, com.poesys.db.memcached_test.ITestChild upObject, java.math.BigInteger downChildNo, java.math.BigInteger upChildNo, java.math.BigInteger downTestParentId, java.math.BigInteger upTestParentId) {
    this.key = key;

    this.downChildNo = downChildNo;

    if (downChildNo == null) {
      throw new com.poesys.db.InvalidParametersException("downChildNo is required for " + key.getValueList());
    }
    
    this.upChildNo = upChildNo;

    if (upChildNo == null) {
      throw new com.poesys.db.InvalidParametersException("upChildNo is required for " + key.getValueList());
    }
    
    this.downTestParentId = downTestParentId;

    if (downTestParentId == null) {
      throw new com.poesys.db.InvalidParametersException("downTestParentId is required for " + key.getValueList());
    }
    
    this.upTestParentId = upTestParentId;

    if (upTestParentId == null) {
      throw new com.poesys.db.InvalidParametersException("upTestParentId is required for " + key.getValueList());
    }
    
    // Associated key object
    down = downObject;
    
    // Associated key object
    up = upObject;
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the up property.
    querySetters.add(new QueryUpSetter());
    
    
    // Add the setters for the down property.
    querySetters.add(new QueryDownSetter());
    
    
    // Add the many-to-many collection setters for the tc1 property.
    querySetters.add(new QueryTc1Setter());
    readObjectSetters.add(new ReadTc1Setter());
    insertSetters.add(new InsertTc1Setter());
    
    // Add the many-to-many collection setters for the tc2 property.
    querySetters.add(new QueryTc2Setter());
    readObjectSetters.add(new ReadTc2Setter());
    insertSetters.add(new InsertTc2Setter());
    
    // Add the many-to-many collection setters for the tc1TC2TC2TC2TCLinks property.
    querySetters.add(new QueryTc1TC2TC2TC2TCLinksSetter());
    readObjectSetters.add(new ReadTc1TC2TC2TC2TCLinksSetter());
    insertSetters.add(new InsertTc1TC2TC2TC2TCLinksSetter());
    
    // Add the many-to-many collection setters for the tc2TC2TC2TC2TCLinks property.
    querySetters.add(new QueryTc2TC2TC2TC2TCLinksSetter());
    readObjectSetters.add(new ReadTc2TC2TC2TC2TCLinksSetter());
    insertSetters.add(new InsertTc2TC2TC2TC2TCLinksSetter());
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractTestChild2TestChild other = (AbstractTestChild2TestChild)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractTestChild2TestChild other = (AbstractTestChild2TestChild)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.db.memcached_test";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (tc1TC2TC2TC2TCLinks != null) {
      for (com.poesys.db.dto.IDbDto dto : tc1TC2TC2TC2TCLinks) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (tc2TC2TC2TC2TCLinks != null) {
      for (com.poesys.db.dto.IDbDto dto : tc2TC2TC2TC2TCLinks) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("com.poesys.db.memcached_test");
    String subsystem =
      "com.poesys.db.memcached_test"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property tc1
   *
   * 
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> tc1;
  // Ordered list of keys of the objects in the tc1 list
  java.util.List<com.poesys.db.pk.IPrimaryKey> tc1Keys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.memcached_test.ITestChild2TestChild.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild>
   */

  public java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> getTc1() {
    return tc1;
  }

  /**
   * Clear the tc1 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTc1() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property tc2
   *
   * 
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> tc2;
  // Ordered list of keys of the objects in the tc2 list
  java.util.List<com.poesys.db.pk.IPrimaryKey> tc2Keys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.memcached_test.ITestChild2TestChild.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild>
   */

  public java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> getTc2() {
    return tc2;
  }

  /**
   * Clear the tc2 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTc2() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property tc1TC2TC2TC2TCLinks
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.memcached_test.ITC2TC2TC2TC> tc1TC2TC2TC2TCLinks;
  // Ordered list of keys of the objects in the tc1TC2TC2TC2TCLinks list
  java.util.List<com.poesys.db.pk.IPrimaryKey> tc1TC2TC2TC2TCLinksKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.memcached_test.ITC2TC2TC2TC.
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.ITC2TC2TC2TC>
   */

  public java.util.Collection<com.poesys.db.memcached_test.ITC2TC2TC2TC> getTc1TC2TC2TC2TCLinks() {
    return tc1TC2TC2TC2TCLinks;
  }

  /**
   * Clear the tc1TC2TC2TC2TCLinks data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTc1TC2TC2TC2TCLinks() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property tc2TC2TC2TC2TCLinks
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.memcached_test.ITC2TC2TC2TC> tc2TC2TC2TC2TCLinks;
  // Ordered list of keys of the objects in the tc2TC2TC2TC2TCLinks list
  java.util.List<com.poesys.db.pk.IPrimaryKey> tc2TC2TC2TC2TCLinksKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.memcached_test.ITC2TC2TC2TC.
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.ITC2TC2TC2TC>
   */

  public java.util.Collection<com.poesys.db.memcached_test.ITC2TC2TC2TC> getTc2TC2TC2TC2TCLinks() {
    return tc2TC2TC2TC2TCLinks;
  }

  /**
   * Clear the tc2TC2TC2TC2TCLinks data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTc2TC2TC2TC2TCLinks() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property up
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private com.poesys.db.memcached_test.ITestChild up;
  
  /**
   * Get an object of com.poesys.db.memcached_test.ITestChild.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a com.poesys.db.memcached_test.ITestChild
   */

  public com.poesys.db.memcached_test.ITestChild getUp() {
    return up;
  }

  /**
   * Clear the up data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearUp() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property down
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private com.poesys.db.memcached_test.ITestChild down;
  
  /**
   * Get an object of com.poesys.db.memcached_test.ITestChild.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a com.poesys.db.memcached_test.ITestChild
   */

  public com.poesys.db.memcached_test.ITestChild getDown() {
    return down;
  }

  /**
   * Clear the down data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDown() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property downChildNo
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddOrderedSubKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.math.BigInteger downChildNo;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddOrderedSubKeyProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getDownChildNo() {
    return downChildNo;
  }

  /**
   * Clear the downChildNo data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDownChildNo() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property upChildNo
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddOrderedSubKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.math.BigInteger upChildNo;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddOrderedSubKeyProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getUpChildNo() {
    return upChildNo;
  }

  /**
   * Clear the upChildNo data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearUpChildNo() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property downTestParentId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger downTestParentId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getDownTestParentId() {
    return downTestParentId;
  }

  /**
   * Clear the downTestParentId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDownTestParentId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property upTestParentId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger upTestParentId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getUpTestParentId() {
    return upTestParentId;
  }

  /**
   * Clear the upTestParentId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearUpTestParentId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up tc1TC2TC2TC2TCLinks.
    if (subject != null && subject instanceof com.poesys.db.memcached_test.ITC2TC2TC2TC && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        tc1TC2TC2TC2TCLinks != null) {
      // Delete to-many tc1TC2TC2TC2TCLinks child from collection
      tc1TC2TC2TC2TCLinks.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up tc2TC2TC2TC2TCLinks.
    if (subject != null && subject instanceof com.poesys.db.memcached_test.ITC2TC2TC2TC && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        tc2TC2TC2TC2TCLinks != null) {
      // Delete to-many tc2TC2TC2TC2TCLinks child from collection
      tc2TC2TC2TC2TCLinks.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Cascade delete to tc1.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        tc1 != null) {
      // Mark tc1 association object cascade-deleted.
      outer: for (com.poesys.db.memcached_test.ITestChild2TestChild value : tc1) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }

    // Cascade delete to tc2.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        tc2 != null) {
      // Mark tc2 association object cascade-deleted.
      outer: for (com.poesys.db.memcached_test.ITestChild2TestChild value : tc2) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }

    // Cascade delete to tc1TC2TC2TC2TCLinks.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        tc1TC2TC2TC2TCLinks != null) {
      // Mark tc1TC2TC2TC2TCLinks association object cascade-deleted.
      outer: for (com.poesys.db.memcached_test.ITC2TC2TC2TC value : tc1TC2TC2TC2TCLinks) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }

    // Cascade delete to tc2TC2TC2TC2TCLinks.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        tc2TC2TC2TC2TCLinks != null) {
      // Mark tc2TC2TC2TC2TCLinks association object cascade-deleted.
      outer: for (com.poesys.db.memcached_test.ITC2TC2TC2TC value : tc2TC2TC2TC2TCLinks) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }
  }

  /**
   * Create the inserters for the TestChild2TestChild and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestChild2TestChild> testChild2TestChildFactory =
      manager.getFactory("com.poesys.db.memcached_test.TestChild2TestChild",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<ITestChild2TestChild> sql =
      new com.poesys.db.memcached_test.sql.InsertTestChild2TestChild();
    com.poesys.db.dao.insert.IInsert<ITestChild2TestChild> inserter =
      testChild2TestChildFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}