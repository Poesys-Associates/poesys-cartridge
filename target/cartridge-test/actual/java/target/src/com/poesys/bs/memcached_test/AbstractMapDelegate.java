/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDelegate.vsl

package com.poesys.bs.memcached_test;


import com.poesys.bs.delegate.AbstractIdentityDataDelegate;
import com.poesys.bs.delegate.DelegateException;
import com.poesys.db.connection.IConnectionFactory.DBMS;
import com.poesys.db.dao.insert.IInsertSql;
import com.poesys.db.dao.update.IUpdateSql;
import com.poesys.db.dao.delete.IDeleteSql;
import com.poesys.db.dao.query.IKeyQuerySql;
import com.poesys.db.dao.query.IQuerySql;


/**
 * <p>
 * A business delegate that provides an application programming interface for
 * Map objects and their dependents. You should not modify this class;
 * instead, override or add methods in the class MapDelegate, which
 * specializes this class.
 * </p>
 * <p>
 * a map of objects to a genome
 * </p>
 * @see MapDelegate
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractMapDelegate
    extends AbstractIdentityDataDelegate<BsMap, com.poesys.db.memcached_test.IMap, com.poesys.db.pk.IdentityPrimaryKey> {
  /**
   * Create an AbstractMapDelegate object by supplying the database
   * subsystem in the database.properties file.
   * 
   * @param subsystem the database subsystem to use in database.properties
   */
  public AbstractMapDelegate(String subsystem) {
    super(subsystem, 2147483647);
  }

  /**
   * Create an AbstractMapDelegate object by supplying the database
   * subsystem in the database.properties file and a specific DBMS, usually
   * IConnectionFactory.DBMS.JNDI.
   * 
   * @param subsystem the database subsystem to use in database.properties
   * @param dbms the DBMS to use (usually IConnectionFactory.DBMS.JNDI)
   */
  public AbstractMapDelegate(String subsystem, DBMS dbms) {
    super(subsystem, dbms, 2147483647);
  }

  @Override
  protected String getClassName() {
    return com.poesys.db.memcached_test.Map.class.getName();
  }

  @Override
  protected IInsertSql<com.poesys.db.memcached_test.IMap> getInsertSql() {
    return new com.poesys.db.memcached_test.sql.InsertMap();
  }

  @Override
  protected IDeleteSql<com.poesys.db.memcached_test.IMap> getDeleteSql() {
    return new com.poesys.db.memcached_test.sql.DeleteMap();
  }

  @Override
  protected IUpdateSql<com.poesys.db.memcached_test.IMap> getUpdateSql() {
    return new com.poesys.db.memcached_test.sql.UpdateMap();
  }

  @Override
  protected IKeyQuerySql<com.poesys.db.memcached_test.IMap> getQueryByKeySql() {
    return new com.poesys.db.memcached_test.sql.QueryMap();
  }

  @Override
  protected IQuerySql<com.poesys.db.memcached_test.IMap> getQueryListSql() {
    // Query-All method not required
    return new com.poesys.db.memcached_test.sql.QueryAllMap();
  }

  @Override
  protected com.poesys.bs.memcached_test.BsMap wrapData(com.poesys.db.memcached_test.IMap dto) {
    return new com.poesys.bs.memcached_test.BsMap(dto);
  }

  /**
   * <p>
   * Create a new Map with data fields.
   * </p>
   * <p>
   * The Map class has an identity key; this method does nothing with
   * respect to the key, which the database will generate when the new Map
   * inserts into the database.
   * </p>
   * 
   * @param mapId primary key attribute
   * @param location 
   * @return the new Map object
   * @throws DelegateException when there is a problem generating the key or
   *             creating the object
   */
  public com.poesys.bs.memcached_test.BsMap createMap(java.math.BigInteger mapId, java.lang.Long location)
      throws DelegateException {
    com.poesys.db.pk.IPrimaryKey key = 
      com.poesys.db.memcached_test.Memcached_testFactory.getMapPrimaryKey(mapId);
      
    // Create a data-access DTO for direct access, no proxy required.
    com.poesys.db.memcached_test.IMap dto =
      new com.poesys.db.memcached_test.Map(key, mapId, location);

    // Create the business DTO.
    return new com.poesys.bs.memcached_test.BsMap(dto);
  }


  @Override
  public void truncateTable(String tableName) throws DelegateException {
    java.sql.Connection c = getConnection();
    com.poesys.db.dao.ddl.ISql sql = null;
    com.poesys.db.dao.ddl.IExecuteSql executive = null;

    // First truncate any child tables.
    sql = new com.poesys.db.dao.ddl.TruncateTableSql("MapElement");
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "MapElement", e);
    }

    // Now truncate the current table.
    sql = new com.poesys.db.dao.ddl.TruncateTableSql(tableName);
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "Map", e);
    }
  }
}
