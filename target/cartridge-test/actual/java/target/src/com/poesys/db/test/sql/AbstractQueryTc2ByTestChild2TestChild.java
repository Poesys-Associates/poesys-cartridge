/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractQueryAssociatedManyToManyObjects.vsl


package com.poesys.db.test.sql;


import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.ConstraintViolationException;
import com.poesys.db.InvalidParametersException;
import com.poesys.db.dao.query.IParameterizedQuerySql;
import com.poesys.db.pk.IPrimaryKey;



/**
 * <p>
 * A query Command pattern object that implements a SQL query of a collection of 
 * TestChild2TestChild objects using the primary key of an associated 
 * TestChild2TestChild object through the association Tc2 using the 
 * association class TC2TC2TC2TC. This association is a many-to-many 
 * association from TestChild2TestChild to TestChild2TestChild.
 * </p>
 * <p>
 * This SQL specification contains a SQL statement that queries a collection of
 * TestChild2TestChild objects from the database table TestChild2TestChild by
 * joining to the database table TC2TC2TC2TC and using the 
 * primary key from TestChild2TestChild to query the collection.
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractQueryTc2ByTestChild2TestChild 
    implements IParameterizedQuerySql<com.poesys.db.test.ITestChild2TestChild, com.poesys.db.test.ITestChild2TestChild> {
  /** SQL query statement for TestChild2TestChild */
  private static final String SQL =
    "SELECT a.downChildNo, a.upChildNo, a.downTestParentId, a.upTestParentId FROM TestChild2TestChild a JOIN TC2TC2TC2TC b ON a.downChildNo = b.tc2DownChildNo AND a.upChildNo = b.tc2DownChildNo AND a.downTestParentId = b.tc2DownTestParentId AND a.upTestParentId = b.tc2DownTestParentId WHERE b.tc1DownChildNo = ? AND b.tc1DownTestParentId = ? AND b.tc1UpChildNo = ? AND b.tc1UpTestParentId = ?";

  public void bindParameters(PreparedStatement stmt, com.poesys.db.test.ITestChild2TestChild parameters)
      throws SQLException {
    // Set the parameters starting with the first parameter.
    parameters.getPrimaryKey().setParams(stmt, 1);
  }

  public String getParameterValues(com.poesys.db.test.ITestChild2TestChild parameters) {
    // Create the output string with the key parameters.
    return parameters.getPrimaryKey().getValueList();
  }

  public com.poesys.db.test.ITestChild2TestChild getData(ResultSet rs) 
      throws SQLException, ConstraintViolationException {
    IPrimaryKey key = 
      com.poesys.db.test.TestFactory.getTestChild2TestChildPrimaryKey(rs, "");
    return com.poesys.db.test.TestFactory.getTestChild2TestChildData(key, rs);
  }

  public IPrimaryKey getPrimaryKey(ResultSet rs) throws SQLException,
      InvalidParametersException {
    return com.poesys.db.test.TestFactory.getTestChild2TestChildPrimaryKey(rs, "");
  }

  public String getSql() {
    return SQL;
  }
}