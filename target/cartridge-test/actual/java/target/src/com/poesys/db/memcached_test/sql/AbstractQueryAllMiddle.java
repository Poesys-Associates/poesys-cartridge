/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractQueryAll.vsl

package com.poesys.db.memcached_test.sql;


import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.InvalidParametersException;
import com.poesys.db.dao.query.IQuerySql;
import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.memcached_test.Memcached_testFactory;


/**
 * <p>
 * A query Command pattern object that implements a SQL query for all the 
 * Middle objects in the database; use with caution
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractQueryAllMiddle implements IQuerySql<com.poesys.db.memcached_test.IMiddle> {
  /** SQL query statement for Middle */
  private static final String SQL =
    "SELECT Base.baseId, Base.baseString, Middle.middleString, LeafB.bString, LeafA.aString, CASE WHEN LeafB.baseId IS NOT NULL THEN 'LeafB' WHEN LeafA.baseId IS NOT NULL THEN 'LeafA' ELSE NULL END AS discriminant FROM Middle Middle JOIN Base Base ON Middle.baseId = Base.baseId LEFT OUTER JOIN LeafB LeafB ON Middle.baseId = LeafB.baseId LEFT OUTER JOIN LeafA LeafA ON Middle.baseId = LeafA.baseId";

  public com.poesys.db.memcached_test.IMiddle getData(ResultSet rs) throws SQLException {
    IPrimaryKey key = 
      Memcached_testFactory.getMiddlePrimaryKey(rs, "");
      
    // Middle has subclasses, so the query returns an object of the actual
    // type rather than just of type Middle. It uses a discriminant expression
    // that the result set returns to figure out which class to instantiate.
    
    // Get the discriminant from the result set.
    String discriminant = rs.getString("discriminant");
    
    // Check whether the discriminant is null and throw exception.
    if (discriminant == null) {
      throw new com.poesys.bs.delegate.DelegateException("Missing subclass for queried object of superclass com.poesys.db.memcached_test.Middle");
    }
    
    com.poesys.db.memcached_test.IMiddle data = null;
    // Check for LeafB, set return only if not already set
    if (discriminant.equals("LeafB") && data == null) {
      // Use the memcached_test factory to get the data.
      data = 
        (com.poesys.db.memcached_test.IMiddle)com.poesys.db.memcached_test.Memcached_testFactory.getLeafBData(key, rs);
    }
    // Check for LeafA, set return only if not already set
    if (discriminant.equals("LeafA") && data == null) {
      // Use the memcached_test factory to get the data.
      data = 
        (com.poesys.db.memcached_test.IMiddle)com.poesys.db.memcached_test.Memcached_testFactory.getLeafAData(key, rs);
    }
    return data;
  }
  
  public IPrimaryKey getPrimaryKey(ResultSet rs) throws SQLException,
      InvalidParametersException {
    return Memcached_testFactory.getMiddlePrimaryKey(rs, "");
  }

  public String getSql() {
    return SQL;
  }
}