/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package com.poesys.bs.test;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import com.poesys.db.test.ITestA;
import com.poesys.db.test.TestAProxy;
import com.poesys.db.test.TestA;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the TestA. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Immutable</li>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsTestA 
    extends AbstractDto<com.poesys.db.test.ITestA> {

  /**
   * A List builder helper class for building a business-layer List 
   * of BsTestB objects from a List bs of data-access-layer 
   * com.poesys.db.test.ITestB objects
   */
  private class BsBsListBuilder 
      extends com.poesys.bs.dto.ListBuilder<com.poesys.db.test.ITestB, com.poesys.bs.test.BsTestB> {
    @Override
    public com.poesys.bs.test.BsTestB get(com.poesys.db.test.ITestB dto) {
      return new com.poesys.bs.test.BsTestB(dto);
    }
  }

  /**
   * Create a BsTestA object from a TestA object.
   * 
   * @param dto the data-access layer TestA DTO
   * @throws DelegateException when there is a problem creating the TestA
   */
  public AbstractBsTestA(ITestA dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a TestA from new data.
   *
   * @param key the primary key of the TestA
   * @param testAId primary key attribute
   */
  public AbstractBsTestA(IPrimaryKey key, java.math.BigInteger testAId) {
    super(new TestAProxy(new TestA(key, testAId)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ITestA> other = (IDto<ITestA>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ITestA> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Primary key attribute
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object TestA</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger testAId
   */
  public java.math.BigInteger getTestAId() {
    return dto.getTestAId();
  }

  /**
   * 
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestA</li>
   * </ul>
   * </p>
   * @return a com.poesys.bs.test.BsTestB testAId
   */
  public java.util.List<com.poesys.bs.test.BsTestB> getBs() {
    BsBsListBuilder builder = new BsBsListBuilder();
    return builder.getList(dto.getBs());
  }
}