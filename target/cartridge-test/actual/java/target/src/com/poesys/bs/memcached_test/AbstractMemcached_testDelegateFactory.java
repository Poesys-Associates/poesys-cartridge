/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractSubsystemDelegateFactory.vsl

package com.poesys.bs.memcached_test;


import com.poesys.db.connection.IConnectionFactory.DBMS;


/**
 * <p>
 * A set of factory methods for the instantiable business delegates in the 
 * Memcached_test subsystem. This class is abstract and has a single concrete 
 * subclass, Memcached_testDelegateFactory, that you can modify to override
 * the default behavior in the abstract class or implement an as-yet 
 * unimplemented delegate factory. You can, for example, override all the
 * factory methods with a different connection strategy.
 * </p>
 * 
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractMemcached_testDelegateFactory {
  /** 
   * The fully qualified name of the Memcached_test subsystem properties file,
   * not including the locale information. This comes from the UML subsystem
   * as the package name concatenated to the subsystem name (the fully qualified
   * subsystem name). The actual file is then in the package with the subsystem 
   * name concatenated to the locale name followed by the .properties extension.
   * For example, the subsystem memcached_test in the com.poesys.db 
   * package has the property file com.poesys.db.memcached_test_en_US.properties
   * for the default locale english (US).
   */
  private static final String PROPERTY_FILE = "com.poesys.db.memcached_test";
    
  /** Resource bundle for subsystem property file */
  private static final java.util.ResourceBundle rb =
    java.util.ResourceBundle.getBundle(PROPERTY_FILE);

  /** Initialize the subsystem name from the property file. */
  private static final String subsystem = rb.getString("subsystem");

  /** Initialize the DBMS type from the property file. */
  protected static final DBMS JNDI_DBMS = DBMS.stringValue(rb.getString("jndi_dbms"));
  
  /** Initialize the distributed( memcached)  DAO manager for the subsystem. */
  protected static final com.poesys.db.dao.IDaoManager manager = 
    com.poesys.db.dao.DaoManagerFactory.initMemcachedManager(subsystem);

  /**
   * Get the TestParentDelegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static TestParentDelegate getTestParentDelegate() {
    return new TestParentDelegate(subsystem);
  }
  
  /**
   * Get the TestParentDelegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static TestParentDelegate getJndiTestParentDelegate() {
    return new TestParentDelegate(subsystem, JNDI_DBMS);
  }

  /**
   * Get the TestBDelegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static TestBDelegate getTestBDelegate() {
    return new TestBDelegate(subsystem);
  }
  
  /**
   * Get the TestBDelegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static TestBDelegate getJndiTestBDelegate() {
    return new TestBDelegate(subsystem, JNDI_DBMS);
  }

  /**
   * Get the LeafBDelegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static LeafBDelegate getLeafBDelegate() {
    return new LeafBDelegate(subsystem);
  }
  
  /**
   * Get the LeafBDelegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static LeafBDelegate getJndiLeafBDelegate() {
    return new LeafBDelegate(subsystem, JNDI_DBMS);
  }

  /**
   * Get the TestXDelegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static TestXDelegate getTestXDelegate() {
    return new TestXDelegate(subsystem);
  }
  
  /**
   * Get the TestXDelegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static TestXDelegate getJndiTestXDelegate() {
    return new TestXDelegate(subsystem, JNDI_DBMS);
  }

  /**
   * Get the MapDelegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static MapDelegate getMapDelegate() {
    return new MapDelegate(subsystem);
  }
  
  /**
   * Get the MapDelegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static MapDelegate getJndiMapDelegate() {
    return new MapDelegate(subsystem, JNDI_DBMS);
  }

  /**
   * Get the LeafADelegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static LeafADelegate getLeafADelegate() {
    return new LeafADelegate(subsystem);
  }
  
  /**
   * Get the LeafADelegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static LeafADelegate getJndiLeafADelegate() {
    return new LeafADelegate(subsystem, JNDI_DBMS);
  }

  /**
   * Get the TestADelegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static TestADelegate getTestADelegate() {
    return new TestADelegate(subsystem);
  }
  
  /**
   * Get the TestADelegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static TestADelegate getJndiTestADelegate() {
    return new TestADelegate(subsystem, JNDI_DBMS);
  }

  /**
   * Get the TestNaturalKeyDelegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static TestNaturalKeyDelegate getTestNaturalKeyDelegate() {
    return new TestNaturalKeyDelegate(subsystem);
  }
  
  /**
   * Get the TestNaturalKeyDelegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static TestNaturalKeyDelegate getJndiTestNaturalKeyDelegate() {
    return new TestNaturalKeyDelegate(subsystem, JNDI_DBMS);
  }

  /**
   * Get the LeafCDelegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static LeafCDelegate getLeafCDelegate() {
    return new LeafCDelegate(subsystem);
  }
  
  /**
   * Get the LeafCDelegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static LeafCDelegate getJndiLeafCDelegate() {
    return new LeafCDelegate(subsystem, JNDI_DBMS);
  }

  /**
   * Get the PolyDelegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static PolyDelegate getPolyDelegate() {
    return new PolyDelegate(subsystem);
  }
  
  /**
   * Get the PolyDelegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static PolyDelegate getJndiPolyDelegate() {
    return new PolyDelegate(subsystem, JNDI_DBMS);
  }

  /**
   * Get the TestIdentityKeyDelegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static TestIdentityKeyDelegate getTestIdentityKeyDelegate() {
    return new TestIdentityKeyDelegate(subsystem);
  }
  
  /**
   * Get the TestIdentityKeyDelegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static TestIdentityKeyDelegate getJndiTestIdentityKeyDelegate() {
    return new TestIdentityKeyDelegate(subsystem, JNDI_DBMS);
  }

  /**
   * Get the ConcreteMiddleDelegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static ConcreteMiddleDelegate getConcreteMiddleDelegate() {
    return new ConcreteMiddleDelegate(subsystem);
  }
  
  /**
   * Get the ConcreteMiddleDelegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static ConcreteMiddleDelegate getJndiConcreteMiddleDelegate() {
    return new ConcreteMiddleDelegate(subsystem, JNDI_DBMS);
  }

  /**
   * Get the Self4Delegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static Self4Delegate getSelf4Delegate() {
    return new Self4Delegate(subsystem);
  }
  
  /**
   * Get the Self4Delegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static Self4Delegate getJndiSelf4Delegate() {
    return new Self4Delegate(subsystem, JNDI_DBMS);
  }

  /**
   * Get the TestSequenceKeyDelegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static TestSequenceKeyDelegate getTestSequenceKeyDelegate() {
    return new TestSequenceKeyDelegate(subsystem);
  }
  
  /**
   * Get the TestSequenceKeyDelegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static TestSequenceKeyDelegate getJndiTestSequenceKeyDelegate() {
    return new TestSequenceKeyDelegate(subsystem, JNDI_DBMS);
  }

  /**
   * Get the Self2Delegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static Self2Delegate getSelf2Delegate() {
    return new Self2Delegate(subsystem);
  }
  
  /**
   * Get the Self2Delegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static Self2Delegate getJndiSelf2Delegate() {
    return new Self2Delegate(subsystem, JNDI_DBMS);
  }

  /**
   * Get the TestNaturalParentDelegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static TestNaturalParentDelegate getTestNaturalParentDelegate() {
    return new TestNaturalParentDelegate(subsystem);
  }
  
  /**
   * Get the TestNaturalParentDelegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static TestNaturalParentDelegate getJndiTestNaturalParentDelegate() {
    return new TestNaturalParentDelegate(subsystem, JNDI_DBMS);
  }

  /**
   * Get the TestYDelegate. The file Memcached_test.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static TestYDelegate getTestYDelegate() {
    return new TestYDelegate(subsystem);
  }
  
  /**
   * Get the TestYDelegate using the JNDI_DBMS static member initialized
   * from the Memcached_test.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static TestYDelegate getJndiTestYDelegate() {
    return new TestYDelegate(subsystem, JNDI_DBMS);
  }
}