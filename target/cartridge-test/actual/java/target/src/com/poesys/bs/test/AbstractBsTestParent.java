/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package com.poesys.bs.test;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import com.poesys.db.test.ITestParent;
import com.poesys.db.test.TestParentProxy;
import com.poesys.db.test.TestParent;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the TestParent. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsTestParent 
    extends AbstractDto<com.poesys.db.test.ITestParent> {

  /**
   * A List builder helper class for building a business-layer List 
   * of BsTestChild objects from a List children of data-access-layer 
   * com.poesys.db.test.ITestChild objects
   */
  private class BsChildrenListBuilder 
      extends com.poesys.bs.dto.ListBuilder<com.poesys.db.test.ITestChild, com.poesys.bs.test.BsTestChild> {
    @Override
    public com.poesys.bs.test.BsTestChild get(com.poesys.db.test.ITestChild dto) {
      return new com.poesys.bs.test.BsTestChild(dto);
    }
  }

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsTestExplicitKeyChild objects from a Collection explicitChildren of data-access-layer 
   * com.poesys.db.test.ITestExplicitKeyChild objects
   */
  private class BsExplicitChildrenCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.db.test.ITestExplicitKeyChild, com.poesys.bs.test.BsTestExplicitKeyChild> {
    @Override
    public com.poesys.bs.test.BsTestExplicitKeyChild get(com.poesys.db.test.ITestExplicitKeyChild dto) {
      return new com.poesys.bs.test.BsTestExplicitKeyChild(dto);
    }
  }

  /**
   * Create a BsTestParent object from a TestParent object.
   * 
   * @param dto the data-access layer TestParent DTO
   * @throws DelegateException when there is a problem creating the TestParent
   */
  public AbstractBsTestParent(ITestParent dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a TestParent from new data.
   *
   * @param key the primary key of the TestParent
   * @param testParentId primary key attribute
   * @param parentOccupation 
   */
  public AbstractBsTestParent(IPrimaryKey key, java.math.BigInteger testParentId, java.lang.String parentOccupation) {
    super(new TestParentProxy(new TestParent(key, testParentId, parentOccupation)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ITestParent> other = (IDto<ITestParent>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ITestParent> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Primary key attribute
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object TestParent</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger testParentId
   */
  public java.math.BigInteger getTestParentId() {
    return dto.getTestParentId();
  }

  /**
   * 
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestParent</li>
   * </ul>
   * </p>
   * @return a java.lang.String parentOccupation
   */
  public java.lang.String getParentOccupation() {
    return dto.getParentOccupation();
  }

  /**
   * <p>
   * Set the parentOccupation.
   * </p>
   * 
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestParent</li>
   * </ul>
   * </p>
   * @param parentOccupation the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setParentOccupation(java.lang.String parentOccupation) 
      throws com.poesys.db.dto.DtoStatusException {
    dto.setParentOccupation(parentOccupation);
  }

  /**
   * <p>
   * The test child of the test parent
   * </p>
   * <p>
   * Added by AddToManyChildCollectionProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestParent</li>
   * </ul>
   * </p>
   * @return a com.poesys.bs.test.BsTestChild parentOccupation
   */
  public java.util.List<com.poesys.bs.test.BsTestChild> getChildren() {
    BsChildrenListBuilder builder = new BsChildrenListBuilder();
    return builder.getList(dto.getChildren());
  }

  /**
   * <p>
   * The child with an explicit key
   * </p>
   * <p>
   * Added by AddToManyChildCollectionProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestParent</li>
   * </ul>
   * </p>
   * @return a com.poesys.bs.test.BsTestExplicitKeyChild parentOccupation
   */
  public java.util.Collection<com.poesys.bs.test.BsTestExplicitKeyChild> getExplicitChildren() {
    BsExplicitChildrenCollectionBuilder builder = new BsExplicitChildrenCollectionBuilder();
    return builder.getCollection(dto.getExplicitChildren());
  }
}