/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package com.poesys.db.memcached_test;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * Map. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * a map of objects to a genome
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractMapProxy extends AbstractLazyLoadingDtoProxy implements IMap {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  


  /**
   * Read-Object setter for de-serializing nested polys list
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryPoly
   */
  private class ReadPolysSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<com.poesys.db.memcached_test.IPoly> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadPolysSetter object to read the poly list.
     */
    public ReadPolysSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.Poly.class.getName();
    }

    @Override
    protected java.util.List<com.poesys.db.memcached_test.IPoly> getObjectList() {
      java.util.List<com.poesys.db.memcached_test.IPoly> polys =  ((com.poesys.db.memcached_test.Map)dto).getPolys();
      return polys;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.memcached_test.Map)dto).polyKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.IPoly> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryPoly();
    }

    @Override
    protected void set(java.util.List<com.poesys.db.memcached_test.IPoly> list) {
      ((com.poesys.db.memcached_test.Map)dto).polys = list;
    }
  }

  /**
   * Add a com.poesys.db.memcached_test.IPoly object to the Polys collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @param object the com.poesys.db.memcached_test.IPoly object to add to the collection
   */
  public void addPolysPoly(com.poesys.db.memcached_test.IPoly object) {
    ((Map)dto).addPolysPoly(object);
  }



  /**
   * Read-Object setter for de-serializing nested mapElement collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryMapElement
   */
  private class ReadMapElementSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.memcached_test.IMapElement> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadMapElementSetter object to read the mapElement collection.
     */
    public ReadMapElementSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.MapElement.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.IMapElement> getObjectCollection() {
      java.util.Collection<com.poesys.db.memcached_test.IMapElement> mapElement =  ((com.poesys.db.memcached_test.Map)dto).getMapElement();
      return mapElement;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.memcached_test.Map)dto).mapElementKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.IMapElement> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryMapElement();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.IMapElement> collection) {
      ((com.poesys.db.memcached_test.Map)dto).mapElement = collection;
    }
  }


  /**
   * Add a com.poesys.db.memcached_test.IMapElement object to the MapElement collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @param object the com.poesys.db.memcached_test.IMapElement object to add to the collection
   */
  public void addMapElementMapElement(com.poesys.db.memcached_test.IMapElement object) {
    ((Map)dto).addMapElementMapElement(object);
  }

  /**
   * Create a MapProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractMapProxy(Map dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadPolysSetter());
    readObjectSetters.add(new ReadMapElementSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractMapProxy otherProxy = (AbstractMapProxy)obj;
    return ((Map)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((Map)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getMapId() {
    return ((Map)dto).getMapId();
  }

  /**
   * Get an object of java.lang.Long
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.Long
   */
  public java.lang.Long getLocation() {
    return ((Map)dto).getLocation();
  }

  public void setLocation(java.lang.Long location)
      throws com.poesys.db.InvalidParametersException {
    ((Map)dto).setLocation(location);
  }

  /**
   * Get a list of com.poesys.db.memcached_test.IPoly
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.List<com.poesys.db.memcached_test.IPoly>
   */
  public java.util.List<com.poesys.db.memcached_test.IPoly> getPolys() {
    return ((Map)dto).getPolys();
  }

  public void setPoly(java.util.List<com.poesys.db.memcached_test.IPoly> polys)
      {
    ((Map)dto).setPoly(polys);
  }

  /**
   * Get a collection of com.poesys.db.memcached_test.IMapElement
   *
   * Source: AddAssociationClassCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.IMapElement>
   */
  public java.util.Collection<com.poesys.db.memcached_test.IMapElement> getMapElement() {
    return ((Map)dto).getMapElement();
  }

  public void setMapElement(java.util.Collection<com.poesys.db.memcached_test.IMapElement> mapElement)
      throws com.poesys.db.InvalidParametersException {
    ((Map)dto).setMapElement(mapElement);
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((Map)dto).markChildrenDeleted();
  }
}