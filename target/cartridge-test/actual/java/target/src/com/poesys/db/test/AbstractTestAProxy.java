/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package com.poesys.db.test;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * TestA. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTestAProxy extends AbstractLazyLoadingDtoProxy implements ITestA {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  


  /**
   * Read-Object setter for de-serializing nested bs list
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryTestB
   */
  private class ReadBsSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<com.poesys.db.test.ITestB> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadBsSetter object to read the bs list.
     */
    public ReadBsSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestB.class.getName();
    }

    @Override
    protected java.util.List<com.poesys.db.test.ITestB> getObjectList() {
      java.util.List<com.poesys.db.test.ITestB> bs =  ((com.poesys.db.test.TestA)dto).getBs();
      return bs;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.test.TestA)dto).bsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ITestB> getSql() {
      return new com.poesys.db.test.sql.QueryTestB();
    }

    @Override
    protected void set(java.util.List<com.poesys.db.test.ITestB> list) {
      ((com.poesys.db.test.TestA)dto).bs = list;
    }
  }
  /**
   * Create a TestAProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractTestAProxy(TestA dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadBsSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractTestAProxy otherProxy = (AbstractTestAProxy)obj;
    return ((TestA)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((TestA)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getTestAId() {
    return ((TestA)dto).getTestAId();
  }

  /**
   * Get a list of com.poesys.db.test.ITestB
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.List<com.poesys.db.test.ITestB>
   */
  public java.util.List<com.poesys.db.test.ITestB> getBs() {
    return ((TestA)dto).getBs();
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((TestA)dto).markChildrenDeleted();
  }
}