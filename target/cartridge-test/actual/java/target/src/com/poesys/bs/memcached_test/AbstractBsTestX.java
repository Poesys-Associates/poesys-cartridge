/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package com.poesys.bs.memcached_test;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import com.poesys.db.memcached_test.ITestX;
import com.poesys.db.memcached_test.TestXProxy;
import com.poesys.db.memcached_test.TestX;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the TestX. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The TestX object is the "this" side of a many-to-many association.
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsTestX 
    extends AbstractDto<com.poesys.db.memcached_test.ITestX> {

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsTestY objects from a Collection ys of data-access-layer 
   * com.poesys.db.memcached_test.ITestY objects
   */
  private class BsYsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.db.memcached_test.ITestY, com.poesys.bs.memcached_test.BsTestY> {
    @Override
    public com.poesys.bs.memcached_test.BsTestY get(com.poesys.db.memcached_test.ITestY dto) {
      return new com.poesys.bs.memcached_test.BsTestY(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of TestY objects from an input Collection ys of 
   * business-layer BsTestY objects
   */
  private class YsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.bs.memcached_test.BsTestY, com.poesys.db.memcached_test.ITestY> {
    @Override
    public com.poesys.db.memcached_test.ITestY get(com.poesys.bs.memcached_test.BsTestY dto) {
      return dto.toDto();
    }
  }

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsTestZ objects from a Collection zs of data-access-layer 
   * com.poesys.db.memcached_test.ITestZ objects
   */
  private class BsZsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.db.memcached_test.ITestZ, com.poesys.bs.memcached_test.BsTestZ> {
    @Override
    public com.poesys.bs.memcached_test.BsTestZ get(com.poesys.db.memcached_test.ITestZ dto) {
      return new com.poesys.bs.memcached_test.BsTestZ(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of TestZ objects from an input Collection zs of 
   * business-layer BsTestZ objects
   */
  private class ZsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.bs.memcached_test.BsTestZ, com.poesys.db.memcached_test.ITestZ> {
    @Override
    public com.poesys.db.memcached_test.ITestZ get(com.poesys.bs.memcached_test.BsTestZ dto) {
      return dto.toDto();
    }
  }

  /**
   * Create a BsTestX object from a TestX object.
   * 
   * @param dto the data-access layer TestX DTO
   * @throws DelegateException when there is a problem creating the TestX
   */
  public AbstractBsTestX(ITestX dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a TestX from new data.
   *
   * @param key the primary key of the TestX
   * @param testXId primary key attribute
   * @param xAttr 
   */
  public AbstractBsTestX(IPrimaryKey key, java.math.BigInteger testXId, java.lang.String xAttr) {
    super(new TestXProxy(new TestX(key, testXId, xAttr)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ITestX> other = (IDto<ITestX>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ITestX> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Primary key attribute
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object TestX</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger testXId
   */
  public java.math.BigInteger getTestXId() {
    return dto.getTestXId();
  }

  /**
   * 
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestX</li>
   * </ul>
   * </p>
   * @return a java.lang.String xAttr
   */
  public java.lang.String getXAttr() {
    return dto.getXAttr();
  }

  /**
   * <p>
   * Set the xAttr.
   * </p>
   * 
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestX</li>
   * </ul>
   * </p>
   * @param xAttr the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setXAttr(java.lang.String xAttr) 
      throws com.poesys.db.dto.DtoStatusException {
    dto.setXAttr(xAttr);
  }

  /**
   * 
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties as data member
   * </p>
   * <p>
   * This property loads lazily on demand the first time you call this method,
   * not when you instantiate the BsTestX object.
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestX</li>
   * </ul>
   * </p>
   * @return a com.poesys.bs.memcached_test.BsTestY xAttr
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public java.util.Collection<com.poesys.bs.memcached_test.BsTestY> getYs() throws java.sql.SQLException {
    BsYsCollectionBuilder builder = new BsYsCollectionBuilder();
    return builder.getCollection(dto.getYs());
  }

  /**
   * <p>
   * Set the y.
   * </p>
   * 
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestX</li>
   * </ul>
   * </p>
   * @param xAttr the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setY(java.util.Collection<com.poesys.bs.memcached_test.BsTestY> xAttr) 
      throws com.poesys.db.dto.DtoStatusException{
    YsCollectionBuilder builder = new YsCollectionBuilder();
      dto.setY(builder.getCollection(xAttr));
  }

  /**
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   * <p>
   * Added by AddAssociationClassCollectionProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestX</li>
   * </ul>
   * </p>
   * @return a com.poesys.bs.memcached_test.BsTestZ xAttr
   */
  public java.util.Collection<com.poesys.bs.memcached_test.BsTestZ> getZs() {
    BsZsCollectionBuilder builder = new BsZsCollectionBuilder();
    return builder.getCollection(dto.getZs());
  }

  /**
   * <p>
   * Set the zs.
   * </p>
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   * <p>
   * Added by AddAssociationClassCollectionProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestX</li>
   * </ul>
   * </p>
   * @param xAttr the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter xAttr is null
   */
  public void setZs(java.util.Collection<com.poesys.bs.memcached_test.BsTestZ> xAttr) 
      throws com.poesys.db.dto.DtoStatusException, com.poesys.db.InvalidParametersException {
    ZsCollectionBuilder builder = new ZsCollectionBuilder();
      dto.setZs(builder.getCollection(xAttr));
  }

  /**
   * Add a TestY object to the ys collection.
   *
   * @param object the object to add to the collection
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public void addYsTestY(com.poesys.bs.memcached_test.BsTestY object) throws java.sql.SQLException {
    dto.addYsTestY(object.toDto());
  }

  /**
   * Add a TestZ object to the zs collection.
   *
   * @param object the object to add to the collection
   */
  public void addZsTestZ(com.poesys.bs.memcached_test.BsTestZ object) {
    dto.addZsTestZ(object.toDto());
  }
}