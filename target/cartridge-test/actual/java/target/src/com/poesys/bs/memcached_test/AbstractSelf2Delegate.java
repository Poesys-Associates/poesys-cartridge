/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDelegate.vsl

package com.poesys.bs.memcached_test;


import com.poesys.bs.delegate.AbstractDataDelegate;
import com.poesys.bs.delegate.DelegateException;
import com.poesys.db.connection.IConnectionFactory.DBMS;
import com.poesys.db.dao.insert.IInsertSql;
import com.poesys.db.dao.update.IUpdateSql;
import com.poesys.db.dao.delete.IDeleteSql;
import com.poesys.db.dao.query.IKeyQuerySql;
import com.poesys.db.dao.query.IQuerySql;


/**
 * <p>
 * A business delegate that provides an application programming interface for
 * Self2 objects and their dependents. You should not modify this class;
 * instead, override or add methods in the class Self2Delegate, which
 * specializes this class.
 * </p>
 * 
 * @see Self2Delegate
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractSelf2Delegate
    extends AbstractDataDelegate<BsSelf2, com.poesys.db.memcached_test.ISelf2, com.poesys.db.pk.SequencePrimaryKey> {
  /**
   * Create an AbstractSelf2Delegate object by supplying the database
   * subsystem in the database.properties file.
   * 
   * @param subsystem the database subsystem to use in database.properties
   */
  public AbstractSelf2Delegate(String subsystem) {
    super(subsystem, 2147483647);
  }

  /**
   * Create an AbstractSelf2Delegate object by supplying the database
   * subsystem in the database.properties file and a specific DBMS, usually
   * IConnectionFactory.DBMS.JNDI.
   * 
   * @param subsystem the database subsystem to use in database.properties
   * @param dbms the DBMS to use (usually IConnectionFactory.DBMS.JNDI)
   */
  public AbstractSelf2Delegate(String subsystem, DBMS dbms) {
    super(subsystem, dbms, 2147483647);
  }

  @Override
  protected String getClassName() {
    return com.poesys.db.memcached_test.Self2.class.getName();
  }

  @Override
  protected IInsertSql<com.poesys.db.memcached_test.ISelf2> getInsertSql() {
    return new com.poesys.db.memcached_test.sql.InsertSelf2();
  }

  @Override
  protected IDeleteSql<com.poesys.db.memcached_test.ISelf2> getDeleteSql() {
    return new com.poesys.db.memcached_test.sql.DeleteSelf2();
  }

  @Override
  protected IUpdateSql<com.poesys.db.memcached_test.ISelf2> getUpdateSql() {
    return null;
  }

  @Override
  protected IKeyQuerySql<com.poesys.db.memcached_test.ISelf2> getQueryByKeySql() {
    return new com.poesys.db.memcached_test.sql.QuerySelf2();
  }

  @Override
  protected IQuerySql<com.poesys.db.memcached_test.ISelf2> getQueryListSql() {
    // Query-All method not required
    return new com.poesys.db.memcached_test.sql.QueryAllSelf2();
  }

  @Override
  protected com.poesys.bs.memcached_test.BsSelf2 wrapData(com.poesys.db.memcached_test.ISelf2 dto) {
    return new com.poesys.bs.memcached_test.BsSelf2(dto);
  }

  /**
   * <p>
   * Create a new Self2 with data fields.
   * </p>
   * <p>
   * The Self2 class has a sequence key; this method generates the
   * sequence for later insertion into the database.
   * </p>
   * 
   * @param self2Id primary key attribute
   * @return the new Self2 object
   * @throws DelegateException when there is a problem generating the key or
   *             creating the object
   */
  public com.poesys.bs.memcached_test.BsSelf2 createSelf2(java.math.BigInteger self2Id)
      throws DelegateException {
      com.poesys.db.pk.SequencePrimaryKey key = null;

    // Generate a new Self2 id if the input key is null.
    if (self2Id == null) {
      java.sql.Connection connection = null;
      try {
        connection = getConnection();
        if (connection == null) {
          throw new DelegateException("Could not get database connection to generate sequence");
        }
        
        if (dbms.equals(DBMS.MYSQL) || dbms.equals(DBMS.JNDI_MYSQL)) {
          key =
            com.poesys.db.pk.PrimaryKeyFactory.createMySqlSequenceKey(connection,
                                                                      "Self2",
                                                                      "self2Id",
                                                                      "com.poesys.db.memcached_test.Self2");
        } else if (dbms.equals(DBMS.ORACLE) || dbms.equals(DBMS.JNDI_ORACLE)) {
          // Create key with sequence Self2
          key =
            com.poesys.db.pk.PrimaryKeyFactory.createOracleSequenceKey(connection,
                                                                       "Self2",
                                                                       "self2Id",
                                                                       "com.poesys.db.memcached_test.Self2");
        } else {
          throw new DelegateException("com.poesys.bs.delegate.msg.noDbms");
        }
        // Get the sequence number for use as an attribute value.
        self2Id = key.getValue();
      } catch (com.poesys.db.InvalidParametersException e) {
        Object[] args = e.getParameters().toArray();
        String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
        throw new DelegateException(message, e);
      } catch (com.poesys.db.NoPrimaryKeyException e) {
        Object[] args = e.getParameters().toArray();
        String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
        throw new DelegateException(message, e);
      } catch (java.sql.SQLException e) {
        throw new DelegateException(e.getMessage(), e);
      } finally {
        // Done with this connection, close it and return it to the pool.
        if (connection != null) {
          try {
            connection.close();
          } catch (java.sql.SQLException e) {
            throw new DelegateException(e.getMessage(), e);
          }
        }
      }
    } else {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("self2Id", self2Id, "com.poesys.db.memcached_test.Self2");
    }

    // Create a data-access DTO for direct access, no proxy required.
    com.poesys.db.memcached_test.ISelf2 dto =
      new com.poesys.db.memcached_test.Self2(key, self2Id);

    // Create the business DTO.
    return new com.poesys.bs.memcached_test.BsSelf2(dto);
  }

  /**
   * Create a new Self2Self association class child of Self2 with 
   * an association key. This class links the input objects.
   * 
   * @param children2Object associated Self2 object (part of the key)
   * @param parents2Object associated Self2 object (part of the key)
   * @param children2Self2Id Attribute that is part of the association key
   * @param parents2Self2Id Attribute that is part of the association key
   * @return a new Self2Self business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public com.poesys.bs.memcached_test.BsSelf2Self createSelf2Self(com.poesys.bs.memcached_test.BsSelf2 children2Object, com.poesys.bs.memcached_test.BsSelf2 parents2Object, java.math.BigInteger children2Self2Id, java.math.BigInteger parents2Self2Id) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.AssociationPrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.pk.IPrimaryKey> list =
        new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
      list.add(children2Object.getPrimaryKey());
      list.add(parents2Object.getPrimaryKey());
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "com.poesys.db.memcached_test.Self2Self");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create an association-key child data-access Self2Self DTO for direct access, no proxy required.
    com.poesys.db.memcached_test.ISelf2Self dto =
      new com.poesys.db.memcached_test.Self2Self(key, children2Object.toDto(), parents2Object.toDto(), children2Self2Id, parents2Self2Id);

    // Create the business DTO.
    return new com.poesys.bs.memcached_test.BsSelf2Self(dto);
  }

  @Override
  public void truncateTable(String tableName) throws DelegateException {
    java.sql.Connection c = getConnection();
    com.poesys.db.dao.ddl.ISql sql = null;
    com.poesys.db.dao.ddl.IExecuteSql executive = null;

    // First truncate any child tables.
    sql = new com.poesys.db.dao.ddl.TruncateTableSql("Self2Self");
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "Self2Self", e);
    }

    // Now truncate the current table.
    sql = new com.poesys.db.dao.ddl.TruncateTableSql(tableName);
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "Self2", e);
    }
  }
}
