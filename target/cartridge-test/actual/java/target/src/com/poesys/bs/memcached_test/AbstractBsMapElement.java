/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package com.poesys.bs.memcached_test;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import com.poesys.db.memcached_test.IMapElement;
import com.poesys.db.memcached_test.MapElementProxy;
import com.poesys.db.memcached_test.MapElement;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the MapElement. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A polymorphism mapped to a genome map
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsMapElement 
    extends AbstractDto<com.poesys.db.memcached_test.IMapElement> {

  /**
   * Create a BsMapElement object from a MapElement object.
   * 
   * @param dto the data-access layer MapElement DTO
   * @throws DelegateException when there is a problem creating the MapElement
   */
  public AbstractBsMapElement(IMapElement dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a MapElement from new data.
   *
   * @param key the primary key of the MapElement
   * @param mapsObject associated Map object
   * @param polysObject associated Poly object
   * @param tairObjectId primary key attribute
   * @param mapId Attribute that is part of the key of an associated object (not part of primary key of association)
   * @param polyId Attribute that is part of the key of an associated object (not part of primary key of association)
   * @param version 
   * @param elementType 
   */
  public AbstractBsMapElement(IPrimaryKey key, com.poesys.db.memcached_test.IMap mapsObject, com.poesys.db.memcached_test.IPoly polysObject, java.math.BigInteger tairObjectId, java.math.BigInteger mapId, java.math.BigInteger polyId, java.lang.Integer version, java.lang.String elementType) {
    super(new MapElementProxy(new MapElement(key, mapsObject, polysObject, tairObjectId, mapId, polyId, version, elementType)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<IMapElement> other = (IDto<IMapElement>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<IMapElement> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Inherited properties

  /**
   * <p>
   * Primary key attribute
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties + AddInheritedKeyProperties through inheritance
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is inherited from a superclass</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger tairObjectId
   */

  public java.math.BigInteger getTairObjectId() {
    return dto.getTairObjectId();
  }
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not true
// Read/Write property: false

  /**
   * 
   * <p>
   * Added by TransformToProperty + AddInheritedAttributeProperties through inheritance
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is inherited from a superclass</li>
   * </ul>
   * </p>
   * @return a java.lang.Integer version
   */

  public java.lang.Integer getVersion() {
    return dto.getVersion();
  }
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the version.
   * </p>
   * 
   * <p>
   * Added by TransformToProperty + AddInheritedAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is inherited from a superclass</li>
   * </ul>
   * </p>
   * @param version the value to set into the object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter version is null
   */
  public void setVersion(java.lang.Integer version) 
      throws com.poesys.db.dto.DtoStatusException, com.poesys.db.InvalidParametersException {
    dto.setVersion(version);
  }

  // Data member properties

  /**
   * 
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object MapElement</li>
   * </ul>
   * </p>
   * @return a java.lang.String elementType
   */
  public java.lang.String getElementType() {
    return dto.getElementType();
  }

  /**
   * <p>
   * Set the elementType.
   * </p>
   * 
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object MapElement</li>
   * </ul>
   * </p>
   * @param elementType the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setElementType(java.lang.String elementType) 
      throws com.poesys.db.dto.DtoStatusException {
    dto.setElementType(elementType);
  }

  /**
   * <p>
   * Associated object
   * </p>
   * <p>
   * Added by AddAssociationObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object MapElement</li>
   * </ul>
   * </p>
   * @return a com.poesys.bs.memcached_test.BsMap map
   */
  public com.poesys.bs.memcached_test.BsMap getMap() {
    // Return 4
    return new com.poesys.bs.memcached_test.BsMap(dto.getMap());
  }

  /**
   * <p>
   * Associated object
   * </p>
   * <p>
   * Added by AddAssociationObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object MapElement</li>
   * </ul>
   * </p>
   * @return a com.poesys.bs.memcached_test.BsPoly poly
   */
  public com.poesys.bs.memcached_test.BsPoly getPoly() {
    // Return 4
    return new com.poesys.bs.memcached_test.BsPoly(dto.getPoly());
  }

  /**
   * <p>
   * Attribute from key of associated object (not part of primary key of association)
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties + AddAssociationAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object MapElement</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger mapId
   */
  public java.math.BigInteger getMapId() {
    return dto.getMapId();
  }

  /**
   * <p>
   * Attribute from key of associated object (not part of primary key of association)
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties + AddAssociationAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object MapElement</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger polyId
   */
  public java.math.BigInteger getPolyId() {
    return dto.getPolyId();
  }
}