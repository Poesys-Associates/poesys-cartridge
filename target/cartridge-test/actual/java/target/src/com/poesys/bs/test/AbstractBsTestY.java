/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package com.poesys.bs.test;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import com.poesys.db.test.ITestY;
import com.poesys.db.test.TestYProxy;
import com.poesys.db.test.TestY;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the TestY. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The TestY object is the "other" side of a many-to-many association.
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsTestY 
    extends AbstractDto<com.poesys.db.test.ITestY> {

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsTestX objects from a Collection xs of data-access-layer 
   * com.poesys.db.test.ITestX objects
   */
  private class BsXsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.db.test.ITestX, com.poesys.bs.test.BsTestX> {
    @Override
    public com.poesys.bs.test.BsTestX get(com.poesys.db.test.ITestX dto) {
      return new com.poesys.bs.test.BsTestX(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of TestX objects from an input Collection xs of 
   * business-layer BsTestX objects
   */
  private class XsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.bs.test.BsTestX, com.poesys.db.test.ITestX> {
    @Override
    public com.poesys.db.test.ITestX get(com.poesys.bs.test.BsTestX dto) {
      return dto.toDto();
    }
  }

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsTestZ objects from a Collection zs of data-access-layer 
   * com.poesys.db.test.ITestZ objects
   */
  private class BsZsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.db.test.ITestZ, com.poesys.bs.test.BsTestZ> {
    @Override
    public com.poesys.bs.test.BsTestZ get(com.poesys.db.test.ITestZ dto) {
      return new com.poesys.bs.test.BsTestZ(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of TestZ objects from an input Collection zs of 
   * business-layer BsTestZ objects
   */
  private class ZsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.bs.test.BsTestZ, com.poesys.db.test.ITestZ> {
    @Override
    public com.poesys.db.test.ITestZ get(com.poesys.bs.test.BsTestZ dto) {
      return dto.toDto();
    }
  }

  /**
   * Create a BsTestY object from a TestY object.
   * 
   * @param dto the data-access layer TestY DTO
   * @throws DelegateException when there is a problem creating the TestY
   */
  public AbstractBsTestY(ITestY dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a TestY from new data.
   *
   * @param key the primary key of the TestY
   * @param testYId primary key attribute
   * @param yAttr 
   */
  public AbstractBsTestY(IPrimaryKey key, java.math.BigInteger testYId, java.lang.String yAttr) {
    super(new TestYProxy(new TestY(key, testYId, yAttr)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ITestY> other = (IDto<ITestY>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ITestY> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Primary key attribute
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object TestY</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger testYId
   */
  public java.math.BigInteger getTestYId() {
    return dto.getTestYId();
  }

  /**
   * 
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestY</li>
   * </ul>
   * </p>
   * @return a java.lang.String yAttr
   */
  public java.lang.String getYAttr() {
    return dto.getYAttr();
  }

  /**
   * <p>
   * Set the yAttr.
   * </p>
   * 
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestY</li>
   * </ul>
   * </p>
   * @param yAttr the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setYAttr(java.lang.String yAttr) 
      throws com.poesys.db.dto.DtoStatusException {
    dto.setYAttr(yAttr);
  }

  /**
   * 
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestY</li>
   * </ul>
   * </p>
   * @return a com.poesys.bs.test.BsTestX yAttr
   */
  public java.util.Collection<com.poesys.bs.test.BsTestX> getXs() {
    BsXsCollectionBuilder builder = new BsXsCollectionBuilder();
    return builder.getCollection(dto.getXs());
  }

  /**
   * <p>
   * Set the x.
   * </p>
   * 
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestY</li>
   * </ul>
   * </p>
   * @param yAttr the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setX(java.util.Collection<com.poesys.bs.test.BsTestX> yAttr) 
      throws com.poesys.db.dto.DtoStatusException{
    XsCollectionBuilder builder = new XsCollectionBuilder();
      dto.setX(builder.getCollection(yAttr));
  }

  /**
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   * <p>
   * Added by AddAssociationClassCollectionProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestY</li>
   * </ul>
   * </p>
   * @return a com.poesys.bs.test.BsTestZ yAttr
   */
  public java.util.Collection<com.poesys.bs.test.BsTestZ> getZs() {
    BsZsCollectionBuilder builder = new BsZsCollectionBuilder();
    return builder.getCollection(dto.getZs());
  }

  /**
   * <p>
   * Set the zs.
   * </p>
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   * <p>
   * Added by AddAssociationClassCollectionProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestY</li>
   * </ul>
   * </p>
   * @param yAttr the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter yAttr is null
   */
  public void setZs(java.util.Collection<com.poesys.bs.test.BsTestZ> yAttr) 
      throws com.poesys.db.dto.DtoStatusException, com.poesys.db.InvalidParametersException {
    ZsCollectionBuilder builder = new ZsCollectionBuilder();
      dto.setZs(builder.getCollection(yAttr));
  }

  /**
   * Add a TestX object to the xs collection.
   *
   * @param object the object to add to the collection
   */
  public void addXsTestX(com.poesys.bs.test.BsTestX object) {
    dto.addXsTestX(object.toDto());
  }

  /**
   * Add a TestZ object to the zs collection.
   *
   * @param object the object to add to the collection
   */
  public void addZsTestZ(com.poesys.bs.test.BsTestZ object) {
    dto.addZsTestZ(object.toDto());
  }
}