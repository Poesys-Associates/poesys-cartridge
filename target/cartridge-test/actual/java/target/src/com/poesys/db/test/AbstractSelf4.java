/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.db.test;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the Self4. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Immutable</li>
 *     <li>NaturalKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractSelf4 extends AbstractDto implements ISelf4 {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested parent4
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryParents4BySelf4
   */
  private class QueryParents4Setter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.test.ISelf4, ISelf4, java.util.Collection<com.poesys.db.test.ISelf4>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryParents4Setter object.
     */
    public QueryParents4Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self4.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ISelf4 getParametersDto() {
      return AbstractSelf4.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.test.ISelf4, ISelf4> getSql() {
      return new com.poesys.db.test.sql.QueryParents4BySelf4();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ISelf4> list) {
      // No status change; this is just filling in the object data.
      parents4 = list;
      // Add the primary keys to the serialized key list if there are any.
      if (parents4 != null) {
        for (com.poesys.db.dto.IDbDto object : parents4) {
          parent4Keys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated parents4 list is not null
      return parents4 != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested parents4 collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QuerySelf4
   */
  private class ReadParents4Setter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ISelf4> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadParents4Setter object to read the parents4 collection.
     */
    public ReadParents4Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self4.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ISelf4> getObjectCollection() {
      return parents4;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return parent4Keys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ISelf4> getSql() {
      return new com.poesys.db.test.sql.QuerySelf4();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ISelf4> collection) {
     parents4 = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association parent4.
   *
   * @see com.poesys.db.test.sql.InsertSelf4
   */
  private class InsertParents4Setter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association parents4 source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertParents4Setter object.
     */
    public InsertParents4Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self4.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = parents4;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added parent4, updated parent4, and 
   * deleted parent4. 
   */
   
  /**
   * Query setter for querying nested child4
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryChildren4BySelf4
   */
  private class QueryChildren4Setter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.test.ISelf4, ISelf4, java.util.Collection<com.poesys.db.test.ISelf4>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryChildren4Setter object.
     */
    public QueryChildren4Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self4.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ISelf4 getParametersDto() {
      return AbstractSelf4.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.test.ISelf4, ISelf4> getSql() {
      return new com.poesys.db.test.sql.QueryChildren4BySelf4();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ISelf4> list) {
      // No status change; this is just filling in the object data.
      children4 = list;
      // Add the primary keys to the serialized key list if there are any.
      if (children4 != null) {
        for (com.poesys.db.dto.IDbDto object : children4) {
          child4Keys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated children4 list is not null
      return children4 != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested children4 collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QuerySelf4
   */
  private class ReadChildren4Setter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ISelf4> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadChildren4Setter object to read the children4 collection.
     */
    public ReadChildren4Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self4.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ISelf4> getObjectCollection() {
      return children4;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return child4Keys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ISelf4> getSql() {
      return new com.poesys.db.test.sql.QuerySelf4();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ISelf4> collection) {
     children4 = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association child4.
   *
   * @see com.poesys.db.test.sql.InsertSelf4
   */
  private class InsertChildren4Setter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association children4 source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertChildren4Setter object.
     */
    public InsertChildren4Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self4.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = children4;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added child4, updated child4, and 
   * deleted child4. 
   */
   
  /**
   * Query setter for querying nested parents4Self4SelfLinks
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryParents4Self4SelfLinksBySelf4
   */
  private class QueryParents4Self4SelfLinksSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.test.ISelf4Self, ISelf4, java.util.Collection<com.poesys.db.test.ISelf4Self>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryParents4Self4SelfLinksSetter object.
     */
    public QueryParents4Self4SelfLinksSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self4Self.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ISelf4 getParametersDto() {
      return AbstractSelf4.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.test.ISelf4Self, ISelf4> getSql() {
      return new com.poesys.db.test.sql.QueryParents4Self4SelfLinksBySelf4();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ISelf4Self> list) {
      // No status change; this is just filling in the object data.
      parents4Self4SelfLinks = list;
      // Add the primary keys to the serialized key list if there are any.
      if (parents4Self4SelfLinks != null) {
        for (com.poesys.db.dto.IDbDto object : parents4Self4SelfLinks) {
          parents4Self4SelfLinksKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated parents4Self4SelfLinks list is not null
      return parents4Self4SelfLinks != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested parents4Self4SelfLinks collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.test.sql.QuerySelf4Self
   */
  private class ReadParents4Self4SelfLinksSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ISelf4Self> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadParents4Self4SelfLinksSetter object to read the parents4Self4SelfLinks collection.
     */
    public ReadParents4Self4SelfLinksSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self4Self.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ISelf4Self> getObjectCollection() {
      return parents4Self4SelfLinks;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return parents4Self4SelfLinksKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ISelf4Self> getSql() {
      return new com.poesys.db.test.sql.QuerySelf4Self();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ISelf4Self> collection) {
     parents4Self4SelfLinks = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association parents4Self4SelfLinks.
   *
   * @see com.poesys.db.test.sql.InsertSelf4Self
   */
  private class InsertParents4Self4SelfLinksSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association parents4Self4SelfLinks source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertParents4Self4SelfLinksSetter object.
     */
    public InsertParents4Self4SelfLinksSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self4Self.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = parents4Self4SelfLinks;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added parents4Self4SelfLinks and updated parents4Self4SelfLinks.
   * Deleted parents4Self4SelfLinks are deleted in the database cascade delete.
   */
   
  /**
   * Query setter for querying nested children4Self4SelfLinks
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryChildren4Self4SelfLinksBySelf4
   */
  private class QueryChildren4Self4SelfLinksSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.test.ISelf4Self, ISelf4, java.util.Collection<com.poesys.db.test.ISelf4Self>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryChildren4Self4SelfLinksSetter object.
     */
    public QueryChildren4Self4SelfLinksSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self4Self.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ISelf4 getParametersDto() {
      return AbstractSelf4.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.test.ISelf4Self, ISelf4> getSql() {
      return new com.poesys.db.test.sql.QueryChildren4Self4SelfLinksBySelf4();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ISelf4Self> list) {
      // No status change; this is just filling in the object data.
      children4Self4SelfLinks = list;
      // Add the primary keys to the serialized key list if there are any.
      if (children4Self4SelfLinks != null) {
        for (com.poesys.db.dto.IDbDto object : children4Self4SelfLinks) {
          children4Self4SelfLinksKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated children4Self4SelfLinks list is not null
      return children4Self4SelfLinks != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested children4Self4SelfLinks collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.test.sql.QuerySelf4Self
   */
  private class ReadChildren4Self4SelfLinksSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ISelf4Self> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadChildren4Self4SelfLinksSetter object to read the children4Self4SelfLinks collection.
     */
    public ReadChildren4Self4SelfLinksSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self4Self.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ISelf4Self> getObjectCollection() {
      return children4Self4SelfLinks;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return children4Self4SelfLinksKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ISelf4Self> getSql() {
      return new com.poesys.db.test.sql.QuerySelf4Self();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ISelf4Self> collection) {
     children4Self4SelfLinks = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association children4Self4SelfLinks.
   *
   * @see com.poesys.db.test.sql.InsertSelf4Self
   */
  private class InsertChildren4Self4SelfLinksSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association children4Self4SelfLinks source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertChildren4Self4SelfLinksSetter object.
     */
    public InsertChildren4Self4SelfLinksSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self4Self.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = children4Self4SelfLinks;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added children4Self4SelfLinks and updated children4Self4SelfLinks.
   * Deleted children4Self4SelfLinks are deleted in the database cascade delete.
   */
   
  /**
   * Create an empty Self4 for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractSelf4() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the parents4 property.
    querySetters.add(new QueryParents4Setter());
    readObjectSetters.add(new ReadParents4Setter());
    insertSetters.add(new InsertParents4Setter());
    
    // Add the many-to-many collection setters for the children4 property.
    querySetters.add(new QueryChildren4Setter());
    readObjectSetters.add(new ReadChildren4Setter());
    insertSetters.add(new InsertChildren4Setter());
    
    // Add the many-to-many collection setters for the parents4Self4SelfLinks property.
    querySetters.add(new QueryParents4Self4SelfLinksSetter());
    readObjectSetters.add(new ReadParents4Self4SelfLinksSetter());
    insertSetters.add(new InsertParents4Self4SelfLinksSetter());
    
    // Add the many-to-many collection setters for the children4Self4SelfLinks property.
    querySetters.add(new QueryChildren4Self4SelfLinksSetter());
    readObjectSetters.add(new ReadChildren4Self4SelfLinksSetter());
    insertSetters.add(new InsertChildren4Self4SelfLinksSetter());
  }

  /**
   * Create a Self4. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Self4
   * @param key1 
   * @param key2 
   */
  public AbstractSelf4(IPrimaryKey key, java.lang.Long key1, java.lang.Long key2) {
    this.key = key;

    this.key1 = key1;

    if (key1 == null) {
      throw new com.poesys.db.InvalidParametersException("key1 is required for " + key.getValueList());
    }
    
    this.key2 = key2;

    if (key2 == null) {
      throw new com.poesys.db.InvalidParametersException("key2 is required for " + key.getValueList());
    }
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the parent4 property.
    querySetters.add(new QueryParents4Setter());
    readObjectSetters.add(new ReadParents4Setter());
    insertSetters.add(new InsertParents4Setter());
    
    // Add the many-to-many collection setters for the child4 property.
    querySetters.add(new QueryChildren4Setter());
    readObjectSetters.add(new ReadChildren4Setter());
    insertSetters.add(new InsertChildren4Setter());
    
    // Add the many-to-many collection setters for the parents4Self4SelfLinks property.
    querySetters.add(new QueryParents4Self4SelfLinksSetter());
    readObjectSetters.add(new ReadParents4Self4SelfLinksSetter());
    insertSetters.add(new InsertParents4Self4SelfLinksSetter());
    
    // Add the many-to-many collection setters for the children4Self4SelfLinks property.
    querySetters.add(new QueryChildren4Self4SelfLinksSetter());
    readObjectSetters.add(new ReadChildren4Self4SelfLinksSetter());
    insertSetters.add(new InsertChildren4Self4SelfLinksSetter());
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractSelf4 other = (AbstractSelf4)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractSelf4 other = (AbstractSelf4)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.db.test";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (parents4Self4SelfLinks != null) {
      for (com.poesys.db.dto.IDbDto dto : parents4Self4SelfLinks) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (children4Self4SelfLinks != null) {
      for (com.poesys.db.dto.IDbDto dto : children4Self4SelfLinks) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("com.poesys.db.test");
    String subsystem =
      "com.poesys.db.test"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property key1
   *
   * 
   *
   * Added by AddNaturalKeyProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long key1;
  
  /**
   * Get an object of java.lang.Long.
   *
   * Source: AddNaturalKeyProperties
   * 
   * @return a java.lang.Long
   */

  public java.lang.Long getKey1() {
    return key1;
  }

  /**
   * Clear the key1 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearKey1() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property key2
   *
   * 
   *
   * Added by AddNaturalKeyProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long key2;
  
  /**
   * Get an object of java.lang.Long.
   *
   * Source: AddNaturalKeyProperties
   * 
   * @return a java.lang.Long
   */

  public java.lang.Long getKey2() {
    return key2;
  }

  /**
   * Clear the key2 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearKey2() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property parents4
   *
   * 
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.test.ISelf4> parents4;
  // Ordered list of keys of the objects in the parents4 list
  java.util.List<com.poesys.db.pk.IPrimaryKey> parent4Keys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.test.ISelf4.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.test.ISelf4>
   */

  public java.util.Collection<com.poesys.db.test.ISelf4> getParents4() {
    return parents4;
  }

  /**
   * Clear the parents4 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearParents4() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property children4
   *
   * 
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.test.ISelf4> children4;
  // Ordered list of keys of the objects in the children4 list
  java.util.List<com.poesys.db.pk.IPrimaryKey> child4Keys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.test.ISelf4.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.test.ISelf4>
   */

  public java.util.Collection<com.poesys.db.test.ISelf4> getChildren4() {
    return children4;
  }

  /**
   * Clear the children4 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearChildren4() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property parents4Self4SelfLinks
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.test.ISelf4Self> parents4Self4SelfLinks;
  // Ordered list of keys of the objects in the parents4Self4SelfLinks list
  java.util.List<com.poesys.db.pk.IPrimaryKey> parents4Self4SelfLinksKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.test.ISelf4Self.
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.test.ISelf4Self>
   */

  public java.util.Collection<com.poesys.db.test.ISelf4Self> getParents4Self4SelfLinks() {
    return parents4Self4SelfLinks;
  }

  /**
   * Clear the parents4Self4SelfLinks data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearParents4Self4SelfLinks() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property children4Self4SelfLinks
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.test.ISelf4Self> children4Self4SelfLinks;
  // Ordered list of keys of the objects in the children4Self4SelfLinks list
  java.util.List<com.poesys.db.pk.IPrimaryKey> children4Self4SelfLinksKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.test.ISelf4Self.
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.test.ISelf4Self>
   */

  public java.util.Collection<com.poesys.db.test.ISelf4Self> getChildren4Self4SelfLinks() {
    return children4Self4SelfLinks;
  }

  /**
   * Clear the children4Self4SelfLinks data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearChildren4Self4SelfLinks() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up parents4Self4SelfLinks.
    if (subject != null && subject instanceof com.poesys.db.test.ISelf4Self && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        parents4Self4SelfLinks != null) {
      // Delete to-many parents4Self4SelfLinks child from collection
      parents4Self4SelfLinks.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up children4Self4SelfLinks.
    if (subject != null && subject instanceof com.poesys.db.test.ISelf4Self && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        children4Self4SelfLinks != null) {
      // Delete to-many children4Self4SelfLinks child from collection
      children4Self4SelfLinks.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Cascade delete to parents4Self4SelfLinks.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        parents4Self4SelfLinks != null) {
      // Mark parents4Self4SelfLinks association object cascade-deleted.
      outer: for (com.poesys.db.test.ISelf4Self value : parents4Self4SelfLinks) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }

    // Cascade delete to children4Self4SelfLinks.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        children4Self4SelfLinks != null) {
      // Mark children4Self4SelfLinks association object cascade-deleted.
      outer: for (com.poesys.db.test.ISelf4Self value : children4Self4SelfLinks) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }
  }

  /**
   * Create the inserters for the Self4 and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.db.test.ISelf4> self4Factory =
      manager.getFactory("com.poesys.db.test.Self4",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<ISelf4> sql =
      new com.poesys.db.test.sql.InsertSelf4();
    com.poesys.db.dao.insert.IInsert<ISelf4> inserter =
      self4Factory.getInsert(sql, true);
    inserters.add(inserter);
  }
}