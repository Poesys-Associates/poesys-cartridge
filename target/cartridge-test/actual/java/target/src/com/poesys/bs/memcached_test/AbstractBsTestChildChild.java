/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package com.poesys.bs.memcached_test;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import com.poesys.db.memcached_test.ITestChildChild;
import com.poesys.db.memcached_test.TestChildChildProxy;
import com.poesys.db.memcached_test.TestChildChild;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the TestChildChild. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Immutable</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsTestChildChild 
    extends AbstractDto<com.poesys.db.memcached_test.ITestChildChild> {

  /**
   * Create a BsTestChildChild object from a TestChildChild object.
   * 
   * @param dto the data-access layer TestChildChild DTO
   * @throws DelegateException when there is a problem creating the TestChildChild
   */
  public AbstractBsTestChildChild(ITestChildChild dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a TestChildChild from new data.
   *
   * @param key the primary key of the TestChildChild
   * @param childNo composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param testParentId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param testChildChildId composite subkey attribute that uniquely identifies child combined with parent key
   */
  public AbstractBsTestChildChild(IPrimaryKey key, java.math.BigInteger childNo, java.math.BigInteger testParentId, java.lang.String testChildChildId) {
    super(new TestChildChildProxy(new TestChildChild(key, childNo, testParentId, testChildChildId)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ITestChildChild> other = (IDto<ITestChildChild>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ITestChildChild> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddOrderedSubKeyProperties + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestChildChild</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger childNo
   */
  public java.math.BigInteger getChildNo() {
    return dto.getChildNo();
  }

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object TestChildChild</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger testParentId
   */
  public java.math.BigInteger getTestParentId() {
    return dto.getTestParentId();
  }

  /**
   * <p>
   * Composite subkey attribute that uniquely identifies child combined with parent key
   * </p>
   * <p>
   * Added by AddUnorderedSubKeyProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object TestChildChild</li>
   * </ul>
   * </p>
   * @return a java.lang.String testChildChildId
   */
  public java.lang.String getTestChildChildId() {
    return dto.getTestChildChildId();
  }

  /**
   * 
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestChildChild</li>
   * </ul>
   * </p>
   * @return a com.poesys.bs.memcached_test.BsTestChild childParent
   */
  public com.poesys.bs.memcached_test.BsTestChild getChildParent() {
    // Return 4
    return new com.poesys.bs.memcached_test.BsTestChild(dto.getChildParent());
  }
}