/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractQueryAll.vsl

package com.poesys.db.memcached_test.sql;


import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.InvalidParametersException;
import com.poesys.db.dao.query.IQuerySql;
import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.memcached_test.Memcached_testFactory;


/**
 * <p>
 * A query Command pattern object that implements a SQL query for all the 
 * ConcreteMiddle objects in the database; use with caution
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractQueryAllConcreteMiddle implements IQuerySql<com.poesys.db.memcached_test.IConcreteMiddle> {
  /** SQL query statement for ConcreteMiddle */
  private static final String SQL =
    "SELECT Base.baseId, Base.baseString, ConcreteMiddle.middleString, LeafC.cString, CASE WHEN LeafC.baseId IS NOT NULL THEN 'LeafC' ELSE NULL END AS discriminant FROM ConcreteMiddle ConcreteMiddle JOIN Base Base ON ConcreteMiddle.baseId = Base.baseId LEFT OUTER JOIN LeafC LeafC ON ConcreteMiddle.baseId = LeafC.baseId";

  public com.poesys.db.memcached_test.IConcreteMiddle getData(ResultSet rs) throws SQLException {
    IPrimaryKey key = 
      Memcached_testFactory.getConcreteMiddlePrimaryKey(rs, "");
      
    // ConcreteMiddle has subclasses, so the query returns an object of the actual
    // type rather than just of type ConcreteMiddle. It uses a discriminant expression
    // that the result set returns to figure out which class to instantiate.
    
    // Get the discriminant from the result set.
    String discriminant = rs.getString("discriminant");
    
    // Check whether the discriminant is null and throw exception.
    if (discriminant == null) {
      throw new com.poesys.bs.delegate.DelegateException("Missing subclass for queried object of superclass com.poesys.db.memcached_test.ConcreteMiddle");
    }
    
    com.poesys.db.memcached_test.IConcreteMiddle data = null;
    // Check for LeafC, set return only if not already set
    if (discriminant.equals("LeafC") && data == null) {
      // Use the memcached_test factory to get the data.
      data = 
        (com.poesys.db.memcached_test.IConcreteMiddle)com.poesys.db.memcached_test.Memcached_testFactory.getLeafCData(key, rs);
    }
    return data;
  }
  
  public IPrimaryKey getPrimaryKey(ResultSet rs) throws SQLException,
      InvalidParametersException {
    return Memcached_testFactory.getConcreteMiddlePrimaryKey(rs, "");
  }

  public String getSql() {
    return SQL;
  }
}