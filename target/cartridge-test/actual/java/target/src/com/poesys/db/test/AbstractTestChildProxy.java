/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package com.poesys.db.test;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * TestChild. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTestChildProxy extends AbstractLazyLoadingDtoProxy implements ITestChild {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  // Lazy-loading query setter strategy nested classes for single-object associations
  


  /**
   * Read-Object setter for de-serializing nested up collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryTestChild
   */
  private class ReadUpSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ITestChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadUpSetter object to read the up collection.
     */
    public ReadUpSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestChild.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ITestChild> getObjectCollection() {
      java.util.Collection<com.poesys.db.test.ITestChild> up =  ((com.poesys.db.test.TestChild)dto).getUp();
      return up;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.test.TestChild)dto).upKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ITestChild> getSql() {
      return new com.poesys.db.test.sql.QueryTestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ITestChild> collection) {
      ((com.poesys.db.test.TestChild)dto).up = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested down collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryTestChild
   */
  private class ReadDownSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ITestChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadDownSetter object to read the down collection.
     */
    public ReadDownSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestChild.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ITestChild> getObjectCollection() {
      java.util.Collection<com.poesys.db.test.ITestChild> down =  ((com.poesys.db.test.TestChild)dto).getDown();
      return down;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.test.TestChild)dto).downKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ITestChild> getSql() {
      return new com.poesys.db.test.sql.QueryTestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ITestChild> collection) {
      ((com.poesys.db.test.TestChild)dto).down = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested grandchildren collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryTestChildChild
   */
  private class ReadGrandchildrenSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ITestChildChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadGrandchildrenSetter object to read the grandchildren collection.
     */
    public ReadGrandchildrenSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestChildChild.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ITestChildChild> getObjectCollection() {
      java.util.Collection<com.poesys.db.test.ITestChildChild> grandchildren =  ((com.poesys.db.test.TestChild)dto).getGrandchildren();
      return grandchildren;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.test.TestChild)dto).grandchildrenKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ITestChildChild> getSql() {
      return new com.poesys.db.test.sql.QueryTestChildChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ITestChildChild> collection) {
      ((com.poesys.db.test.TestChild)dto).grandchildren = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested upTest2Child2TestChildLinks collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryTestChild2TestChild
   */
  private class ReadUpTest2Child2TestChildLinksSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ITestChild2TestChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadUpTest2Child2TestChildLinksSetter object to read the upTest2Child2TestChildLinks collection.
     */
    public ReadUpTest2Child2TestChildLinksSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestChild2TestChild.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ITestChild2TestChild> getObjectCollection() {
      java.util.Collection<com.poesys.db.test.ITestChild2TestChild> upTest2Child2TestChildLinks =  ((com.poesys.db.test.TestChild)dto).getUpTest2Child2TestChildLinks();
      return upTest2Child2TestChildLinks;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.test.TestChild)dto).upTest2Child2TestChildLinksKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ITestChild2TestChild> getSql() {
      return new com.poesys.db.test.sql.QueryTestChild2TestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ITestChild2TestChild> collection) {
      ((com.poesys.db.test.TestChild)dto).upTest2Child2TestChildLinks = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested downTest2Child2TestChildLinks collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryTestChild2TestChild
   */
  private class ReadDownTest2Child2TestChildLinksSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ITestChild2TestChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadDownTest2Child2TestChildLinksSetter object to read the downTest2Child2TestChildLinks collection.
     */
    public ReadDownTest2Child2TestChildLinksSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestChild2TestChild.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ITestChild2TestChild> getObjectCollection() {
      java.util.Collection<com.poesys.db.test.ITestChild2TestChild> downTest2Child2TestChildLinks =  ((com.poesys.db.test.TestChild)dto).getDownTest2Child2TestChildLinks();
      return downTest2Child2TestChildLinks;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.test.TestChild)dto).downTest2Child2TestChildLinksKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ITestChild2TestChild> getSql() {
      return new com.poesys.db.test.sql.QueryTestChild2TestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ITestChild2TestChild> collection) {
      ((com.poesys.db.test.TestChild)dto).downTest2Child2TestChildLinks = collection;
    }
  }

  /**
   * Create a TestChildProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractTestChildProxy(TestChild dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadUpSetter());
    readObjectSetters.add(new ReadDownSetter());
    readObjectSetters.add(new ReadGrandchildrenSetter());
    readObjectSetters.add(new ReadUpTest2Child2TestChildLinksSetter());
    readObjectSetters.add(new ReadDownTest2Child2TestChildLinksSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractTestChildProxy otherProxy = (AbstractTestChildProxy)obj;
    return ((TestChild)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((TestChild)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties + AddParentKeyAttributes
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getTestParentId() {
    return ((TestChild)dto).getTestParentId();
  }

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddOrderedSubKeyProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getChildNo() {
    return ((TestChild)dto).getChildNo();
  }

  /**
   * Get an object of com.poesys.db.test.ITestParent
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   * Lazy: false
   * 
   * @return a com.poesys.db.test.ITestParent
   */
  public com.poesys.db.test.ITestParent getTestParent() {
    return ((TestChild)dto).getTestParent();
  }

  /**
   * Get a collection of com.poesys.db.test.ITestChild
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<com.poesys.db.test.ITestChild>
   */
  public java.util.Collection<com.poesys.db.test.ITestChild> getUp() {
    return ((TestChild)dto).getUp();
  }

  /**
   * Get a collection of com.poesys.db.test.ITestChild
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<com.poesys.db.test.ITestChild>
   */
  public java.util.Collection<com.poesys.db.test.ITestChild> getDown() {
    return ((TestChild)dto).getDown();
  }

  /**
   * Get a collection of com.poesys.db.test.ITestChildChild
   *
   * Source: AddToManyChildCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<com.poesys.db.test.ITestChildChild>
   */
  public java.util.Collection<com.poesys.db.test.ITestChildChild> getGrandchildren() {
    return ((TestChild)dto).getGrandchildren();
  }

  /**
   * Get a collection of com.poesys.db.test.ITestChild2TestChild
   *
   * Source: AddAssociationClassCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<com.poesys.db.test.ITestChild2TestChild>
   */
  public java.util.Collection<com.poesys.db.test.ITestChild2TestChild> getUpTest2Child2TestChildLinks() {
    return ((TestChild)dto).getUpTest2Child2TestChildLinks();
  }

  /**
   * Get a collection of com.poesys.db.test.ITestChild2TestChild
   *
   * Source: AddAssociationClassCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<com.poesys.db.test.ITestChild2TestChild>
   */
  public java.util.Collection<com.poesys.db.test.ITestChild2TestChild> getDownTest2Child2TestChildLinks() {
    return ((TestChild)dto).getDownTest2Child2TestChildLinks();
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((TestChild)dto).markChildrenDeleted();
  }
}