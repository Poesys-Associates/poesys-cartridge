/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.db.test;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the TestA. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Immutable</li>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTestA extends AbstractDto implements ITestA {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested bs
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryBsByTestA
   */
  private class QueryBsSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.test.ITestB, ITestA, java.util.List<com.poesys.db.test.ITestB>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryBsSetter object.
     */
    public QueryBsSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestB.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITestA getParametersDto() {
      return AbstractTestA.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.test.ITestB, ITestA> getSql() {
      return new com.poesys.db.test.sql.QueryBsByTestA();
    }

    @Override
    protected void set(java.util.List<com.poesys.db.test.ITestB> list) {
      // No status change; this is just filling in the object data.
      bs = list;
      // Add the primary keys to the serialized key list if there are any.
      if (bs != null) {
        for (com.poesys.db.dto.IDbDto object : bs) {
          bsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated bs list is not null
      return bs != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested bs list
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryTestB
   */
  private class ReadBsSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<com.poesys.db.test.ITestB> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadBsSetter object to read the bs list.
     */
    public ReadBsSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestB.class.getName();
    }

    @Override
    protected java.util.List<com.poesys.db.test.ITestB> getObjectList() {
      return bs;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return bsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ITestB> getSql() {
      return new com.poesys.db.test.sql.QueryTestB();
    }

    @Override
    protected void set(java.util.List<com.poesys.db.test.ITestB> list) {
      bs = list;
    }
  }

  /**
   * Insert setter for inserting nested to-many association bs.
   *
   * @see com.poesys.db.test.sql.InsertTestB
   */
  private class InsertBsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association bs source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertBsSetter object.
     */
    public InsertBsSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestB.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = bs;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added bs, updated bs, and 
   * deleted bs. 
   */
   
  /**
   * Create an empty TestA for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractTestA() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the bs property.
    querySetters.add(new QueryBsSetter());
    readObjectSetters.add(new ReadBsSetter());
    insertSetters.add(new InsertBsSetter());
  }

  /**
   * Create a TestA. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the TestA
   * @param testAId primary key attribute
   */
  public AbstractTestA(IPrimaryKey key, java.math.BigInteger testAId) {
    this.key = key;

    this.testAId = testAId;

    if (testAId == null) {
      throw new com.poesys.db.InvalidParametersException("testAId is required for " + key.getValueList());
    }
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the bs property.
    querySetters.add(new QueryBsSetter());
    readObjectSetters.add(new ReadBsSetter());
    insertSetters.add(new InsertBsSetter());
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractTestA other = (AbstractTestA)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractTestA other = (AbstractTestA)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.db.test";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("com.poesys.db.test");
    String subsystem =
      "com.poesys.db.test"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property testAId
   *
   * <p>
   * Primary key attribute
   * </p>
   *
   * Added by AddGeneratedKeyProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger testAId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTestAId() {
    return testAId;
  }

  /**
   * Clear the testAId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTestAId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property bs
   *
   * 
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.List<com.poesys.db.test.ITestB> bs;
  // Ordered list of keys of the objects in the bs list
  java.util.List<com.poesys.db.pk.IPrimaryKey> bsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a list of com.poesys.db.test.ITestB.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.List<com.poesys.db.test.ITestB>
   */

  public java.util.List<com.poesys.db.test.ITestB> getBs() {
    return bs;
  }

  /**
   * Clear the bs data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearBs() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }

  /**
   * Create the inserters for the TestA and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.db.test.ITestA> testAFactory =
      manager.getFactory("com.poesys.db.test.TestA",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<ITestA> sql =
      new com.poesys.db.test.sql.InsertTestA();
    com.poesys.db.dao.insert.IInsert<ITestA> inserter =
      testAFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}