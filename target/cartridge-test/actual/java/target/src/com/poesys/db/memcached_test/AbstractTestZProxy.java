/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package com.poesys.db.memcached_test;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * TestZ. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The TestZ object is the assocation class that represents the many-to-many
 * association of TestX and TestY objects.
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTestZProxy extends AbstractLazyLoadingDtoProxy implements ITestZ {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  // Lazy-loading query setter strategy nested classes for single-object associations
  
  /** Flag indicating whether the y property has been loaded */
  boolean yLoaded = false;

  /**
   * Query setter for lazily querying nested y object
   * (object property)
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTestY
   */
  private class QueryYSetter 
      extends com.poesys.db.dto.AbstractLazyObjectSetter<com.poesys.db.memcached_test.ITestY> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;

    /**
     * Create a QueryYSetter object.
     */
    public QueryYSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestY.class.getName();
    }

    @Override
    protected com.poesys.db.pk.IPrimaryKey getKey() {
      // Generate an com.poesys.db.memcached_test.ITestY primary key with the value 
      // from the com.poesys.db.memcached_test.ITestZ object
      return com.poesys.db.memcached_test.Memcached_testFactory.getTestYPrimaryKey(((ITestZ)dto).getTestYId());
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestY> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestY();
    }

    @Override
    protected void set(com.poesys.db.memcached_test.ITestY dto)
         throws com.poesys.db.InvalidParametersException, 
                com.poesys.db.dto.DtoStatusException {
      setY(dto);
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded y
      return yLoaded;
    }
  }



  /**
   * Read-Object setter for de-serializing nested tests collection
   *
   * Source: AddToManyAssociatedKeyCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTestAssociationChild
   */
  private class ReadTestsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.memcached_test.ITestAssociationChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadTestsSetter object to read the tests collection.
     */
    public ReadTestsSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestAssociationChild.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild> getObjectCollection() {
      java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild> tests =  ((com.poesys.db.memcached_test.TestZ)dto).getTests();
      return tests;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.memcached_test.TestZ)dto).testsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestAssociationChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestAssociationChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild> collection) {
      ((com.poesys.db.memcached_test.TestZ)dto).tests = collection;
    }
  }


  /**
   * Add a com.poesys.db.memcached_test.ITestAssociationChild object to the Tests collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddToManyAssociatedKeyCollectionProperties
   * 
   * @param object the com.poesys.db.memcached_test.ITestAssociationChild object to add to the collection
   */
  public void addTestsTestAssociationChild(com.poesys.db.memcached_test.ITestAssociationChild object) {
    ((TestZ)dto).addTestsTestAssociationChild(object);
  }

  /**
   * Create a TestZProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractTestZProxy(TestZ dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadTestsSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractTestZProxy otherProxy = (AbstractTestZProxy)obj;
    return ((TestZ)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((TestZ)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get an object of java.lang.String
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getZAttr() {
    return ((TestZ)dto).getZAttr();
  }

  public void setZAttr(java.lang.String zAttr)
      {
    ((TestZ)dto).setZAttr(zAttr);
  }

  /**
   * Get a collection of com.poesys.db.memcached_test.ITestAssociationChild
   *
   * Source: AddToManyAssociatedKeyCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild>
   */
  public java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild> getTests() {
    return ((TestZ)dto).getTests();
  }

  public void setTests(java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild> tests)
      {
    ((TestZ)dto).setTests(tests);
  }

  /**
   * Get an object of com.poesys.db.memcached_test.ITestY
   * loading the y association if it is not already in memory.
   *
   * Source: AddAssociationKeyObjectProperties
   * Lazy: true
   * 
   * @return a com.poesys.db.memcached_test.ITestY
   * @throws java.sql.SQLException when there is a database problem
   */
  public com.poesys.db.memcached_test.ITestY getY() throws java.sql.SQLException {
    // Lazy-load the local property y if not loaded and the key ys is not null.
    if (!yLoaded && ((ITestZ)dto).getTestYId() != null) {
      try {
        com.poesys.db.dto.ISet setter = new QueryYSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    } else if (!yLoaded) {
      // ys key attribute is null but is required
      java.util.List<String> args = new java.util.ArrayList<String>(1);
      args.add("ys");
      com.poesys.db.NoRequiredValueException e = 
        new com.poesys.db.NoRequiredValueException("com.poesys.db.dto.msg.lazy_load_no_required_value");
      e.setParameters(args);
      throw e;
    }

    return ((TestZ)dto).getY();
  }

  /**
   * Clear the lazily loaded property y if it is loaded.
   */
  public void clearY() {
    // Only clear if loaded already.
    if (yLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((TestZ)dto).setY(null);
        ((TestZ)dto).undoStatus();
        yLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the y from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param y the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setY(com.poesys.db.memcached_test.ITestY y)
      throws com.poesys.db.InvalidParametersException {
    ((TestZ)dto).setY(y);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    yLoaded = true;
  }

  /**
   * Get an object of com.poesys.db.memcached_test.ITestX
   *
   * Source: AddAssociationKeyObjectProperties
   * Lazy: false
   * 
   * @return a com.poesys.db.memcached_test.ITestX
   */
  public com.poesys.db.memcached_test.ITestX getX() {
    return ((TestZ)dto).getX();
  }

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getTestXId() {
    return ((TestZ)dto).getTestXId();
  }

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getTestYId() {
    return ((TestZ)dto).getTestYId();
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((TestZ)dto).markChildrenDeleted();
  }
}