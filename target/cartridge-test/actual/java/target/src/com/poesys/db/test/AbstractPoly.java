/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.db.test;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the Poly. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * a difference from a specific sequence in the reference species variant
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>IdentityKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractPoly extends AbstractDto implements IPoly {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested map
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryMapsByPoly
   */
  private class QueryMapsSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.test.IMap, IPoly, java.util.List<com.poesys.db.test.IMap>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryMapsSetter object.
     */
    public QueryMapsSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Map.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IPoly getParametersDto() {
      return AbstractPoly.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.test.IMap, IPoly> getSql() {
      return new com.poesys.db.test.sql.QueryMapsByPoly();
    }

    @Override
    protected void set(java.util.List<com.poesys.db.test.IMap> list) {
      // No status change; this is just filling in the object data.
      maps = list;
      // Add the primary keys to the serialized key list if there are any.
      if (maps != null) {
        for (com.poesys.db.dto.IDbDto object : maps) {
          mapKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated maps list is not null
      return maps != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested maps list
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryMap
   */
  private class ReadMapsSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<com.poesys.db.test.IMap> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadMapsSetter object to read the maps list.
     */
    public ReadMapsSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Map.class.getName();
    }

    @Override
    protected java.util.List<com.poesys.db.test.IMap> getObjectList() {
      return maps;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return mapKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.IMap> getSql() {
      return new com.poesys.db.test.sql.QueryMap();
    }

    @Override
    protected void set(java.util.List<com.poesys.db.test.IMap> list) {
      maps = list;
    }
  }

  /**
   * Insert setter for inserting nested to-many association map.
   *
   * @see com.poesys.db.test.sql.InsertMap
   */
  private class InsertMapsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association maps source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertMapsSetter object.
     */
    public InsertMapsSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Map.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = maps;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return false;
    }
  }

  /**
   * Setter for processing added map, updated map, and 
   * deleted map. 
   */
   
  private class UpdateMapsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<com.poesys.db.test.IMap, java.util.List<com.poesys.db.test.IMap>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateMapsSetter object.
     */
    public UpdateMapsSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.List<com.poesys.db.test.IMap> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // maps source: TransformToProperty + AddToManyAssociationCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<com.poesys.db.test.IMap> factory = 
        manager.getFactory(com.poesys.db.test.Map.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<com.poesys.db.test.IMap> updater =
        factory.getUpdateBatch(new com.poesys.db.test.sql.UpdateMap());

      // Update the object of the current class.
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.List<com.poesys.db.test.IMap> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.db.test.IMap> factory = 
        manager.getFactory(com.poesys.db.test.Map.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<com.poesys.db.test.IMap> dao = 
        factory.getDeleteBatch(new com.poesys.db.test.sql.DeleteMap());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.List<com.poesys.db.test.IMap> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<com.poesys.db.test.IMap> factory = 
        manager.getFactory(com.poesys.db.test.Map.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<com.poesys.db.test.IMap> inserter =
        factory.getInsertBatch(new com.poesys.db.test.sql.InsertMap());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.insert(connection, (java.util.Collection<com.poesys.db.test.IMap>)dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.List<com.poesys.db.test.IMap> getDtos() {
      return maps;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.db.test.Map.class.getName();
    }
  }

  /**
   * Add com.poesys.db.test.IMap object to maps collection.
   * 
   * @param object the com.poesys.db.test.IMap object
   */
  public void addMapsMap(com.poesys.db.test.IMap object) {
    if (maps == null) {
      // Association not yet created, create it.
      maps = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.test.IMap>();
    }
    maps.add(object);
    // Add the primary key to the primary key array.
    mapKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested mapElement
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryMapElementByPoly
   */
  private class QueryMapElementSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.test.IMapElement, IPoly, java.util.Collection<com.poesys.db.test.IMapElement>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryMapElementSetter object.
     */
    public QueryMapElementSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.MapElement.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IPoly getParametersDto() {
      return AbstractPoly.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.test.IMapElement, IPoly> getSql() {
      return new com.poesys.db.test.sql.QueryMapElementByPoly();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.IMapElement> list) {
      // No status change; this is just filling in the object data.
      mapElement = list;
      // Add the primary keys to the serialized key list if there are any.
      if (mapElement != null) {
        for (com.poesys.db.dto.IDbDto object : mapElement) {
          mapElementKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated mapElement list is not null
      return mapElement != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested mapElement collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryMapElement
   */
  private class ReadMapElementSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.IMapElement> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadMapElementSetter object to read the mapElement collection.
     */
    public ReadMapElementSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.MapElement.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.IMapElement> getObjectCollection() {
      return mapElement;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return mapElementKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.IMapElement> getSql() {
      return new com.poesys.db.test.sql.QueryMapElement();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.IMapElement> collection) {
     mapElement = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association mapElement.
   *
   * @see com.poesys.db.test.sql.InsertMapElement
   */
  private class InsertMapElementSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association mapElement source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertMapElementSetter object.
     */
    public InsertMapElementSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.MapElement.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = mapElement;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added mapElement and updated mapElement.
   * Deleted mapElement are deleted in the database cascade delete.
   */
   
  private class UpdateMapElementSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<com.poesys.db.test.IMapElement, java.util.Collection<com.poesys.db.test.IMapElement>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateMapElementSetter object.
     */
    public UpdateMapElementSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<com.poesys.db.test.IMapElement> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // mapElement source: AddAssociationClassCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      // Create superclass updaters.

      // TairObject
      final com.poesys.db.dao.IDaoFactory<com.poesys.db.test.ITairObject> tairObjectFactory =
        manager.getFactory("com.poesys.db.test.TairObject", "com.poesys.db.test", 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<com.poesys.db.test.ITairObject> tairObjectUpdater =
        tairObjectFactory.getUpdateBatch(new com.poesys.db.test.sql.UpdateTairObject());
      java.util.Collection<com.poesys.db.test.ITairObject> tairObjectDtos = convertDtoList(dtos);
    

      com.poesys.db.dao.IDaoFactory<com.poesys.db.test.IMapElement> factory = 
        manager.getFactory(com.poesys.db.test.MapElement.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<com.poesys.db.test.IMapElement> updater =
        factory.getUpdateBatch(new com.poesys.db.test.sql.UpdateMapElement());

      // Update the superclass objects from the root down.
      tairObjectUpdater.update(connection, tairObjectDtos, tairObjectDtos.size() / 2);

      // Update the object of the current class.
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<com.poesys.db.test.IMapElement> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.db.test.IMapElement> factory = 
        manager.getFactory(com.poesys.db.test.MapElement.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<com.poesys.db.test.IMapElement> dao = 
        factory.getDeleteBatch(new com.poesys.db.test.sql.DeleteMapElement());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<com.poesys.db.test.IMapElement> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

    // Create superclass inserters.

    // TairObject
    final com.poesys.db.dao.IDaoFactory<com.poesys.db.test.ITairObject> tairObjectFactory =
      manager.getFactory("com.poesys.db.test.TairObject", "com.poesys.db.test", 2147483647);
    // Key type: IdentityKey, Inherited Key type: None
    com.poesys.db.dao.insert.IInsertCollection<com.poesys.db.test.ITairObject> tairObjectInserter =
      tairObjectFactory.getInsertCollection(new com.poesys.db.test.sql.InsertTairObject(), false);
    java.util.Collection<com.poesys.db.test.ITairObject> tairObjectDtos = convertDtoList(dtos);
    

      com.poesys.db.dao.IDaoFactory<com.poesys.db.test.IMapElement> factory = 
        manager.getFactory(com.poesys.db.test.MapElement.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<com.poesys.db.test.IMapElement> inserter =
        factory.getInsertBatch(new com.poesys.db.test.sql.InsertMapElement());


      // Insert the superclass objects from the root down. Suppress nested
      // inserts for the superclasses, wait until the concrete class. Also set 
      // pre-insert suppression off to have the root insert linked, to-one class
      // objects.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(true);
        dto.setSuppressNestedPreInserts(false);
      }
      tairObjectInserter.insert(connection, tairObjectDtos);
      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.insert(connection, (java.util.Collection<com.poesys.db.test.IMapElement>)dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.IMapElement> getDtos() {
      return mapElement;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.db.test.MapElement.class.getName();
    }
  }

  /**
   * Add com.poesys.db.test.IMapElement object to mapElement collection.
   * 
   * @param object the com.poesys.db.test.IMapElement object
   */
  public void addMapElementMapElement(com.poesys.db.test.IMapElement object) {
    if (mapElement == null) {
      // Association not yet created, create it.
      mapElement = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.test.IMapElement>();
    }
    mapElement.add(object);
    // Add the primary key to the primary key array.
    mapElementKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Create an empty Poly for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractPoly() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the maps property.
    querySetters.add(new QueryMapsSetter());
    readObjectSetters.add(new ReadMapsSetter());
    insertSetters.add(new InsertMapsSetter());
    postSetters.add(new UpdateMapsSetter());
    
    // Add the many-to-many collection setters for the mapElement property.
    querySetters.add(new QueryMapElementSetter());
    readObjectSetters.add(new ReadMapElementSetter());
    insertSetters.add(new InsertMapElementSetter());
    postSetters.add(new UpdateMapElementSetter());
  }

  /**
   * Create a Poly. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Poly
   * @param polyId primary key attribute
   * @param sequence 
   */
  public AbstractPoly(IPrimaryKey key, java.math.BigInteger polyId, java.lang.String sequence) {
    this.key = key;

    this.polyId = polyId;

    if (polyId == null && !getStatus().equals(Status.NEW)) {
      throw new com.poesys.db.InvalidParametersException("polyId is required for " + key.getValueList());
    }
    
    this.sequence = sequence;

    if (sequence == null && !getStatus().equals(Status.NEW)) {
      throw new com.poesys.db.InvalidParametersException("sequence is required for " + key.getValueList());
    }
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the map property.
    querySetters.add(new QueryMapsSetter());
    readObjectSetters.add(new ReadMapsSetter());
    insertSetters.add(new InsertMapsSetter());
    postSetters.add(new UpdateMapsSetter());
    
    // Add the many-to-many collection setters for the mapElement property.
    querySetters.add(new QueryMapElementSetter());
    readObjectSetters.add(new ReadMapElementSetter());
    insertSetters.add(new InsertMapElementSetter());
    postSetters.add(new UpdateMapElementSetter());
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractPoly other = (AbstractPoly)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractPoly other = (AbstractPoly)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.db.test";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (mapElement != null) {
      for (com.poesys.db.dto.IDbDto dto : mapElement) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("com.poesys.db.test");
    String subsystem =
      "com.poesys.db.test"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property polyId
   *
   * <p>
   * Primary key attribute
   * </p>
   *
   * Added by AddGeneratedKeyProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger polyId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getPolyId() {
    return polyId;
  }

  /**
   * Clear the polyId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPolyId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property sequence
   *
   * 
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String sequence;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getSequence() {
    return sequence;
  }

  /**
   * Clear the sequence data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSequence() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the sequence.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param sequence the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input sequence is null
   */
  public void setSequence(java.lang.String sequence)
      throws com.poesys.db.InvalidParametersException {
    if (sequence == null) {
      throw new com.poesys.db.InvalidParametersException("sequence is required");
    }
    
    this.sequence = sequence;
    setChanged();
  }
  /**
   * Nested property maps
   *
   * 
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.List<com.poesys.db.test.IMap> maps;
  // Ordered list of keys of the objects in the maps list
  java.util.List<com.poesys.db.pk.IPrimaryKey> mapKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a list of com.poesys.db.test.IMap.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.List<com.poesys.db.test.IMap>
   */

  public java.util.List<com.poesys.db.test.IMap> getMaps() {
    return maps;
  }

  /**
   * Clear the maps data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearMaps() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the maps.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param maps the value with which to set the property
   */
  public  void setMap(java.util.List<com.poesys.db.test.IMap> maps) {
    this.maps = maps;
    // Add the primary keys of the new collection to the serialized key list.
    mapKeys.clear();
    if (maps != null) {
      for (com.poesys.db.dto.IDbDto object : maps) {
        mapKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property mapElement
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.test.IMapElement> mapElement;
  // Ordered list of keys of the objects in the mapElement list
  java.util.List<com.poesys.db.pk.IPrimaryKey> mapElementKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.test.IMapElement.
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.test.IMapElement>
   */

  public java.util.Collection<com.poesys.db.test.IMapElement> getMapElement() {
    return mapElement;
  }

  /**
   * Clear the mapElement data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearMapElement() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the mapElement.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * @param mapElement the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input mapElement is null
   */
  public void setMapElement(java.util.Collection<com.poesys.db.test.IMapElement> mapElement)
      throws com.poesys.db.InvalidParametersException {
    if (mapElement == null) {
      throw new com.poesys.db.InvalidParametersException("mapElement is required");
    }
    
    this.mapElement = mapElement;
    // Add the primary keys of the new collection to the serialized key list.
    mapElementKeys.clear();
    if (mapElement != null) {
      for (com.poesys.db.dto.IDbDto object : mapElement) {
        mapElementKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  @Override
  public void finalizeInsert(java.sql.PreparedStatement stmt) throws java.sql.SQLException {
    // Set the key attribute.
    java.sql.ResultSet rs = stmt.getGeneratedKeys();
    if (rs.next()) {
      // Get the key value.
      java.math.BigDecimal decimalValue = rs.getBigDecimal(1);
      // Convert the value to a big integer and assign.
      polyId = decimalValue.toBigInteger();
    }
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up mapElement.
    if (subject != null && subject instanceof com.poesys.db.test.IMapElement && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        mapElement != null) {
      // Delete to-many mapElement child from collection
      mapElement.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Cascade delete to mapElement.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        mapElement != null) {
      // Mark mapElement association object cascade-deleted.
      outer: for (com.poesys.db.test.IMapElement value : mapElement) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }
  }

  /**
   * Create the inserters for the Poly and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.db.test.IPoly> polyFactory =
      manager.getFactory("com.poesys.db.test.Poly",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<IPoly> sql =
      new com.poesys.db.test.sql.InsertPoly();
    com.poesys.db.dao.insert.IInsert<IPoly> inserter =
      polyFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}