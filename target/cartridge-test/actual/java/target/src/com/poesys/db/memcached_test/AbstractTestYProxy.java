/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package com.poesys.db.memcached_test;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * TestY. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The TestY object is the "other" side of a many-to-many association.
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTestYProxy extends AbstractLazyLoadingDtoProxy implements ITestY {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  


  /**
   * Read-Object setter for de-serializing nested xs collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTestX
   */
  private class ReadXsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.memcached_test.ITestX> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadXsSetter object to read the x collection.
     */
    public ReadXsSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestX.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.ITestX> getObjectCollection() {
      java.util.Collection<com.poesys.db.memcached_test.ITestX> xs =  ((com.poesys.db.memcached_test.TestY)dto).getXs();
      return xs;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.memcached_test.TestY)dto).xKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestX> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestX();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestX> collection) {
      ((com.poesys.db.memcached_test.TestY)dto).xs = collection;
    }
  }


  /**
   * Add a com.poesys.db.memcached_test.ITestX object to the Xs collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @param object the com.poesys.db.memcached_test.ITestX object to add to the collection
   */
  public void addXsTestX(com.poesys.db.memcached_test.ITestX object) {
    ((TestY)dto).addXsTestX(object);
  }



  /**
   * Read-Object setter for de-serializing nested zs collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTestZ
   */
  private class ReadZsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.memcached_test.ITestZ> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadZsSetter object to read the zs collection.
     */
    public ReadZsSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestZ.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.ITestZ> getObjectCollection() {
      java.util.Collection<com.poesys.db.memcached_test.ITestZ> zs =  ((com.poesys.db.memcached_test.TestY)dto).getZs();
      return zs;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.memcached_test.TestY)dto).zsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestZ> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestZ();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestZ> collection) {
      ((com.poesys.db.memcached_test.TestY)dto).zs = collection;
    }
  }


  /**
   * Add a com.poesys.db.memcached_test.ITestZ object to the Zs collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @param object the com.poesys.db.memcached_test.ITestZ object to add to the collection
   */
  public void addZsTestZ(com.poesys.db.memcached_test.ITestZ object) {
    ((TestY)dto).addZsTestZ(object);
  }

  /**
   * Create a TestYProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractTestYProxy(TestY dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadXsSetter());
    readObjectSetters.add(new ReadZsSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractTestYProxy otherProxy = (AbstractTestYProxy)obj;
    return ((TestY)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((TestY)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getTestYId() {
    return ((TestY)dto).getTestYId();
  }

  /**
   * Get an object of java.lang.String
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getYAttr() {
    return ((TestY)dto).getYAttr();
  }

  public void setYAttr(java.lang.String yAttr)
      {
    ((TestY)dto).setYAttr(yAttr);
  }

  /**
   * Get a collection of com.poesys.db.memcached_test.ITestX
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.ITestX>
   */
  public java.util.Collection<com.poesys.db.memcached_test.ITestX> getXs() {
    return ((TestY)dto).getXs();
  }

  public void setX(java.util.Collection<com.poesys.db.memcached_test.ITestX> xs)
      {
    ((TestY)dto).setX(xs);
  }

  /**
   * Get a collection of com.poesys.db.memcached_test.ITestZ
   *
   * Source: AddAssociationClassCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.ITestZ>
   */
  public java.util.Collection<com.poesys.db.memcached_test.ITestZ> getZs() {
    return ((TestY)dto).getZs();
  }

  public void setZs(java.util.Collection<com.poesys.db.memcached_test.ITestZ> zs)
      throws com.poesys.db.InvalidParametersException {
    ((TestY)dto).setZs(zs);
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((TestY)dto).markChildrenDeleted();
  }
}