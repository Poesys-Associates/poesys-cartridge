/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractSubsystemFactory.vsl

package com.poesys.db.memcached_test;


import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.InvalidParametersException;
import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A separate, shareable set of factory methods for all the memcached_test
 * classes, including JDBC data-setting, parameter-setting, and
 * primary-key-generation methods. This class is abstract and has a single
 * concrete subclass, Memcached_testFactory, that you can modify to override
 * the default behavior in the abstract class or implement an as-yet 
 * unimplemented method.
 * </p>
 * 
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractMemcached_testFactory {
  /**
   * Retrieve the TestParent data from the result set's current row and create
   * a TestParent object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TestParent instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITestParent getTestParentData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument testParentId gets the JDBC value with a function call.
    java.math.BigInteger testParentIdValue = rs.getBigDecimal("testParentId") == null ? null : rs.getBigDecimal("testParentId").toBigInteger();;
    // Constructor argument parentOccupation gets the JDBC value with a function call.
    java.lang.String parentOccupationValue = rs.getString("parentOccupation");
    // TestParent has no lazily loaded members, so there is no need for Proxy.
    ITestParent newObject = 
      new TestParent(key, testParentIdValue, parentOccupationValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TestParent based on a result set that must contain
   * the TestParent primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TestParent SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestParentPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger testParentIdValue = rs.getBigDecimal("testParentId") == null ? null : rs.getBigDecimal("testParentId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "testParentId", testParentIdValue, "com.poesys.db.memcached_test.TestParent");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TestParent based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param testParentId primary key attribute
   * @return a TestParent SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestParentPrimaryKey(java.math.BigInteger testParentId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (testParentId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("testParentId", testParentId, "com.poesys.db.memcached_test.TestParent");
    }
    return key;
  }

  /**
   * Retrieve the TestB data from the result set's current row and create
   * a TestB object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TestB instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITestB getTestBData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument testBId gets the JDBC value with a function call.
    java.math.BigInteger testBIdValue = rs.getBigDecimal("b_id") == null ? null : rs.getBigDecimal("b_id").toBigInteger();;
    // Constructor argument testAId gets the JDBC value with a function call.
    java.math.BigInteger testAIdValue = rs.getBigDecimal("testAId") == null ? null : rs.getBigDecimal("testAId").toBigInteger();;
    // TestB has no lazily loaded members, so there is no need for Proxy.
    ITestB newObject = 
      new TestB(key, testBIdValue, testAIdValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TestB based on a result set that must contain
   * the TestB primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TestB SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestBPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger testBIdValue = rs.getBigDecimal("b_id") == null ? null : rs.getBigDecimal("b_id").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "b_id", testBIdValue, "com.poesys.db.memcached_test.TestB");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TestB based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param testBId primary key attribute
   * @return a TestB SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestBPrimaryKey(java.math.BigInteger testBId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (testBId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("b_id", testBId, "com.poesys.db.memcached_test.TestB");
    }
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Base based on a result set that must contain
   * the Base primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Base is abstract; only the getPrimaryKey method for a concrete
   * subclass may call this method to get the primary key from its superclass.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Base SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getBasePrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger baseIdValue = rs.getBigDecimal("baseId") == null ? null : rs.getBigDecimal("baseId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "baseId", baseIdValue, "com.poesys.db.memcached_test.Base");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Base based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Base is abstract; only the getPrimaryKey method for a concrete
   * subclass may call this method to get the primary key from its superclass.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param baseId primary key attribute
   * @return a Base SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getBasePrimaryKey(java.math.BigInteger baseId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (baseId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("baseId", baseId, "com.poesys.db.memcached_test.Base");
    }
    return key;
  }

  /**
   * Retrieve the Self4Self data from the result set's current row and create
   * a Self4Self object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a Self4Self instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ISelf4Self getSelf4SelfData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.db.memcached_test.ISelf4 children4Object = null;
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.db.memcached_test.ISelf4 parents4Object = null;
    // Constructor argument parents4Key1 gets the JDBC value with a function call.
    java.lang.Long parents4Key1Value = rs.getLong("parents4Parent");
    // Constructor argument children4Key1 gets the JDBC value with a function call.
    java.lang.Long children4Key1Value = rs.getLong("children4Child");
    // Constructor argument parents4Key2 gets the JDBC value with a function call.
    java.lang.Long parents4Key2Value = rs.getLong("parents4Parent");
    // Constructor argument children4Key2 gets the JDBC value with a function call.
    java.lang.Long children4Key2Value = rs.getLong("children4Child");
    // Self4Self has no lazily loaded members, so there is no need for Proxy.
    ISelf4Self newObject = 
      new Self4Self(key, children4Object, parents4Object, parents4Key1Value, children4Key1Value, parents4Key2Value, children4Key2Value);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Self4Self based on a result set that must contain
   * the Self4Self primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>AssociationKey</li>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Self4Self AssociationKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSelf4SelfPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
    // Associated key type NaturalKey
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> children4Keys =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    // Property source: AddNaturalKeyProperties + getAssociatedKeys
    java.lang.Long children4Key1Value = rs.getLong("children4Child");
    children4Keys.add(new com.poesys.db.col.LongColumnValue(prefix + "children4Child", children4Key1Value));
    // Property source: AddNaturalKeyProperties + getAssociatedKeys
    java.lang.Long children4Key2Value = rs.getLong("children4Child");
    children4Keys.add(new com.poesys.db.col.LongColumnValue(prefix + "children4Child", children4Key2Value));
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(children4Keys, "com.poesys.db.memcached_test.Self4Self"));
    // Associated key type NaturalKey
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> parents4Keys =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    // Property source: AddNaturalKeyProperties + getAssociatedKeys
    java.lang.Long parents4Key1Value = rs.getLong("parents4Parent");
    parents4Keys.add(new com.poesys.db.col.LongColumnValue(prefix + "parents4Parent", parents4Key1Value));
    // Property source: AddNaturalKeyProperties + getAssociatedKeys
    java.lang.Long parents4Key2Value = rs.getLong("parents4Parent");
    parents4Keys.add(new com.poesys.db.col.LongColumnValue(prefix + "parents4Parent", parents4Key2Value));
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(parents4Keys, "com.poesys.db.memcached_test.Self4Self"));
	key = com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "com.poesys.db.memcached_test.Self4Self");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Self4Self based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>AssociationKey</li>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param parents4Key1 Attribute that is part of the association key
   * @param children4Key1 Attribute that is part of the association key
   * @param parents4Key2 Attribute that is part of the association key
   * @param children4Key2 Attribute that is part of the association key
   * @return a Self4Self AssociationKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSelf4SelfPrimaryKey(java.lang.Long parents4Key1, java.lang.Long children4Key1, java.lang.Long parents4Key2, java.lang.Long children4Key2)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track whether any input keys are null.
    boolean noNulls = true;
    java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
    // Associated key: children4 with type NaturalKey
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> children4Keys =
      new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    if (children4Key1 != null && noNulls) {
      children4Keys.add(new com.poesys.db.col.LongColumnValue("children4Key1", children4Key1));
    } else {
      noNulls = false;
    }
    if (children4Key2 != null && noNulls) {
      children4Keys.add(new com.poesys.db.col.LongColumnValue("children4Key2", children4Key2));
    } else {
      noNulls = false;
    }
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(children4Keys, "com.poesys.db.memcached_test.Self4Self"));
    // Associated key: parents4 with type NaturalKey
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> parents4Keys =
      new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    if (parents4Key1 != null && noNulls) {
      parents4Keys.add(new com.poesys.db.col.LongColumnValue("parents4Key1", parents4Key1));
    } else {
      noNulls = false;
    }
    if (parents4Key2 != null && noNulls) {
      parents4Keys.add(new com.poesys.db.col.LongColumnValue("parents4Key2", parents4Key2));
    } else {
      noNulls = false;
    }
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(parents4Keys, "com.poesys.db.memcached_test.Self4Self"));
    if (noNulls) {
	  key = com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "com.poesys.db.memcached_test.Self4Self");
	}
    return key;
  }

  /**
   * Retrieve the LeafB data from the result set's current row and create
   * a LeafB object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a LeafB instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ILeafB getLeafBData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument baseId gets the JDBC value with a function call.
    java.math.BigInteger baseIdValue = rs.getBigDecimal("baseId") == null ? null : rs.getBigDecimal("baseId").toBigInteger();;
    // Constructor argument baseString gets the JDBC value with a function call.
    java.lang.String baseStringValue = rs.getString("baseString");
    // Constructor argument middleString gets the JDBC value with a function call.
    java.lang.String middleStringValue = rs.getString("middleString");
    // Constructor argument bString gets the JDBC value with a function call.
    java.lang.String bStringValue = rs.getString("bString");
    // LeafB has no lazily loaded members, so there is no need for Proxy.
    ILeafB newObject = 
      new LeafB(key, baseIdValue, baseStringValue, middleStringValue, bStringValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a LeafB based on a result set that must contain
   * the LeafB primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a LeafB None primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getLeafBPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    // Superclass: $class.superclass.name
    // superclass Base
    // superclass subsystem Memcached_test
    // superclass Middle
    // superclass subsystem Memcached_test
    key = com.poesys.db.memcached_test.Memcached_testFactory.getMiddlePrimaryKey(rs, "");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a LeafB based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param baseId primary key attribute
   * @return a LeafB None primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getLeafBPrimaryKey(java.math.BigInteger baseId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (baseId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("baseId", baseId, "com.poesys.db.memcached_test.LeafB");
    }
    return key;
  }

  /**
   * Retrieve the TestZ data from the result set's current row and create
   * a TestZ object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TestZ instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITestZ getTestZData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.db.memcached_test.ITestX xsObject = null;
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.db.memcached_test.ITestY ysObject = null;
    // Constructor argument testXId gets the JDBC value with a function call.
    java.math.BigInteger testXIdValue = rs.getBigDecimal("testXId") == null ? null : rs.getBigDecimal("testXId").toBigInteger();;
    // Constructor argument testYId gets the JDBC value with a function call.
    java.math.BigInteger testYIdValue = rs.getBigDecimal("testYId") == null ? null : rs.getBigDecimal("testYId").toBigInteger();;
    // Constructor argument zAttr gets the JDBC value with a function call.
    java.lang.String zAttrValue = rs.getString("zAttr");
    // TestZ has lazily loaded members or is a lazily loaded association class, so create a Proxy.
    ITestZ newObject = 
      new TestZProxy(new TestZ(key, xsObject, ysObject, testXIdValue, testYIdValue, zAttrValue));
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TestZ based on a result set that must contain
   * the TestZ primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>AssociationKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TestZ AssociationKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestZPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
    // Associated key type SequenceKey
    // Property source: AddGeneratedKeyProperties + getAssociatedKeys
    java.math.BigInteger testXIdValue = rs.getBigDecimal("testXId") == null ? null : rs.getBigDecimal("testXId").toBigInteger();
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "testXId", testXIdValue, "com.poesys.db.memcached_test.TestZ"));
    // Associated key type SequenceKey
    // Property source: AddGeneratedKeyProperties + getAssociatedKeys
    java.math.BigInteger testYIdValue = rs.getBigDecimal("testYId") == null ? null : rs.getBigDecimal("testYId").toBigInteger();
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "testYId", testYIdValue, "com.poesys.db.memcached_test.TestZ"));
	key = com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "com.poesys.db.memcached_test.TestZ");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TestZ based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>AssociationKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param testXId Attribute that is part of the association key
   * @param testYId Attribute that is part of the association key
   * @return a TestZ AssociationKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestZPrimaryKey(java.math.BigInteger testXId, java.math.BigInteger testYId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track whether any input keys are null.
    boolean noNulls = true;
    java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
    // Associated key: xs with type SequenceKey
    if (testXId != null) {
      list.add(com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("testXId", testXId, "com.poesys.db.memcached_test.TestZ"));
    } else {
      noNulls = false;
    }
    // Associated key: ys with type SequenceKey
    if (testYId != null) {
      list.add(com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("testYId", testYId, "com.poesys.db.memcached_test.TestZ"));
    } else {
      noNulls = false;
    }
    if (noNulls) {
	  key = com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "com.poesys.db.memcached_test.TestZ");
	}
    return key;
  }

  /**
   * Retrieve the TestAssociationChild data from the result set's current row and create
   * a TestAssociationChild object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TestAssociationChild instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITestAssociationChild getTestAssociationChildData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument key1 gets the JDBC value with a function call.
    java.lang.Long key1Value = rs.getLong("key1");
    // Constructor argument key2 gets the JDBC value with a function call.
    java.lang.Long key2Value = rs.getLong("key2");
    // Constructor argument testXId gets the JDBC value with a function call.
    java.math.BigInteger testXIdValue = rs.getBigDecimal("testXId") == null ? null : rs.getBigDecimal("testXId").toBigInteger();;
    // Constructor argument testYId gets the JDBC value with a function call.
    java.math.BigInteger testYIdValue = rs.getBigDecimal("testYId") == null ? null : rs.getBigDecimal("testYId").toBigInteger();;
    // Constructor argument tsACAttr gets the JDBC value with a function call.
    java.lang.Long tsACAttrValue = rs.getLong("tsACAttr");
    if (rs.wasNull()) {
      tsACAttrValue = null;
    };
    // TestAssociationChild has no lazily loaded members, so there is no need for Proxy.
    ITestAssociationChild newObject = 
      new TestAssociationChild(key, key1Value, key2Value, testXIdValue, testYIdValue, tsACAttrValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TestAssociationChild based on a result set that must contain
   * the TestAssociationChild primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TestAssociationChild CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestAssociationChildPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getTestNaturalParentPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.math.BigInteger testXIdValue = rs.getBigDecimal("testXId") == null ? null : rs.getBigDecimal("testXId").toBigInteger();;
    list.add(new com.poesys.db.col.BigIntegerColumnValue(prefix + "testXId", testXIdValue));
    java.math.BigInteger testYIdValue = rs.getBigDecimal("testYId") == null ? null : rs.getBigDecimal("testYId").toBigInteger();;
    list.add(new com.poesys.db.col.BigIntegerColumnValue(prefix + "testYId", testYIdValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestAssociationChild");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "com.poesys.db.memcached_test.TestAssociationChild");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TestAssociationChild based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param key1 composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param key2 composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param testXId Attribute that is part of the association key
   * @param testYId Attribute that is part of the association key
   * @return a TestAssociationChild CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestAssociationChildPrimaryKey(java.lang.Long key1, java.lang.Long key2, java.math.BigInteger testXId, java.math.BigInteger testYId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getTestNaturalParentPrimaryKey(key1, key2);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.BigIntegerColumnValue("testXId", testXId));
      list.add(new com.poesys.db.col.BigIntegerColumnValue("testYId", testYId));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestAssociationChild");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "com.poesys.db.memcached_test.TestAssociationChild");
    }
    return key;
  }

  /**
   * Retrieve the TC2TC2TC2TC data from the result set's current row and create
   * a TC2TC2TC2TC object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TC2TC2TC2TC instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITC2TC2TC2TC getTC2TC2TC2TCData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.db.memcached_test.ITestChild2TestChild tc1Object = null;
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.db.memcached_test.ITestChild2TestChild tc2Object = null;
    // Constructor argument tc1DownChildNo gets the JDBC value with a function call.
    java.math.BigInteger tc1DownChildNoValue = rs.getBigDecimal("tc1DownChildNo") == null ? null : rs.getBigDecimal("tc1DownChildNo").toBigInteger();;
    // Constructor argument tc1UpChildNo gets the JDBC value with a function call.
    java.math.BigInteger tc1UpChildNoValue = rs.getBigDecimal("tc1UpChildNo") == null ? null : rs.getBigDecimal("tc1UpChildNo").toBigInteger();;
    // Constructor argument tc2DownChildNo gets the JDBC value with a function call.
    java.math.BigInteger tc2DownChildNoValue = rs.getBigDecimal("tc2DownChildNo") == null ? null : rs.getBigDecimal("tc2DownChildNo").toBigInteger();;
    // Constructor argument tc2UpChildNo gets the JDBC value with a function call.
    java.math.BigInteger tc2UpChildNoValue = rs.getBigDecimal("tc2UpChildNo") == null ? null : rs.getBigDecimal("tc2UpChildNo").toBigInteger();;
    // Constructor argument tc1DownTestParentId gets the JDBC value with a function call.
    java.math.BigInteger tc1DownTestParentIdValue = rs.getBigDecimal("tc1DownTestParentId") == null ? null : rs.getBigDecimal("tc1DownTestParentId").toBigInteger();;
    // Constructor argument tc1UpTestParentId gets the JDBC value with a function call.
    java.math.BigInteger tc1UpTestParentIdValue = rs.getBigDecimal("tc1UpTestParentId") == null ? null : rs.getBigDecimal("tc1UpTestParentId").toBigInteger();;
    // Constructor argument tc2DownTestParentId gets the JDBC value with a function call.
    java.math.BigInteger tc2DownTestParentIdValue = rs.getBigDecimal("tc2DownTestParentId") == null ? null : rs.getBigDecimal("tc2DownTestParentId").toBigInteger();;
    // Constructor argument tc2UpTestParentId gets the JDBC value with a function call.
    java.math.BigInteger tc2UpTestParentIdValue = rs.getBigDecimal("tc2UpTestParentId") == null ? null : rs.getBigDecimal("tc2UpTestParentId").toBigInteger();;
    // TC2TC2TC2TC has no lazily loaded members, so there is no need for Proxy.
    ITC2TC2TC2TC newObject = 
      new TC2TC2TC2TC(key, tc1Object, tc2Object, tc1DownChildNoValue, tc1UpChildNoValue, tc2DownChildNoValue, tc2UpChildNoValue, tc1DownTestParentIdValue, tc1UpTestParentIdValue, tc2DownTestParentIdValue, tc2UpTestParentIdValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TC2TC2TC2TC based on a result set that must contain
   * the TC2TC2TC2TC primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>AssociationKey</li>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TC2TC2TC2TC AssociationKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTC2TC2TC2TCPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
    // Associated key type AssociationKey
    // TODO Association keys for association of recursive associations like TC2TC2TC2TC.tc1 not yet supported
    // Associated key type AssociationKey
    // TODO Association keys for association of recursive associations like TC2TC2TC2TC.tc2 not yet supported
	key = com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "com.poesys.db.memcached_test.TC2TC2TC2TC");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TC2TC2TC2TC based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>AssociationKey</li>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param tc1DownChildNo Attribute that is part of the association key
   * @param tc1UpChildNo Attribute that is part of the association key
   * @param tc2DownChildNo Attribute that is part of the association key
   * @param tc2UpChildNo Attribute that is part of the association key
   * @param tc1DownTestParentId Attribute that is part of the association key
   * @param tc1UpTestParentId Attribute that is part of the association key
   * @param tc2DownTestParentId Attribute that is part of the association key
   * @param tc2UpTestParentId Attribute that is part of the association key
   * @return a TC2TC2TC2TC AssociationKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTC2TC2TC2TCPrimaryKey(java.math.BigInteger tc1DownChildNo, java.math.BigInteger tc1UpChildNo, java.math.BigInteger tc2DownChildNo, java.math.BigInteger tc2UpChildNo, java.math.BigInteger tc1DownTestParentId, java.math.BigInteger tc1UpTestParentId, java.math.BigInteger tc2DownTestParentId, java.math.BigInteger tc2UpTestParentId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track whether any input keys are null.
    boolean noNulls = true;
    java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
    // Associated key: tc1 with type AssociationKey
    // TODO Association keys for association of recursive associations like TC2TC2TC2TC.tc1 not yet supported
    // Associated key: tc2 with type AssociationKey
    // TODO Association keys for association of recursive associations like TC2TC2TC2TC.tc2 not yet supported
    if (noNulls) {
	  key = com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "com.poesys.db.memcached_test.TC2TC2TC2TC");
	}
    return key;
  }

  /**
   * Retrieve the TestX data from the result set's current row and create
   * a TestX object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TestX instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITestX getTestXData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument testXId gets the JDBC value with a function call.
    java.math.BigInteger testXIdValue = rs.getBigDecimal("testXId") == null ? null : rs.getBigDecimal("testXId").toBigInteger();;
    // Constructor argument xAttr gets the JDBC value with a function call.
    java.lang.String xAttrValue = rs.getString("xAttr");
    // TestX has lazily loaded members or is a lazily loaded association class, so create a Proxy.
    ITestX newObject = 
      new TestXProxy(new TestX(key, testXIdValue, xAttrValue));
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TestX based on a result set that must contain
   * the TestX primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TestX SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestXPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger testXIdValue = rs.getBigDecimal("testXId") == null ? null : rs.getBigDecimal("testXId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "testXId", testXIdValue, "com.poesys.db.memcached_test.TestX");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TestX based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param testXId primary key attribute
   * @return a TestX SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestXPrimaryKey(java.math.BigInteger testXId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (testXId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("testXId", testXId, "com.poesys.db.memcached_test.TestX");
    }
    return key;
  }

  /**
   * Retrieve the Map data from the result set's current row and create
   * a Map object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a Map instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IMap getMapData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument mapId gets the JDBC value with a function call.
    java.math.BigInteger mapIdValue = rs.getBigDecimal("mapId") == null ? null : rs.getBigDecimal("mapId").toBigInteger();;
    // Constructor argument location gets the JDBC value with a function call.
    java.lang.Long locationValue = rs.getLong("location");
    // Map has no lazily loaded members, so there is no need for Proxy.
    IMap newObject = 
      new Map(key, mapIdValue, locationValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Map based on a result set that must contain
   * the Map primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>IdentityKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Map IdentityKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getMapPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger mapIdValue = rs.getBigDecimal("mapId") == null ? null : rs.getBigDecimal("mapId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createIdentityKey(prefix + "mapId", mapIdValue, "com.poesys.db.memcached_test.Map");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Map based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>IdentityKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param mapId primary key attribute
   * @return a Map IdentityKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getMapPrimaryKey(java.math.BigInteger mapId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Always create a key.
      key = com.poesys.db.pk.PrimaryKeyFactory.createIdentityKey("mapId", mapId, "com.poesys.db.memcached_test.Map");
    return key;
  }

  /**
   * Retrieve the TestChildChild data from the result set's current row and create
   * a TestChildChild object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TestChildChild instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITestChildChild getTestChildChildData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument childNo gets the JDBC value with a function call.
    java.math.BigInteger childNoValue = rs.getBigDecimal("childNo") == null ? null : rs.getBigDecimal("childNo").toBigInteger();;
    // Constructor argument testParentId gets the JDBC value with a function call.
    java.math.BigInteger testParentIdValue = rs.getBigDecimal("testParentId") == null ? null : rs.getBigDecimal("testParentId").toBigInteger();;
    // Constructor argument testChildChildId gets the JDBC value with a function call.
    java.lang.String testChildChildIdValue = rs.getString("testChildChildId");
    // TestChildChild has no lazily loaded members, so there is no need for Proxy.
    ITestChildChild newObject = 
      new TestChildChild(key, childNoValue, testParentIdValue, testChildChildIdValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TestChildChild based on a result set that must contain
   * the TestChildChild primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TestChildChild CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestChildChildPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getTestChildPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String testChildChildIdValue = rs.getString("testChildChildId");
    list.add(new com.poesys.db.col.StringColumnValue(prefix + "testChildChildId", testChildChildIdValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestChildChild");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "com.poesys.db.memcached_test.TestChildChild");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TestChildChild based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param childNo composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param testChildChildId composite subkey attribute that uniquely identifies child combined with parent key
   * @param testParentId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @return a TestChildChild CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestChildChildPrimaryKey(java.math.BigInteger childNo, java.lang.String testChildChildId, java.math.BigInteger testParentId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getTestChildPrimaryKey(childNo, testParentId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("testChildChildId", testChildChildId));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestChildChild");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "com.poesys.db.memcached_test.TestChildChild");
    }
    return key;
  }

  /**
   * Retrieve the MapElement data from the result set's current row and create
   * a MapElement object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a MapElement instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IMapElement getMapElementData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.db.memcached_test.IMap mapsObject = null;
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.db.memcached_test.IPoly polysObject = null;
    // Constructor argument tairObjectId gets the JDBC value with a function call.
    java.math.BigInteger tairObjectIdValue = rs.getBigDecimal("tairObjectId") == null ? null : rs.getBigDecimal("tairObjectId").toBigInteger();;
    // Constructor argument mapId gets the JDBC value with a function call.
    java.math.BigInteger mapIdValue = rs.getBigDecimal("mapId") == null ? null : rs.getBigDecimal("mapId").toBigInteger();;
    // Constructor argument polyId gets the JDBC value with a function call.
    java.math.BigInteger polyIdValue = rs.getBigDecimal("polyId") == null ? null : rs.getBigDecimal("polyId").toBigInteger();;
    // Constructor argument version gets the JDBC value with a function call.
    java.lang.Integer versionValue = rs.getInt("version");
    // Constructor argument elementType gets the JDBC value with a function call.
    java.lang.String elementTypeValue = rs.getString("elementType");
    // MapElement has no lazily loaded members, so there is no need for Proxy.
    IMapElement newObject = 
      new MapElement(key, mapsObject, polysObject, tairObjectIdValue, mapIdValue, polyIdValue, versionValue, elementTypeValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a MapElement based on a result set that must contain
   * the MapElement primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a MapElement None primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getMapElementPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    // Superclass: $class.superclass.name
    // superclass TairObject
    // superclass subsystem Memcached_test
    key = com.poesys.db.memcached_test.Memcached_testFactory.getTairObjectPrimaryKey(rs, "");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a MapElement based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param tairObjectId primary key attribute
   * @return a MapElement None primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getMapElementPrimaryKey(java.math.BigInteger tairObjectId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Always create a key.
      key = com.poesys.db.pk.PrimaryKeyFactory.createIdentityKey("tairObjectId", tairObjectId, "com.poesys.db.memcached_test.MapElement");
    return key;
  }

  /**
   * Retrieve the Self2Self data from the result set's current row and create
   * a Self2Self object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a Self2Self instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ISelf2Self getSelf2SelfData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.db.memcached_test.ISelf2 children2Object = null;
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.db.memcached_test.ISelf2 parents2Object = null;
    // Constructor argument children2Self2Id gets the JDBC value with a function call.
    java.math.BigInteger children2Self2IdValue = rs.getBigDecimal("children2Self2Id") == null ? null : rs.getBigDecimal("children2Self2Id").toBigInteger();;
    // Constructor argument parents2Self2Id gets the JDBC value with a function call.
    java.math.BigInteger parents2Self2IdValue = rs.getBigDecimal("parents2Self2Id") == null ? null : rs.getBigDecimal("parents2Self2Id").toBigInteger();;
    // Self2Self has no lazily loaded members, so there is no need for Proxy.
    ISelf2Self newObject = 
      new Self2Self(key, children2Object, parents2Object, children2Self2IdValue, parents2Self2IdValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Self2Self based on a result set that must contain
   * the Self2Self primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>AssociationKey</li>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Self2Self AssociationKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSelf2SelfPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
    // Associated key type SequenceKey
    // Property source: AddGeneratedKeyProperties + getAssociatedKeys
    java.math.BigInteger children2Self2IdValue = rs.getBigDecimal("children2Self2Id") == null ? null : rs.getBigDecimal("children2Self2Id").toBigInteger();
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "children2Self2Id", children2Self2IdValue, "com.poesys.db.memcached_test.Self2Self"));
    // Associated key type SequenceKey
    // Property source: AddGeneratedKeyProperties + getAssociatedKeys
    java.math.BigInteger parents2Self2IdValue = rs.getBigDecimal("parents2Self2Id") == null ? null : rs.getBigDecimal("parents2Self2Id").toBigInteger();
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "parents2Self2Id", parents2Self2IdValue, "com.poesys.db.memcached_test.Self2Self"));
	key = com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "com.poesys.db.memcached_test.Self2Self");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Self2Self based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>AssociationKey</li>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param children2Self2Id Attribute that is part of the association key
   * @param parents2Self2Id Attribute that is part of the association key
   * @return a Self2Self AssociationKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSelf2SelfPrimaryKey(java.math.BigInteger children2Self2Id, java.math.BigInteger parents2Self2Id)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track whether any input keys are null.
    boolean noNulls = true;
    java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
    // Associated key: children2 with type SequenceKey
    if (children2Self2Id != null) {
      list.add(com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("children2Self2Id", children2Self2Id, "com.poesys.db.memcached_test.Self2Self"));
    } else {
      noNulls = false;
    }
    // Associated key: parents2 with type SequenceKey
    if (parents2Self2Id != null) {
      list.add(com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("parents2Self2Id", parents2Self2Id, "com.poesys.db.memcached_test.Self2Self"));
    } else {
      noNulls = false;
    }
    if (noNulls) {
	  key = com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "com.poesys.db.memcached_test.Self2Self");
	}
    return key;
  }

  /**
   * Retrieve the LeafA data from the result set's current row and create
   * a LeafA object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a LeafA instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ILeafA getLeafAData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument baseId gets the JDBC value with a function call.
    java.math.BigInteger baseIdValue = rs.getBigDecimal("baseId") == null ? null : rs.getBigDecimal("baseId").toBigInteger();;
    // Constructor argument baseString gets the JDBC value with a function call.
    java.lang.String baseStringValue = rs.getString("baseString");
    // Constructor argument middleString gets the JDBC value with a function call.
    java.lang.String middleStringValue = rs.getString("middleString");
    // Constructor argument aString gets the JDBC value with a function call.
    java.lang.String aStringValue = rs.getString("aString");
    // LeafA has no lazily loaded members, so there is no need for Proxy.
    ILeafA newObject = 
      new LeafA(key, baseIdValue, baseStringValue, middleStringValue, aStringValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a LeafA based on a result set that must contain
   * the LeafA primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a LeafA None primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getLeafAPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    // Superclass: $class.superclass.name
    // superclass Base
    // superclass subsystem Memcached_test
    // superclass Middle
    // superclass subsystem Memcached_test
    key = com.poesys.db.memcached_test.Memcached_testFactory.getMiddlePrimaryKey(rs, "");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a LeafA based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param baseId primary key attribute
   * @return a LeafA None primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getLeafAPrimaryKey(java.math.BigInteger baseId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (baseId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("baseId", baseId, "com.poesys.db.memcached_test.LeafA");
    }
    return key;
  }

  /**
   * Retrieve the TestChild data from the result set's current row and create
   * a TestChild object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TestChild instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITestChild getTestChildData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument testParentId gets the JDBC value with a function call.
    java.math.BigInteger testParentIdValue = rs.getBigDecimal("testParentId") == null ? null : rs.getBigDecimal("testParentId").toBigInteger();;
    // Constructor argument childNo gets the JDBC value with a function call.
    java.math.BigInteger childNoValue = rs.getBigDecimal("childNo") == null ? null : rs.getBigDecimal("childNo").toBigInteger();;
    // TestChild has no lazily loaded members, so there is no need for Proxy.
    ITestChild newObject = 
      new TestChild(key, testParentIdValue, childNoValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TestChild based on a result set that must contain
   * the TestChild primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TestChild CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestChildPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getTestParentPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.math.BigInteger childNoValue = rs.getBigDecimal("childNo") == null ? null : rs.getBigDecimal("childNo").toBigInteger();;
    list.add(new com.poesys.db.col.BigIntegerColumnValue(prefix + "childNo", childNoValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestChild");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "com.poesys.db.memcached_test.TestChild");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TestChild based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param childNo composite subkey attribute that uniquely identifies child combined with parent key
   * @param testParentId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @return a TestChild CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestChildPrimaryKey(java.math.BigInteger childNo, java.math.BigInteger testParentId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getTestParentPrimaryKey(testParentId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.BigIntegerColumnValue("childNo", childNo));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestChild");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "com.poesys.db.memcached_test.TestChild");
    }
    return key;
  }

  /**
   * Retrieve the TestA data from the result set's current row and create
   * a TestA object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TestA instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITestA getTestAData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument testAId gets the JDBC value with a function call.
    java.math.BigInteger testAIdValue = rs.getBigDecimal("testAId") == null ? null : rs.getBigDecimal("testAId").toBigInteger();;
    // TestA has no lazily loaded members, so there is no need for Proxy.
    ITestA newObject = 
      new TestA(key, testAIdValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TestA based on a result set that must contain
   * the TestA primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TestA SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestAPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger testAIdValue = rs.getBigDecimal("testAId") == null ? null : rs.getBigDecimal("testAId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "testAId", testAIdValue, "com.poesys.db.memcached_test.TestA");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TestA based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param testAId primary key attribute
   * @return a TestA SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestAPrimaryKey(java.math.BigInteger testAId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (testAId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("testAId", testAId, "com.poesys.db.memcached_test.TestA");
    }
    return key;
  }

  /**
   * Retrieve the TestNaturalKey data from the result set's current row and create
   * a TestNaturalKey object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TestNaturalKey instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITestNaturalKey getTestNaturalKeyData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument key1 gets the JDBC value with a function call.
    java.lang.String key1Value = rs.getString("key1");
    // Constructor argument number1 gets the JDBC value with a function call.
    java.lang.Double number1Value = rs.getDouble("number1");
    if (rs.wasNull()) {
      number1Value = null;
    };
    // Constructor argument number2 gets the JDBC value with a function call.
    java.lang.Double number2Value = rs.getDouble("number2");
    if (rs.wasNull()) {
      number2Value = null;
    };
    // TestNaturalKey has no lazily loaded members, so there is no need for Proxy.
    ITestNaturalKey newObject = 
      new TestNaturalKey(key, key1Value, number1Value, number2Value);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TestNaturalKey based on a result set that must contain
   * the TestNaturalKey primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Immutable</li>
   *     <li>NaturalKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TestNaturalKey NaturalKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestNaturalKeyPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String key1Value = rs.getString("key1");

    list.add(new com.poesys.db.col.StringColumnValue(prefix + "key1", key1Value));
    key = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestNaturalKey");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TestNaturalKey based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Immutable</li>
   *     <li>NaturalKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param key1 key attribute for the Test1
   * @return a TestNaturalKey NaturalKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestNaturalKeyPrimaryKey(java.lang.String key1)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track generated inputs for nullity.
    boolean noNulls = true;
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    if (key1 != null && noNulls) {
      list.add(new com.poesys.db.col.StringColumnValue("key1", key1));
    } else {
      noNulls = false;
    }
    if (noNulls) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestNaturalKey");
    }
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Middle based on a result set that must contain
   * the Middle primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Middle is abstract; only the getPrimaryKey method for a concrete
   * subclass may call this method to get the primary key from its superclass.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Middle None primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getMiddlePrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    // Superclass: $class.superclass.name
    // superclass Base
    // superclass subsystem Memcached_test
    key = com.poesys.db.memcached_test.Memcached_testFactory.getBasePrimaryKey(rs, "");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Middle based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Middle is abstract; only the getPrimaryKey method for a concrete
   * subclass may call this method to get the primary key from its superclass.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param baseId primary key attribute
   * @return a Middle None primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getMiddlePrimaryKey(java.math.BigInteger baseId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (baseId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("baseId", baseId, "com.poesys.db.memcached_test.Middle");
    }
    return key;
  }

  /**
   * Retrieve the TestExplicitKeyChild data from the result set's current row and create
   * a TestExplicitKeyChild object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TestExplicitKeyChild instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITestExplicitKeyChild getTestExplicitKeyChildData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument testParentId gets the JDBC value with a function call.
    java.math.BigInteger testParentIdValue = rs.getBigDecimal("testParentId") == null ? null : rs.getBigDecimal("testParentId").toBigInteger();;
    // Constructor argument explicitSubId gets the JDBC value with a function call.
    java.lang.Long explicitSubIdValue = rs.getLong("explicitSubId");
    // TestExplicitKeyChild has no lazily loaded members, so there is no need for Proxy.
    ITestExplicitKeyChild newObject = 
      new TestExplicitKeyChild(key, testParentIdValue, explicitSubIdValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TestExplicitKeyChild based on a result set that must contain
   * the TestExplicitKeyChild primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TestExplicitKeyChild CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestExplicitKeyChildPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getTestParentPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.Long explicitSubIdValue = rs.getLong("explicitSubId");
    list.add(new com.poesys.db.col.LongColumnValue(prefix + "explicitSubId", explicitSubIdValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestExplicitKeyChild");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "com.poesys.db.memcached_test.TestExplicitKeyChild");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TestExplicitKeyChild based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param explicitSubId sub-key within TestParent to identify the object
   * @param testParentId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @return a TestExplicitKeyChild CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestExplicitKeyChildPrimaryKey(java.lang.Long explicitSubId, java.math.BigInteger testParentId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getTestParentPrimaryKey(testParentId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.LongColumnValue("explicitSubId", explicitSubId));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestExplicitKeyChild");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "com.poesys.db.memcached_test.TestExplicitKeyChild");
    }
    return key;
  }

  /**
   * Retrieve the LeafC data from the result set's current row and create
   * a LeafC object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a LeafC instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ILeafC getLeafCData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument baseId gets the JDBC value with a function call.
    java.math.BigInteger baseIdValue = rs.getBigDecimal("baseId") == null ? null : rs.getBigDecimal("baseId").toBigInteger();;
    // Constructor argument baseString gets the JDBC value with a function call.
    java.lang.String baseStringValue = rs.getString("baseString");
    // Constructor argument middleString gets the JDBC value with a function call.
    java.lang.String middleStringValue = rs.getString("middleString");
    // Constructor argument cString gets the JDBC value with a function call.
    java.lang.String cStringValue = rs.getString("cString");
    // LeafC has no lazily loaded members, so there is no need for Proxy.
    ILeafC newObject = 
      new LeafC(key, baseIdValue, baseStringValue, middleStringValue, cStringValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a LeafC based on a result set that must contain
   * the LeafC primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a LeafC None primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getLeafCPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    // Superclass: $class.superclass.name
    // superclass Base
    // superclass subsystem Memcached_test
    // superclass ConcreteMiddle
    // superclass subsystem Memcached_test
    key = com.poesys.db.memcached_test.Memcached_testFactory.getConcreteMiddlePrimaryKey(rs, "");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a LeafC based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param baseId primary key attribute
   * @return a LeafC None primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getLeafCPrimaryKey(java.math.BigInteger baseId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (baseId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("baseId", baseId, "com.poesys.db.memcached_test.LeafC");
    }
    return key;
  }

  /**
   * Retrieve the Poly data from the result set's current row and create
   * a Poly object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a Poly instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IPoly getPolyData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument polyId gets the JDBC value with a function call.
    java.math.BigInteger polyIdValue = rs.getBigDecimal("polyId") == null ? null : rs.getBigDecimal("polyId").toBigInteger();;
    // Constructor argument sequence gets the JDBC value with a function call.
    java.lang.String sequenceValue = rs.getString("sequence");
    // Poly has no lazily loaded members, so there is no need for Proxy.
    IPoly newObject = 
      new Poly(key, polyIdValue, sequenceValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Poly based on a result set that must contain
   * the Poly primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>IdentityKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Poly IdentityKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getPolyPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger polyIdValue = rs.getBigDecimal("polyId") == null ? null : rs.getBigDecimal("polyId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createIdentityKey(prefix + "polyId", polyIdValue, "com.poesys.db.memcached_test.Poly");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Poly based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>IdentityKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param polyId primary key attribute
   * @return a Poly IdentityKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getPolyPrimaryKey(java.math.BigInteger polyId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Always create a key.
      key = com.poesys.db.pk.PrimaryKeyFactory.createIdentityKey("polyId", polyId, "com.poesys.db.memcached_test.Poly");
    return key;
  }

  /**
   * Retrieve the TestIdentityKey data from the result set's current row and create
   * a TestIdentityKey object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TestIdentityKey instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITestIdentityKey getTestIdentityKeyData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument testIdentityKeyId gets the JDBC value with a function call.
    java.math.BigInteger testIdentityKeyIdValue = rs.getBigDecimal("testIdentityKeyId") == null ? null : rs.getBigDecimal("testIdentityKeyId").toBigInteger();;
    // Constructor argument data1 gets the JDBC value with a function call.
    java.lang.String data1Value = rs.getString("data1");
    // TestIdentityKey has no lazily loaded members, so there is no need for Proxy.
    ITestIdentityKey newObject = 
      new TestIdentityKey(key, testIdentityKeyIdValue, data1Value);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TestIdentityKey based on a result set that must contain
   * the TestIdentityKey primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>IdentityKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TestIdentityKey IdentityKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestIdentityKeyPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger testIdentityKeyIdValue = rs.getBigDecimal("testIdentityKeyId") == null ? null : rs.getBigDecimal("testIdentityKeyId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createIdentityKey(prefix + "testIdentityKeyId", testIdentityKeyIdValue, "com.poesys.db.memcached_test.TestIdentityKey");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TestIdentityKey based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>IdentityKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param testIdentityKeyId primary key attribute
   * @return a TestIdentityKey IdentityKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestIdentityKeyPrimaryKey(java.math.BigInteger testIdentityKeyId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Always create a key.
      key = com.poesys.db.pk.PrimaryKeyFactory.createIdentityKey("testIdentityKeyId", testIdentityKeyId, "com.poesys.db.memcached_test.TestIdentityKey");
    return key;
  }

  /**
   * Retrieve the ConcreteMiddle data from the result set's current row and create
   * a ConcreteMiddle object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a ConcreteMiddle instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IConcreteMiddle getConcreteMiddleData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument baseId gets the JDBC value with a function call.
    java.math.BigInteger baseIdValue = rs.getBigDecimal("baseId") == null ? null : rs.getBigDecimal("baseId").toBigInteger();;
    // Constructor argument baseString gets the JDBC value with a function call.
    java.lang.String baseStringValue = rs.getString("baseString");
    // Constructor argument middleString gets the JDBC value with a function call.
    java.lang.String middleStringValue = rs.getString("middleString");
    // ConcreteMiddle has no lazily loaded members, so there is no need for Proxy.
    IConcreteMiddle newObject = 
      new ConcreteMiddle(key, baseIdValue, baseStringValue, middleStringValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a ConcreteMiddle based on a result set that must contain
   * the ConcreteMiddle primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a ConcreteMiddle None primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getConcreteMiddlePrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    // Superclass: $class.superclass.name
    // superclass Base
    // superclass subsystem Memcached_test
    key = com.poesys.db.memcached_test.Memcached_testFactory.getBasePrimaryKey(rs, "");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a ConcreteMiddle based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param baseId primary key attribute
   * @return a ConcreteMiddle None primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getConcreteMiddlePrimaryKey(java.math.BigInteger baseId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (baseId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("baseId", baseId, "com.poesys.db.memcached_test.ConcreteMiddle");
    }
    return key;
  }

  /**
   * Retrieve the Self4 data from the result set's current row and create
   * a Self4 object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a Self4 instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ISelf4 getSelf4Data(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument key1 gets the JDBC value with a function call.
    java.lang.Long key1Value = rs.getLong("key1");
    // Constructor argument key2 gets the JDBC value with a function call.
    java.lang.Long key2Value = rs.getLong("key2");
    // Self4 has no lazily loaded members, so there is no need for Proxy.
    ISelf4 newObject = 
      new Self4(key, key1Value, key2Value);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Self4 based on a result set that must contain
   * the Self4 primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Immutable</li>
   *     <li>NaturalKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Self4 NaturalKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSelf4PrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.Long key1Value = rs.getLong("key1");

    list.add(new com.poesys.db.col.LongColumnValue(prefix + "key1", key1Value));
    java.lang.Long key2Value = rs.getLong("key2");

    list.add(new com.poesys.db.col.LongColumnValue(prefix + "key2", key2Value));
    key = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.Self4");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Self4 based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Immutable</li>
   *     <li>NaturalKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param key1 
   * @param key2 
   * @return a Self4 NaturalKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSelf4PrimaryKey(java.lang.Long key1, java.lang.Long key2)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track generated inputs for nullity.
    boolean noNulls = true;
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    if (key1 != null && noNulls) {
      list.add(new com.poesys.db.col.LongColumnValue("key1", key1));
    } else {
      noNulls = false;
    }
    if (key2 != null && noNulls) {
      list.add(new com.poesys.db.col.LongColumnValue("key2", key2));
    } else {
      noNulls = false;
    }
    if (noNulls) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.Self4");
    }
    return key;
  }

  /**
   * Retrieve the TestSequenceKey data from the result set's current row and create
   * a TestSequenceKey object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TestSequenceKey instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITestSequenceKey getTestSequenceKeyData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument testSequenceKeyId gets the JDBC value with a function call.
    java.math.BigInteger testSequenceKeyIdValue = rs.getBigDecimal("testSequenceKeyId") == null ? null : rs.getBigDecimal("testSequenceKeyId").toBigInteger();;
    // Constructor argument data1 gets the JDBC value with a function call.
    java.lang.String data1Value = rs.getString("data1");
    // TestSequenceKey has no lazily loaded members, so there is no need for Proxy.
    ITestSequenceKey newObject = 
      new TestSequenceKey(key, testSequenceKeyIdValue, data1Value);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TestSequenceKey based on a result set that must contain
   * the TestSequenceKey primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TestSequenceKey SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestSequenceKeyPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger testSequenceKeyIdValue = rs.getBigDecimal("testSequenceKeyId") == null ? null : rs.getBigDecimal("testSequenceKeyId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "testSequenceKeyId", testSequenceKeyIdValue, "com.poesys.db.memcached_test.TestSequenceKey");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TestSequenceKey based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param testSequenceKeyId primary key attribute
   * @return a TestSequenceKey SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestSequenceKeyPrimaryKey(java.math.BigInteger testSequenceKeyId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (testSequenceKeyId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("testSequenceKeyId", testSequenceKeyId, "com.poesys.db.memcached_test.TestSequenceKey");
    }
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TairObject based on a result set that must contain
   * the TairObject primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * TairObject is abstract; only the getPrimaryKey method for a concrete
   * subclass may call this method to get the primary key from its superclass.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>IdentityKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TairObject IdentityKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTairObjectPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger tairObjectIdValue = rs.getBigDecimal("tairObjectId") == null ? null : rs.getBigDecimal("tairObjectId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createIdentityKey(prefix + "tairObjectId", tairObjectIdValue, "com.poesys.db.memcached_test.TairObject");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TairObject based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * TairObject is abstract; only the getPrimaryKey method for a concrete
   * subclass may call this method to get the primary key from its superclass.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>IdentityKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param tairObjectId primary key attribute
   * @return a TairObject IdentityKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTairObjectPrimaryKey(java.math.BigInteger tairObjectId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Always create a key.
      key = com.poesys.db.pk.PrimaryKeyFactory.createIdentityKey("tairObjectId", tairObjectId, "com.poesys.db.memcached_test.TairObject");
    return key;
  }

  /**
   * Retrieve the Self2 data from the result set's current row and create
   * a Self2 object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a Self2 instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ISelf2 getSelf2Data(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument self2Id gets the JDBC value with a function call.
    java.math.BigInteger self2IdValue = rs.getBigDecimal("self2Id") == null ? null : rs.getBigDecimal("self2Id").toBigInteger();;
    // Self2 has no lazily loaded members, so there is no need for Proxy.
    ISelf2 newObject = 
      new Self2(key, self2IdValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Self2 based on a result set that must contain
   * the Self2 primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Self2 SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSelf2PrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger self2IdValue = rs.getBigDecimal("self2Id") == null ? null : rs.getBigDecimal("self2Id").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "self2Id", self2IdValue, "com.poesys.db.memcached_test.Self2");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Self2 based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param self2Id primary key attribute
   * @return a Self2 SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSelf2PrimaryKey(java.math.BigInteger self2Id)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (self2Id != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("self2Id", self2Id, "com.poesys.db.memcached_test.Self2");
    }
    return key;
  }

  /**
   * Retrieve the TestNaturalParent data from the result set's current row and create
   * a TestNaturalParent object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TestNaturalParent instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITestNaturalParent getTestNaturalParentData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument key1 gets the JDBC value with a function call.
    java.lang.Long key1Value = rs.getLong("key1");
    // Constructor argument key2 gets the JDBC value with a function call.
    java.lang.Long key2Value = rs.getLong("key2");
    // TestNaturalParent has no lazily loaded members, so there is no need for Proxy.
    ITestNaturalParent newObject = 
      new TestNaturalParent(key, key1Value, key2Value);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TestNaturalParent based on a result set that must contain
   * the TestNaturalParent primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Immutable</li>
   *     <li>NaturalKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TestNaturalParent NaturalKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestNaturalParentPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.Long key1Value = rs.getLong("key1");

    list.add(new com.poesys.db.col.LongColumnValue(prefix + "key1", key1Value));
    java.lang.Long key2Value = rs.getLong("key2");

    list.add(new com.poesys.db.col.LongColumnValue(prefix + "key2", key2Value));
    key = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestNaturalParent");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TestNaturalParent based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Immutable</li>
   *     <li>NaturalKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param key1 
   * @param key2 
   * @return a TestNaturalParent NaturalKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestNaturalParentPrimaryKey(java.lang.Long key1, java.lang.Long key2)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track generated inputs for nullity.
    boolean noNulls = true;
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    if (key1 != null && noNulls) {
      list.add(new com.poesys.db.col.LongColumnValue("key1", key1));
    } else {
      noNulls = false;
    }
    if (key2 != null && noNulls) {
      list.add(new com.poesys.db.col.LongColumnValue("key2", key2));
    } else {
      noNulls = false;
    }
    if (noNulls) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestNaturalParent");
    }
    return key;
  }

  /**
   * Retrieve the TestChild2TestChild data from the result set's current row and create
   * a TestChild2TestChild object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TestChild2TestChild instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITestChild2TestChild getTestChild2TestChildData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.db.memcached_test.ITestChild downObject = null;
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.db.memcached_test.ITestChild upObject = null;
    // Constructor argument downChildNo gets the JDBC value with a function call.
    java.math.BigInteger downChildNoValue = rs.getBigDecimal("downChildNo") == null ? null : rs.getBigDecimal("downChildNo").toBigInteger();;
    // Constructor argument upChildNo gets the JDBC value with a function call.
    java.math.BigInteger upChildNoValue = rs.getBigDecimal("upChildNo") == null ? null : rs.getBigDecimal("upChildNo").toBigInteger();;
    // Constructor argument downTestParentId gets the JDBC value with a function call.
    java.math.BigInteger downTestParentIdValue = rs.getBigDecimal("downTestParentId") == null ? null : rs.getBigDecimal("downTestParentId").toBigInteger();;
    // Constructor argument upTestParentId gets the JDBC value with a function call.
    java.math.BigInteger upTestParentIdValue = rs.getBigDecimal("upTestParentId") == null ? null : rs.getBigDecimal("upTestParentId").toBigInteger();;
    // TestChild2TestChild has no lazily loaded members, so there is no need for Proxy.
    ITestChild2TestChild newObject = 
      new TestChild2TestChild(key, downObject, upObject, downChildNoValue, upChildNoValue, downTestParentIdValue, upTestParentIdValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TestChild2TestChild based on a result set that must contain
   * the TestChild2TestChild primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>AssociationKey</li>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TestChild2TestChild AssociationKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestChild2TestChildPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
    // Associated key type CompositeKey
    IPrimaryKey downKey = getTestParentPrimaryKey(rs, prefix + "down");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> downKeys =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    // Property source: AddOrderedSubKeyProperties + getAssociatedKeys
    java.math.BigInteger downChildNoValue = rs.getBigDecimal("downChildNo") == null ? null : rs.getBigDecimal("downChildNo").toBigInteger();;
    
    downKeys.add(new com.poesys.db.col.BigIntegerColumnValue(prefix + "downChildNo", downChildNoValue));
    // Property source: AddGeneratedKeyProperties + AddParentKeyAttributes + getAssociatedKeys
    java.math.BigInteger downTestParentIdValue = rs.getBigDecimal("downTestParentId") == null ? null : rs.getBigDecimal("downTestParentId").toBigInteger();;
    
    downKeys.add(new com.poesys.db.col.BigIntegerColumnValue(prefix + "downTestParentId", downTestParentIdValue));
	IPrimaryKey downSubKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(downKeys, "com.poesys.db.memcached_test.TestChild2TestChild");
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(downKey, downSubKey, "com.poesys.db.memcached_test.TestChild2TestChild"));
    // Associated key type CompositeKey
    IPrimaryKey upKey = getTestParentPrimaryKey(rs, prefix + "up");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> upKeys =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    // Property source: AddOrderedSubKeyProperties + getAssociatedKeys
    java.math.BigInteger upChildNoValue = rs.getBigDecimal("upChildNo") == null ? null : rs.getBigDecimal("upChildNo").toBigInteger();;
    
    upKeys.add(new com.poesys.db.col.BigIntegerColumnValue(prefix + "upChildNo", upChildNoValue));
    // Property source: AddGeneratedKeyProperties + AddParentKeyAttributes + getAssociatedKeys
    java.math.BigInteger upTestParentIdValue = rs.getBigDecimal("upTestParentId") == null ? null : rs.getBigDecimal("upTestParentId").toBigInteger();;
    
    upKeys.add(new com.poesys.db.col.BigIntegerColumnValue(prefix + "upTestParentId", upTestParentIdValue));
	IPrimaryKey upSubKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(upKeys, "com.poesys.db.memcached_test.TestChild2TestChild");
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(upKey, upSubKey, "com.poesys.db.memcached_test.TestChild2TestChild"));
	key = com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "com.poesys.db.memcached_test.TestChild2TestChild");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TestChild2TestChild based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>AssociationKey</li>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param downChildNo Attribute that is part of the association key
   * @param upChildNo Attribute that is part of the association key
   * @param downTestParentId Attribute that is part of the association key
   * @param upTestParentId Attribute that is part of the association key
   * @return a TestChild2TestChild AssociationKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestChild2TestChildPrimaryKey(java.math.BigInteger downChildNo, java.math.BigInteger upChildNo, java.math.BigInteger downTestParentId, java.math.BigInteger upTestParentId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track whether any input keys are null.
    boolean noNulls = true;
    java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
    // Associated key: down with type CompositeKey
    IPrimaryKey downParentKey = getTestParentPrimaryKey(downTestParentId);
    if (downParentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> downTestParentList =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
	  IPrimaryKey downSubKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(downTestParentList, "com.poesys.db.memcached_test.TestChild2TestChild");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(downParentKey, downSubKey, "com.poesys.db.memcached_test.TestChild2TestChild");
    } else {
      noNulls = false;
    }
    // Associated key: up with type CompositeKey
    IPrimaryKey upParentKey = getTestParentPrimaryKey(upTestParentId);
    if (upParentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> upTestParentList =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
	  IPrimaryKey upSubKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(upTestParentList, "com.poesys.db.memcached_test.TestChild2TestChild");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(upParentKey, upSubKey, "com.poesys.db.memcached_test.TestChild2TestChild");
    } else {
      noNulls = false;
    }
    if (noNulls) {
	  key = com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "com.poesys.db.memcached_test.TestChild2TestChild");
	}
    return key;
  }

  /**
   * Retrieve the TestNaturalChild data from the result set's current row and create
   * a TestNaturalChild object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TestNaturalChild instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITestNaturalChild getTestNaturalChildData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument key1 gets the JDBC value with a function call.
    java.lang.Long key1Value = rs.getLong("key1");
    // Constructor argument key2 gets the JDBC value with a function call.
    java.lang.Long key2Value = rs.getLong("key2");
    // Constructor argument subkey gets the JDBC value with a function call.
    java.lang.Long subkeyValue = rs.getLong("subkey");
    // TestNaturalChild has no lazily loaded members, so there is no need for Proxy.
    ITestNaturalChild newObject = 
      new TestNaturalChild(key, key1Value, key2Value, subkeyValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TestNaturalChild based on a result set that must contain
   * the TestNaturalChild primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TestNaturalChild CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestNaturalChildPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getTestNaturalParentPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.Long subkeyValue = rs.getLong("subkey");
    list.add(new com.poesys.db.col.LongColumnValue(prefix + "subkey", subkeyValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestNaturalChild");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "com.poesys.db.memcached_test.TestNaturalChild");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TestNaturalChild based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Immutable</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param key1 composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param key2 composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param subkey 
   * @return a TestNaturalChild CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestNaturalChildPrimaryKey(java.lang.Long key1, java.lang.Long key2, java.lang.Long subkey)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getTestNaturalParentPrimaryKey(key1, key2);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.LongColumnValue("subkey", subkey));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestNaturalChild");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "com.poesys.db.memcached_test.TestNaturalChild");
    }
    return key;
  }

  /**
   * Retrieve the TestY data from the result set's current row and create
   * a TestY object.
   * 
   * @param key the primary key for the Memcached_test
   * @param rs the query result set
   * @return a TestY instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITestY getTestYData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument testYId gets the JDBC value with a function call.
    java.math.BigInteger testYIdValue = rs.getBigDecimal("testYId") == null ? null : rs.getBigDecimal("testYId").toBigInteger();;
    // Constructor argument yAttr gets the JDBC value with a function call.
    java.lang.String yAttrValue = rs.getString("yAttr");
    // TestY has no lazily loaded members, so there is no need for Proxy.
    ITestY newObject = 
      new TestY(key, testYIdValue, yAttrValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a TestY based on a result set that must contain
   * the TestY primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a TestY SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestYPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger testYIdValue = rs.getBigDecimal("testYId") == null ? null : rs.getBigDecimal("testYId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "testYId", testYIdValue, "com.poesys.db.memcached_test.TestY");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a TestY based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param testYId primary key attribute
   * @return a TestY SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTestYPrimaryKey(java.math.BigInteger testYId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (testYId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("testYId", testYId, "com.poesys.db.memcached_test.TestY");
    }
    return key;
  }

}