/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractQueryAssociatedManyToManyObjects.vsl


package com.poesys.db.memcached_test.sql;


import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.ConstraintViolationException;
import com.poesys.db.InvalidParametersException;
import com.poesys.db.dao.query.IParameterizedQuerySql;
import com.poesys.db.pk.IPrimaryKey;



/**
 * <p>
 * A query Command pattern object that implements a SQL query of a collection of 
 * Map objects using the primary key of an associated 
 * Poly object through the association Maps using the 
 * association class MapElement. This association is a many-to-many 
 * association from Map to Poly.
 * </p>
 * <p>
 * This SQL specification contains a SQL statement that queries a collection of
 * Map objects from the database table Map by
 * joining to the database table MapElement and using the 
 * primary key from Poly to query the collection.
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractQueryMapsByPoly 
    implements IParameterizedQuerySql<com.poesys.db.memcached_test.IMap, com.poesys.db.memcached_test.IPoly> {
  /** SQL query statement for Map */
  private static final String SQL =
    "SELECT a.mapId, a.location FROM Map a JOIN MapElement b ON a.mapId = b.mapId WHERE b.polyId = ?";

  public void bindParameters(PreparedStatement stmt, com.poesys.db.memcached_test.IPoly parameters)
      throws SQLException {
    // Set the parameters starting with the first parameter.
    parameters.getPrimaryKey().setParams(stmt, 1);
  }

  public String getParameterValues(com.poesys.db.memcached_test.IPoly parameters) {
    // Create the output string with the key parameters.
    return parameters.getPrimaryKey().getValueList();
  }

  public com.poesys.db.memcached_test.IMap getData(ResultSet rs) 
      throws SQLException, ConstraintViolationException {
    IPrimaryKey key = 
      com.poesys.db.memcached_test.Memcached_testFactory.getMapPrimaryKey(rs, "");
    return com.poesys.db.memcached_test.Memcached_testFactory.getMapData(key, rs);
  }

  public IPrimaryKey getPrimaryKey(ResultSet rs) throws SQLException,
      InvalidParametersException {
    return com.poesys.db.memcached_test.Memcached_testFactory.getMapPrimaryKey(rs, "");
  }

  public String getSql() {
    return SQL;
  }
}