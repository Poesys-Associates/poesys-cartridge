/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.db.test;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the Self2. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Immutable</li>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractSelf2 extends AbstractDto implements ISelf2 {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested parents2
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryParents2BySelf2
   */
  private class QueryParents2Setter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.test.ISelf2, ISelf2, java.util.Collection<com.poesys.db.test.ISelf2>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryParents2Setter object.
     */
    public QueryParents2Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self2.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ISelf2 getParametersDto() {
      return AbstractSelf2.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.test.ISelf2, ISelf2> getSql() {
      return new com.poesys.db.test.sql.QueryParents2BySelf2();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ISelf2> list) {
      // No status change; this is just filling in the object data.
      parents2 = list;
      // Add the primary keys to the serialized key list if there are any.
      if (parents2 != null) {
        for (com.poesys.db.dto.IDbDto object : parents2) {
          parents2Keys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated parents2 list is not null
      return parents2 != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested parents2 collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QuerySelf2
   */
  private class ReadParents2Setter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ISelf2> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadParents2Setter object to read the parents2 collection.
     */
    public ReadParents2Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self2.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ISelf2> getObjectCollection() {
      return parents2;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return parents2Keys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ISelf2> getSql() {
      return new com.poesys.db.test.sql.QuerySelf2();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ISelf2> collection) {
     parents2 = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association parents2.
   *
   * @see com.poesys.db.test.sql.InsertSelf2
   */
  private class InsertParents2Setter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association parents2 source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertParents2Setter object.
     */
    public InsertParents2Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self2.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = parents2;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added parents2, updated parents2, and 
   * deleted parents2. 
   */
   
  /**
   * Query setter for querying nested children2
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryChildren2BySelf2
   */
  private class QueryChildren2Setter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.test.ISelf2, ISelf2, java.util.Collection<com.poesys.db.test.ISelf2>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryChildren2Setter object.
     */
    public QueryChildren2Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self2.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ISelf2 getParametersDto() {
      return AbstractSelf2.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.test.ISelf2, ISelf2> getSql() {
      return new com.poesys.db.test.sql.QueryChildren2BySelf2();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ISelf2> list) {
      // No status change; this is just filling in the object data.
      children2 = list;
      // Add the primary keys to the serialized key list if there are any.
      if (children2 != null) {
        for (com.poesys.db.dto.IDbDto object : children2) {
          children2Keys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated children2 list is not null
      return children2 != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested children2 collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QuerySelf2
   */
  private class ReadChildren2Setter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ISelf2> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadChildren2Setter object to read the children2 collection.
     */
    public ReadChildren2Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self2.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ISelf2> getObjectCollection() {
      return children2;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return children2Keys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ISelf2> getSql() {
      return new com.poesys.db.test.sql.QuerySelf2();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ISelf2> collection) {
     children2 = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association children2.
   *
   * @see com.poesys.db.test.sql.InsertSelf2
   */
  private class InsertChildren2Setter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association children2 source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertChildren2Setter object.
     */
    public InsertChildren2Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self2.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = children2;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added children2, updated children2, and 
   * deleted children2. 
   */
   
  /**
   * Query setter for querying nested parents2Self2SelfLinks
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryParents2Self2SelfLinksBySelf2
   */
  private class QueryParents2Self2SelfLinksSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.test.ISelf2Self, ISelf2, java.util.Collection<com.poesys.db.test.ISelf2Self>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryParents2Self2SelfLinksSetter object.
     */
    public QueryParents2Self2SelfLinksSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self2Self.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ISelf2 getParametersDto() {
      return AbstractSelf2.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.test.ISelf2Self, ISelf2> getSql() {
      return new com.poesys.db.test.sql.QueryParents2Self2SelfLinksBySelf2();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ISelf2Self> list) {
      // No status change; this is just filling in the object data.
      parents2Self2SelfLinks = list;
      // Add the primary keys to the serialized key list if there are any.
      if (parents2Self2SelfLinks != null) {
        for (com.poesys.db.dto.IDbDto object : parents2Self2SelfLinks) {
          parents2Self2SelfLinksKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated parents2Self2SelfLinks list is not null
      return parents2Self2SelfLinks != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested parents2Self2SelfLinks collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.test.sql.QuerySelf2Self
   */
  private class ReadParents2Self2SelfLinksSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ISelf2Self> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadParents2Self2SelfLinksSetter object to read the parents2Self2SelfLinks collection.
     */
    public ReadParents2Self2SelfLinksSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self2Self.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ISelf2Self> getObjectCollection() {
      return parents2Self2SelfLinks;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return parents2Self2SelfLinksKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ISelf2Self> getSql() {
      return new com.poesys.db.test.sql.QuerySelf2Self();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ISelf2Self> collection) {
     parents2Self2SelfLinks = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association parents2Self2SelfLinks.
   *
   * @see com.poesys.db.test.sql.InsertSelf2Self
   */
  private class InsertParents2Self2SelfLinksSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association parents2Self2SelfLinks source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertParents2Self2SelfLinksSetter object.
     */
    public InsertParents2Self2SelfLinksSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self2Self.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = parents2Self2SelfLinks;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added parents2Self2SelfLinks and updated parents2Self2SelfLinks.
   * Deleted parents2Self2SelfLinks are deleted in the database cascade delete.
   */
   
  /**
   * Query setter for querying nested children2Self2SelfLinks
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryChildren2Self2SelfLinksBySelf2
   */
  private class QueryChildren2Self2SelfLinksSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.test.ISelf2Self, ISelf2, java.util.Collection<com.poesys.db.test.ISelf2Self>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryChildren2Self2SelfLinksSetter object.
     */
    public QueryChildren2Self2SelfLinksSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self2Self.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ISelf2 getParametersDto() {
      return AbstractSelf2.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.test.ISelf2Self, ISelf2> getSql() {
      return new com.poesys.db.test.sql.QueryChildren2Self2SelfLinksBySelf2();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ISelf2Self> list) {
      // No status change; this is just filling in the object data.
      children2Self2SelfLinks = list;
      // Add the primary keys to the serialized key list if there are any.
      if (children2Self2SelfLinks != null) {
        for (com.poesys.db.dto.IDbDto object : children2Self2SelfLinks) {
          children2Self2SelfLinksKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated children2Self2SelfLinks list is not null
      return children2Self2SelfLinks != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested children2Self2SelfLinks collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.test.sql.QuerySelf2Self
   */
  private class ReadChildren2Self2SelfLinksSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ISelf2Self> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadChildren2Self2SelfLinksSetter object to read the children2Self2SelfLinks collection.
     */
    public ReadChildren2Self2SelfLinksSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self2Self.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ISelf2Self> getObjectCollection() {
      return children2Self2SelfLinks;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return children2Self2SelfLinksKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ISelf2Self> getSql() {
      return new com.poesys.db.test.sql.QuerySelf2Self();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ISelf2Self> collection) {
     children2Self2SelfLinks = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association children2Self2SelfLinks.
   *
   * @see com.poesys.db.test.sql.InsertSelf2Self
   */
  private class InsertChildren2Self2SelfLinksSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association children2Self2SelfLinks source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertChildren2Self2SelfLinksSetter object.
     */
    public InsertChildren2Self2SelfLinksSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self2Self.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = children2Self2SelfLinks;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added children2Self2SelfLinks and updated children2Self2SelfLinks.
   * Deleted children2Self2SelfLinks are deleted in the database cascade delete.
   */
   
  /**
   * Create an empty Self2 for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractSelf2() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the parents2 property.
    querySetters.add(new QueryParents2Setter());
    readObjectSetters.add(new ReadParents2Setter());
    insertSetters.add(new InsertParents2Setter());
    
    // Add the many-to-many collection setters for the children2 property.
    querySetters.add(new QueryChildren2Setter());
    readObjectSetters.add(new ReadChildren2Setter());
    insertSetters.add(new InsertChildren2Setter());
    
    // Add the many-to-many collection setters for the parents2Self2SelfLinks property.
    querySetters.add(new QueryParents2Self2SelfLinksSetter());
    readObjectSetters.add(new ReadParents2Self2SelfLinksSetter());
    insertSetters.add(new InsertParents2Self2SelfLinksSetter());
    
    // Add the many-to-many collection setters for the children2Self2SelfLinks property.
    querySetters.add(new QueryChildren2Self2SelfLinksSetter());
    readObjectSetters.add(new ReadChildren2Self2SelfLinksSetter());
    insertSetters.add(new InsertChildren2Self2SelfLinksSetter());
  }

  /**
   * Create a Self2. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Self2
   * @param self2Id primary key attribute
   */
  public AbstractSelf2(IPrimaryKey key, java.math.BigInteger self2Id) {
    this.key = key;

    this.self2Id = self2Id;

    if (self2Id == null) {
      throw new com.poesys.db.InvalidParametersException("self2Id is required for " + key.getValueList());
    }
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the parents2 property.
    querySetters.add(new QueryParents2Setter());
    readObjectSetters.add(new ReadParents2Setter());
    insertSetters.add(new InsertParents2Setter());
    
    // Add the many-to-many collection setters for the children2 property.
    querySetters.add(new QueryChildren2Setter());
    readObjectSetters.add(new ReadChildren2Setter());
    insertSetters.add(new InsertChildren2Setter());
    
    // Add the many-to-many collection setters for the parents2Self2SelfLinks property.
    querySetters.add(new QueryParents2Self2SelfLinksSetter());
    readObjectSetters.add(new ReadParents2Self2SelfLinksSetter());
    insertSetters.add(new InsertParents2Self2SelfLinksSetter());
    
    // Add the many-to-many collection setters for the children2Self2SelfLinks property.
    querySetters.add(new QueryChildren2Self2SelfLinksSetter());
    readObjectSetters.add(new ReadChildren2Self2SelfLinksSetter());
    insertSetters.add(new InsertChildren2Self2SelfLinksSetter());
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractSelf2 other = (AbstractSelf2)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractSelf2 other = (AbstractSelf2)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.db.test";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (parents2Self2SelfLinks != null) {
      for (com.poesys.db.dto.IDbDto dto : parents2Self2SelfLinks) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (children2Self2SelfLinks != null) {
      for (com.poesys.db.dto.IDbDto dto : children2Self2SelfLinks) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("com.poesys.db.test");
    String subsystem =
      "com.poesys.db.test"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property self2Id
   *
   * <p>
   * Primary key attribute
   * </p>
   *
   * Added by AddGeneratedKeyProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger self2Id;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getSelf2Id() {
    return self2Id;
  }

  /**
   * Clear the self2Id data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSelf2Id() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property parents2
   *
   * <p>
   * parent self2
   * </p>
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.test.ISelf2> parents2;
  // Ordered list of keys of the objects in the parents2 list
  java.util.List<com.poesys.db.pk.IPrimaryKey> parents2Keys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.test.ISelf2.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.test.ISelf2>
   */

  public java.util.Collection<com.poesys.db.test.ISelf2> getParents2() {
    return parents2;
  }

  /**
   * Clear the parents2 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearParents2() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property children2
   *
   * <p>
   * child self2
   * </p>
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.test.ISelf2> children2;
  // Ordered list of keys of the objects in the children2 list
  java.util.List<com.poesys.db.pk.IPrimaryKey> children2Keys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.test.ISelf2.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.test.ISelf2>
   */

  public java.util.Collection<com.poesys.db.test.ISelf2> getChildren2() {
    return children2;
  }

  /**
   * Clear the children2 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearChildren2() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property parents2Self2SelfLinks
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.test.ISelf2Self> parents2Self2SelfLinks;
  // Ordered list of keys of the objects in the parents2Self2SelfLinks list
  java.util.List<com.poesys.db.pk.IPrimaryKey> parents2Self2SelfLinksKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.test.ISelf2Self.
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.test.ISelf2Self>
   */

  public java.util.Collection<com.poesys.db.test.ISelf2Self> getParents2Self2SelfLinks() {
    return parents2Self2SelfLinks;
  }

  /**
   * Clear the parents2Self2SelfLinks data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearParents2Self2SelfLinks() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property children2Self2SelfLinks
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.test.ISelf2Self> children2Self2SelfLinks;
  // Ordered list of keys of the objects in the children2Self2SelfLinks list
  java.util.List<com.poesys.db.pk.IPrimaryKey> children2Self2SelfLinksKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.test.ISelf2Self.
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.test.ISelf2Self>
   */

  public java.util.Collection<com.poesys.db.test.ISelf2Self> getChildren2Self2SelfLinks() {
    return children2Self2SelfLinks;
  }

  /**
   * Clear the children2Self2SelfLinks data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearChildren2Self2SelfLinks() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up parents2Self2SelfLinks.
    if (subject != null && subject instanceof com.poesys.db.test.ISelf2Self && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        parents2Self2SelfLinks != null) {
      // Delete to-many parents2Self2SelfLinks child from collection
      parents2Self2SelfLinks.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up children2Self2SelfLinks.
    if (subject != null && subject instanceof com.poesys.db.test.ISelf2Self && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        children2Self2SelfLinks != null) {
      // Delete to-many children2Self2SelfLinks child from collection
      children2Self2SelfLinks.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Cascade delete to parents2Self2SelfLinks.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        parents2Self2SelfLinks != null) {
      // Mark parents2Self2SelfLinks association object cascade-deleted.
      outer: for (com.poesys.db.test.ISelf2Self value : parents2Self2SelfLinks) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }

    // Cascade delete to children2Self2SelfLinks.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        children2Self2SelfLinks != null) {
      // Mark children2Self2SelfLinks association object cascade-deleted.
      outer: for (com.poesys.db.test.ISelf2Self value : children2Self2SelfLinks) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }
  }

  /**
   * Create the inserters for the Self2 and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.db.test.ISelf2> self2Factory =
      manager.getFactory("com.poesys.db.test.Self2",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<ISelf2> sql =
      new com.poesys.db.test.sql.InsertSelf2();
    com.poesys.db.dao.insert.IInsert<ISelf2> inserter =
      self2Factory.getInsert(sql, true);
    inserters.add(inserter);
  }
}