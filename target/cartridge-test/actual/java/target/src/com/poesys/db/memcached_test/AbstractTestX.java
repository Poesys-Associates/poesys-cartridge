/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.db.memcached_test;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the TestX. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The TestX object is the "this" side of a many-to-many association.
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTestX extends AbstractDto implements ITestX {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
  // Setter strategy nested classes for multiple-object associations


  /**
   * Insert setter for inserting nested to-many association y.
   *
   * @see com.poesys.db.memcached_test.sql.InsertTestY
   */
  private class InsertYsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association ys source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertYsSetter object.
     */
    public InsertYsSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestY.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = ys;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added y, updated y, and 
   * deleted y. 
   */
   
  private class UpdateYsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<com.poesys.db.memcached_test.ITestY, java.util.Collection<com.poesys.db.memcached_test.ITestY>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateYsSetter object.
     */
    public UpdateYsSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<com.poesys.db.memcached_test.ITestY> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // ys source: TransformToProperty + AddToManyAssociationCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestY> factory = 
        manager.getFactory(com.poesys.db.memcached_test.TestY.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<com.poesys.db.memcached_test.ITestY> updater =
        factory.getUpdateBatch(new com.poesys.db.memcached_test.sql.UpdateTestY());

      // Update the object of the current class.
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<com.poesys.db.memcached_test.ITestY> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestY> factory = 
        manager.getFactory(com.poesys.db.memcached_test.TestY.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<com.poesys.db.memcached_test.ITestY> dao = 
        factory.getDeleteBatch(new com.poesys.db.memcached_test.sql.DeleteTestY());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<com.poesys.db.memcached_test.ITestY> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestY> factory = 
        manager.getFactory(com.poesys.db.memcached_test.TestY.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<com.poesys.db.memcached_test.ITestY> inserter =
        factory.getInsertBatch(new com.poesys.db.memcached_test.sql.InsertTestY());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.ITestY> getDtos() {
      return ys;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestY.class.getName();
    }
  }

  /**
   * Add com.poesys.db.memcached_test.ITestY object to ys collection.
   * 
   * @param object the com.poesys.db.memcached_test.ITestY object
   */
  public void addYsTestY(com.poesys.db.memcached_test.ITestY object) {
    if (ys == null) {
      // Association not yet created, create it.
      ys = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.memcached_test.ITestY>();
    }
    ys.add(object);
    // Add the primary key to the primary key array.
    yKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested zs
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryZsByTestX
   */
  private class QueryZsSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.memcached_test.ITestZ, ITestX, java.util.Collection<com.poesys.db.memcached_test.ITestZ>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryZsSetter object.
     */
    public QueryZsSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestZ.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITestX getParametersDto() {
      return AbstractTestX.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.memcached_test.ITestZ, ITestX> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryZsByTestX();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestZ> list) {
      // No status change; this is just filling in the object data.
      zs = list;
      // Add the primary keys to the serialized key list if there are any.
      if (zs != null) {
        for (com.poesys.db.dto.IDbDto object : zs) {
          zsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated zs list is not null
      return zs != null;
    }
  }

  /**
   * Insert setter for inserting nested to-many association zs.
   *
   * @see com.poesys.db.memcached_test.sql.InsertTestZ
   */
  private class InsertZsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association zs source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertZsSetter object.
     */
    public InsertZsSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestZ.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = zs;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added zs and updated zs.
   * Deleted zs are deleted in the database cascade delete.
   */
   
  private class UpdateZsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<com.poesys.db.memcached_test.ITestZ, java.util.Collection<com.poesys.db.memcached_test.ITestZ>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateZsSetter object.
     */
    public UpdateZsSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<com.poesys.db.memcached_test.ITestZ> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // zs source: AddAssociationClassCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestZ> factory = 
        manager.getFactory(com.poesys.db.memcached_test.TestZ.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<com.poesys.db.memcached_test.ITestZ> updater =
        factory.getUpdateBatch(new com.poesys.db.memcached_test.sql.UpdateTestZ());

      // Update the object of the current class.
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<com.poesys.db.memcached_test.ITestZ> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestZ> factory = 
        manager.getFactory(com.poesys.db.memcached_test.TestZ.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<com.poesys.db.memcached_test.ITestZ> dao = 
        factory.getDeleteBatch(new com.poesys.db.memcached_test.sql.DeleteTestZ());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<com.poesys.db.memcached_test.ITestZ> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestZ> factory = 
        manager.getFactory(com.poesys.db.memcached_test.TestZ.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<com.poesys.db.memcached_test.ITestZ> inserter =
        factory.getInsertBatch(new com.poesys.db.memcached_test.sql.InsertTestZ());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.ITestZ> getDtos() {
      return zs;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestZ.class.getName();
    }
  }

  /**
   * Add com.poesys.db.memcached_test.ITestZ object to zs collection.
   * 
   * @param object the com.poesys.db.memcached_test.ITestZ object
   */
  public void addZsTestZ(com.poesys.db.memcached_test.ITestZ object) {
    if (zs == null) {
      // Association not yet created, create it.
      zs = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.memcached_test.ITestZ>();
    }
    zs.add(object);
    // Add the primary key to the primary key array.
    zsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Create an empty TestX for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractTestX() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the ys property.
    insertSetters.add(new InsertYsSetter());
    postSetters.add(new UpdateYsSetter());
    
    // Add the many-to-many collection setters for the zs property.
    querySetters.add(new QueryZsSetter());
    insertSetters.add(new InsertZsSetter());
    postSetters.add(new UpdateZsSetter());
  }

  /**
   * Create a TestX. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the TestX
   * @param testXId primary key attribute
   * @param xAttr 
   */
  public AbstractTestX(IPrimaryKey key, java.math.BigInteger testXId, java.lang.String xAttr) {
    this.key = key;

    this.testXId = testXId;

    if (testXId == null) {
      throw new com.poesys.db.InvalidParametersException("testXId is required for " + key.getValueList());
    }
    
    this.xAttr = xAttr;

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the y property.
    insertSetters.add(new InsertYsSetter());
    postSetters.add(new UpdateYsSetter());
    
    // Add the many-to-many collection setters for the zs property.
    querySetters.add(new QueryZsSetter());
    insertSetters.add(new InsertZsSetter());
    postSetters.add(new UpdateZsSetter());
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractTestX other = (AbstractTestX)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractTestX other = (AbstractTestX)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.db.memcached_test";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (zs != null) {
      for (com.poesys.db.dto.IDbDto dto : zs) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("com.poesys.db.memcached_test");
    String subsystem =
      "com.poesys.db.memcached_test"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property testXId
   *
   * <p>
   * Primary key attribute
   * </p>
   *
   * Added by AddGeneratedKeyProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger testXId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTestXId() {
    return testXId;
  }

  /**
   * Clear the testXId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTestXId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property xAttr
   *
   * 
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String xAttr;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getXAttr() {
    return xAttr;
  }

  /**
   * Clear the xAttr data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearXAttr() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the xAttr.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param xAttr the value with which to set the property
   */
  public  void setXAttr(java.lang.String xAttr) {
    this.xAttr = xAttr;
    setChanged();
  }
  /**
   * Nested property ys
   *
   * 
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.memcached_test.ITestY> ys;
  // Ordered list of keys of the objects in the ys list
  java.util.List<com.poesys.db.pk.IPrimaryKey> yKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.memcached_test.ITestY.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.ITestY>
   * @throws java.sql.SQLException when there is a database problem
   */

  public java.util.Collection<com.poesys.db.memcached_test.ITestY> getYs() throws java.sql.SQLException {
    return ys;
  }

  /**
   * Clear the ys data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearYs() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the ys.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: true (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param ys the value with which to set the property
   */
  public  void setY(java.util.Collection<com.poesys.db.memcached_test.ITestY> ys) {
    this.ys = ys;
    // Add the primary keys of the new collection to the serialized key list.
    yKeys.clear();
    if (ys != null) {
      for (com.poesys.db.dto.IDbDto object : ys) {
        yKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property zs
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.memcached_test.ITestZ> zs;
  // Ordered list of keys of the objects in the zs list
  java.util.List<com.poesys.db.pk.IPrimaryKey> zsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.memcached_test.ITestZ.
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.ITestZ>
   */

  public java.util.Collection<com.poesys.db.memcached_test.ITestZ> getZs() {
    return zs;
  }

  /**
   * Clear the zs data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearZs() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the zs.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * @param zs the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input zs is null
   */
  public void setZs(java.util.Collection<com.poesys.db.memcached_test.ITestZ> zs)
      throws com.poesys.db.InvalidParametersException {
    if (zs == null) {
      throw new com.poesys.db.InvalidParametersException("zs is required");
    }
    
    this.zs = zs;
    // Add the primary keys of the new collection to the serialized key list.
    zsKeys.clear();
    if (zs != null) {
      for (com.poesys.db.dto.IDbDto object : zs) {
        zsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up zs.
    if (subject != null && subject instanceof com.poesys.db.memcached_test.ITestZ && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        zs != null) {
      // Delete to-many zs child from collection
      zs.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Cascade delete to zs.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        zs != null) {
      // Mark zs association object cascade-deleted.
      outer: for (com.poesys.db.memcached_test.ITestZ value : zs) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }
  }

  /**
   * Create the inserters for the TestX and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestX> testXFactory =
      manager.getFactory("com.poesys.db.memcached_test.TestX",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<ITestX> sql =
      new com.poesys.db.memcached_test.sql.InsertTestX();
    com.poesys.db.dao.insert.IInsert<ITestX> inserter =
      testXFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}