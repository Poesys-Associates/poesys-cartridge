/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package com.poesys.bs.memcached_test;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import com.poesys.db.memcached_test.ITestExplicitKeyChild;
import com.poesys.db.memcached_test.TestExplicitKeyChildProxy;
import com.poesys.db.memcached_test.TestExplicitKeyChild;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the TestExplicitKeyChild. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Immutable</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsTestExplicitKeyChild 
    extends AbstractDto<com.poesys.db.memcached_test.ITestExplicitKeyChild> {

  /**
   * Create a BsTestExplicitKeyChild object from a TestExplicitKeyChild object.
   * 
   * @param dto the data-access layer TestExplicitKeyChild DTO
   * @throws DelegateException when there is a problem creating the TestExplicitKeyChild
   */
  public AbstractBsTestExplicitKeyChild(ITestExplicitKeyChild dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a TestExplicitKeyChild from new data.
   *
   * @param key the primary key of the TestExplicitKeyChild
   * @param testParentId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param explicitSubId sub-key within TestParent to identify the object
   */
  public AbstractBsTestExplicitKeyChild(IPrimaryKey key, java.math.BigInteger testParentId, java.lang.Long explicitSubId) {
    super(new TestExplicitKeyChildProxy(new TestExplicitKeyChild(key, testParentId, explicitSubId)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ITestExplicitKeyChild> other = (IDto<ITestExplicitKeyChild>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ITestExplicitKeyChild> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object TestExplicitKeyChild</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger testParentId
   */
  public java.math.BigInteger getTestParentId() {
    return dto.getTestParentId();
  }

  /**
   * <p>
   * sub-key within TestParent to identify the object
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object TestExplicitKeyChild</li>
   * </ul>
   * </p>
   * @return a java.lang.Long explicitSubId
   */
  public java.lang.Long getExplicitSubId() {
    return dto.getExplicitSubId();
  }

  /**
   * <p>
   * The parent of all children with explicit keys
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestExplicitKeyChild</li>
   * </ul>
   * </p>
   * @return a com.poesys.bs.memcached_test.BsTestParent explicitParent
   */
  public com.poesys.bs.memcached_test.BsTestParent getExplicitParent() {
    // Return 4
    return new com.poesys.bs.memcached_test.BsTestParent(dto.getExplicitParent());
  }
}