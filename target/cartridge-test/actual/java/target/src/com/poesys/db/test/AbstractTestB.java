/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.db.test;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the TestB. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Immutable</li>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTestB extends AbstractDto implements ITestB {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the a association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryASetter extends com.poesys.db.dto.AbstractObjectSetter<com.poesys.db.test.ITestA> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryASetter object.
     */
    public QueryASetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestA.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return aKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ITestA> getSql() {
      return new com.poesys.db.test.sql.QueryTestA();
    }

    @Override
    protected void set(com.poesys.db.test.ITestA dto) {
      // No status change, this is just filling in the object data.
      a = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated a is not null
      return a != null;
    }
  }

  /**
   * Insert setter for inserting nested object property a.
   */
  private class InsertASetter 
      extends com.poesys.db.dto.AbstractInsertSetter {
    // Property a source: AddToOneAssociationRequiredObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create an InsertASetter object.
     */
    public InsertASetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestA.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.ArrayList<com.poesys.db.dto.IDbDto> array =
        new java.util.ArrayList<com.poesys.db.dto.IDbDto>(1);
      array.add(a);
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = array;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      // Key type: SequenceKey
      return true;
    }
  }

  /**
   * Setter for processing added a, updated a, and 
   * deleted a. 
   */
   
  private class UpdateASetter 
      extends com.poesys.db.dto.AbstractProcessNestedObject<com.poesys.db.test.ITestA> {
    private static final long serialVersionUID = 1L;

    /**
     * Create an UpdateASetter object.
     */
    public UpdateASetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, com.poesys.db.test.ITestA dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // a source: AddToOneAssociationRequiredObjectProperties
        // Immutable: true
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, com.poesys.db.test.ITestA dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.db.test.ITestA> factory = 
        manager.getFactory(com.poesys.db.test.TestA.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDelete<com.poesys.db.test.ITestA> dao = 
        factory.getDelete(new com.poesys.db.test.sql.DeleteTestA());
      dao.delete(connection, dto);
    }

    @Override
    protected void doNew(java.sql.Connection connection, com.poesys.db.test.ITestA dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.db.test.ITestA> factory = 
        manager.getFactory(com.poesys.db.test.TestA.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsert<com.poesys.db.test.ITestA> inserter =
        factory.getInsert(new com.poesys.db.test.sql.InsertTestA(), createKey());


      // Insert the superclass objects from the root down. Suppress nested
      // inserts for the superclasses, wait until the concrete class. Also set 
      // pre-insert suppression off to have the root insert linked, to-one class
      // objects.
      dto.setSuppressNestedInserts(true);
      dto.setSuppressNestedPreInserts(false);

      // Suppress inserts in concrete class.
      dto.setSuppressNestedPreInserts(true);
      
      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      dto.setSuppressNestedInserts(false);
      inserter.insert(connection, dto);
    }

    @Override
    protected com.poesys.db.test.ITestA getDto() {
      return a;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestA.class.getName();
    }

    @Override
    protected boolean createKey() {
      // Key type: SequenceKey
      return true;
    }
  }

  /**
   * Foreign key object used by QueryASetter nested class to query object
   */
  private IPrimaryKey aKey;
  
  /**
   * Set the foreign key aKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param aKey the foreign key
   */
  void setAKey(IPrimaryKey aKey) {
    this.aKey = aKey;
  }


  /**
   * Create an empty TestB for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractTestB() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the a property.
    querySetters.add(new QueryASetter());
    preSetters.add(new InsertASetter());
  }

  /**
   * Create a TestB. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the TestB
   * @param testBId primary key attribute
   * @param testAId foreign key used by setter to query associated object
   */
  public AbstractTestB(IPrimaryKey key, java.math.BigInteger testBId, java.math.BigInteger testAId) {
    this.key = key;

    this.testBId = testBId;

    if (testBId == null) {
      throw new com.poesys.db.InvalidParametersException("testBId is required for " + key.getValueList());
    }
    
    this.testAId = testAId;

    if (testAId == null) {
      throw new com.poesys.db.InvalidParametersException("testAId is required for " + key.getValueList());
    }
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the a property.
    querySetters.add(new QueryASetter());
    insertSetters.add(new InsertASetter());
    preSetters.add(new InsertASetter());
    
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractTestB other = (AbstractTestB)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractTestB other = (AbstractTestB)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.db.test";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("com.poesys.db.test");
    String subsystem =
      "com.poesys.db.test"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property testBId
   *
   * <p>
   * Primary key attribute
   * </p>
   *
   * Added by AddGeneratedKeyProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger testBId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTestBId() {
    return testBId;
  }

  /**
   * Clear the testBId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTestBId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property a
   *
   * 
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  private com.poesys.db.test.ITestA a;
  
  /**
   * Get an object of com.poesys.db.test.ITestA.
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   * 
   * @return a com.poesys.db.test.ITestA
   */

  public com.poesys.db.test.ITestA getA() {
    return a;
  }

  /**
   * Clear the a data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearA() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property testAId
   *
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddToOneAssociationAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger testAId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddToOneAssociationAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTestAId() {
    return testAId;
  }

  /**
   * Clear the testAId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTestAId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }

  /**
   * Create the inserters for the TestB and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.db.test.ITestB> testBFactory =
      manager.getFactory("com.poesys.db.test.TestB",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<ITestB> sql =
      new com.poesys.db.test.sql.InsertTestB();
    com.poesys.db.dao.insert.IInsert<ITestB> inserter =
      testBFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}