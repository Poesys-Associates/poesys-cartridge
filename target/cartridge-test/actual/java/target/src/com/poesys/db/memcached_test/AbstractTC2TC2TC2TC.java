/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.db.memcached_test;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the TC2TC2TC2TC. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Immutable</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTC2TC2TC2TC extends AbstractDto implements ITC2TC2TC2TC {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the tc2 association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryTc2Setter extends com.poesys.db.dto.AbstractObjectSetter<com.poesys.db.memcached_test.ITestChild2TestChild> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryTc2Setter object.
     */
    public QueryTc2Setter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild2TestChild.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return tc2Key;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestChild2TestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestChild2TestChild();
    }

    @Override
    protected void set(com.poesys.db.memcached_test.ITestChild2TestChild dto) {
      // No status change, this is just filling in the object data.
      tc2 = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated tc2TestChild2TestChild is not null
      return tc2 != null;
    }
  }


  /**
   * Foreign key object used by QueryTc2Setter nested class to query object
   */
  private IPrimaryKey tc2Key;
  
  /**
   * Set the foreign key tc2Key. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param tc2Key the foreign key
   */
  void setTc2Key(IPrimaryKey tc2Key) {
    this.tc2Key = tc2Key;
  }

  /**
   * Nested class that manages the tc1 association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryTc1Setter extends com.poesys.db.dto.AbstractObjectSetter<com.poesys.db.memcached_test.ITestChild2TestChild> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryTc1Setter object.
     */
    public QueryTc1Setter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild2TestChild.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return tc1Key;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestChild2TestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestChild2TestChild();
    }

    @Override
    protected void set(com.poesys.db.memcached_test.ITestChild2TestChild dto) {
      // No status change, this is just filling in the object data.
      tc1 = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated tc1TestChild2TestChild is not null
      return tc1 != null;
    }
  }


  /**
   * Foreign key object used by QueryTc1Setter nested class to query object
   */
  private IPrimaryKey tc1Key;
  
  /**
   * Set the foreign key tc1Key. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param tc1Key the foreign key
   */
  void setTc1Key(IPrimaryKey tc1Key) {
    this.tc1Key = tc1Key;
  }


  /**
   * Create an empty TC2TC2TC2TC for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractTC2TC2TC2TC() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the tc2TestChild2TestChild property.
    querySetters.add(new QueryTc2Setter());

    // Add the setters for the tc1TestChild2TestChild property.
    querySetters.add(new QueryTc1Setter());
  }

  /**
   * Create a TC2TC2TC2TC. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the TC2TC2TC2TC
   * @param tc1Object wraps an associated ITestChild2TestChild object
   * @param tc2Object wraps an associated ITestChild2TestChild object
   * @param tc1DownChildNo Attribute that is part of the association key
   * @param tc1UpChildNo Attribute that is part of the association key
   * @param tc2DownChildNo Attribute that is part of the association key
   * @param tc2UpChildNo Attribute that is part of the association key
   * @param tc1DownTestParentId Attribute that is part of the association key
   * @param tc1UpTestParentId Attribute that is part of the association key
   * @param tc2DownTestParentId Attribute that is part of the association key
   * @param tc2UpTestParentId Attribute that is part of the association key
   */
  public AbstractTC2TC2TC2TC(IPrimaryKey key, com.poesys.db.memcached_test.ITestChild2TestChild tc1Object, com.poesys.db.memcached_test.ITestChild2TestChild tc2Object, java.math.BigInteger tc1DownChildNo, java.math.BigInteger tc1UpChildNo, java.math.BigInteger tc2DownChildNo, java.math.BigInteger tc2UpChildNo, java.math.BigInteger tc1DownTestParentId, java.math.BigInteger tc1UpTestParentId, java.math.BigInteger tc2DownTestParentId, java.math.BigInteger tc2UpTestParentId) {
    this.key = key;

    this.tc1DownChildNo = tc1DownChildNo;

    if (tc1DownChildNo == null) {
      throw new com.poesys.db.InvalidParametersException("tc1DownChildNo is required for " + key.getValueList());
    }
    
    this.tc1UpChildNo = tc1UpChildNo;

    if (tc1UpChildNo == null) {
      throw new com.poesys.db.InvalidParametersException("tc1UpChildNo is required for " + key.getValueList());
    }
    
    this.tc2DownChildNo = tc2DownChildNo;

    if (tc2DownChildNo == null) {
      throw new com.poesys.db.InvalidParametersException("tc2DownChildNo is required for " + key.getValueList());
    }
    
    this.tc2UpChildNo = tc2UpChildNo;

    if (tc2UpChildNo == null) {
      throw new com.poesys.db.InvalidParametersException("tc2UpChildNo is required for " + key.getValueList());
    }
    
    this.tc1DownTestParentId = tc1DownTestParentId;

    if (tc1DownTestParentId == null) {
      throw new com.poesys.db.InvalidParametersException("tc1DownTestParentId is required for " + key.getValueList());
    }
    
    this.tc1UpTestParentId = tc1UpTestParentId;

    if (tc1UpTestParentId == null) {
      throw new com.poesys.db.InvalidParametersException("tc1UpTestParentId is required for " + key.getValueList());
    }
    
    this.tc2DownTestParentId = tc2DownTestParentId;

    if (tc2DownTestParentId == null) {
      throw new com.poesys.db.InvalidParametersException("tc2DownTestParentId is required for " + key.getValueList());
    }
    
    this.tc2UpTestParentId = tc2UpTestParentId;

    if (tc2UpTestParentId == null) {
      throw new com.poesys.db.InvalidParametersException("tc2UpTestParentId is required for " + key.getValueList());
    }
    
    // Associated key object
    tc1 = tc1Object;
    
    // Associated key object
    tc2 = tc2Object;
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the tc2 property.
    querySetters.add(new QueryTc2Setter());
    
    
    // Add the setters for the tc1 property.
    querySetters.add(new QueryTc1Setter());
    
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractTC2TC2TC2TC other = (AbstractTC2TC2TC2TC)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractTC2TC2TC2TC other = (AbstractTC2TC2TC2TC)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.db.memcached_test";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("com.poesys.db.memcached_test");
    String subsystem =
      "com.poesys.db.memcached_test"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property tc2
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private com.poesys.db.memcached_test.ITestChild2TestChild tc2;
  
  /**
   * Get an object of com.poesys.db.memcached_test.ITestChild2TestChild.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a com.poesys.db.memcached_test.ITestChild2TestChild
   */

  public com.poesys.db.memcached_test.ITestChild2TestChild getTc2() {
    return tc2;
  }

  /**
   * Clear the tc2 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTc2() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property tc1
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private com.poesys.db.memcached_test.ITestChild2TestChild tc1;
  
  /**
   * Get an object of com.poesys.db.memcached_test.ITestChild2TestChild.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a com.poesys.db.memcached_test.ITestChild2TestChild
   */

  public com.poesys.db.memcached_test.ITestChild2TestChild getTc1() {
    return tc1;
  }

  /**
   * Clear the tc1 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTc1() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property tc1DownChildNo
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddOrderedSubKeyProperties + AddAssociationKeyAttributeProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.math.BigInteger tc1DownChildNo;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddOrderedSubKeyProperties + AddAssociationKeyAttributeProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTc1DownChildNo() {
    return tc1DownChildNo;
  }

  /**
   * Clear the tc1DownChildNo data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTc1DownChildNo() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property tc1UpChildNo
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddOrderedSubKeyProperties + AddAssociationKeyAttributeProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.math.BigInteger tc1UpChildNo;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddOrderedSubKeyProperties + AddAssociationKeyAttributeProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTc1UpChildNo() {
    return tc1UpChildNo;
  }

  /**
   * Clear the tc1UpChildNo data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTc1UpChildNo() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property tc2DownChildNo
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddOrderedSubKeyProperties + AddAssociationKeyAttributeProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.math.BigInteger tc2DownChildNo;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddOrderedSubKeyProperties + AddAssociationKeyAttributeProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTc2DownChildNo() {
    return tc2DownChildNo;
  }

  /**
   * Clear the tc2DownChildNo data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTc2DownChildNo() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property tc2UpChildNo
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddOrderedSubKeyProperties + AddAssociationKeyAttributeProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.math.BigInteger tc2UpChildNo;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddOrderedSubKeyProperties + AddAssociationKeyAttributeProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTc2UpChildNo() {
    return tc2UpChildNo;
  }

  /**
   * Clear the tc2UpChildNo data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTc2UpChildNo() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property tc1DownTestParentId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger tc1DownTestParentId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTc1DownTestParentId() {
    return tc1DownTestParentId;
  }

  /**
   * Clear the tc1DownTestParentId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTc1DownTestParentId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property tc1UpTestParentId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger tc1UpTestParentId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTc1UpTestParentId() {
    return tc1UpTestParentId;
  }

  /**
   * Clear the tc1UpTestParentId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTc1UpTestParentId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property tc2DownTestParentId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger tc2DownTestParentId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTc2DownTestParentId() {
    return tc2DownTestParentId;
  }

  /**
   * Clear the tc2DownTestParentId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTc2DownTestParentId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property tc2UpTestParentId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger tc2UpTestParentId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTc2UpTestParentId() {
    return tc2UpTestParentId;
  }

  /**
   * Clear the tc2UpTestParentId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTc2UpTestParentId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }

  /**
   * Create the inserters for the TC2TC2TC2TC and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITC2TC2TC2TC> tC2TC2TC2TCFactory =
      manager.getFactory("com.poesys.db.memcached_test.TC2TC2TC2TC",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<ITC2TC2TC2TC> sql =
      new com.poesys.db.memcached_test.sql.InsertTC2TC2TC2TC();
    com.poesys.db.dao.insert.IInsert<ITC2TC2TC2TC> inserter =
      tC2TC2TC2TCFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}