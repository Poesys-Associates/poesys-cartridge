/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.db.memcached_test;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the TestChild. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Immutable</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTestChild extends AbstractDto implements ITestChild {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the testParent association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryTestParentSetter extends com.poesys.db.dto.AbstractObjectSetter<com.poesys.db.memcached_test.ITestParent> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryTestParentSetter object.
     */
    public QueryTestParentSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestParent.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return testParentKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestParent> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestParent();
    }

    @Override
    protected void set(com.poesys.db.memcached_test.ITestParent dto) {
      // No status change, this is just filling in the object data.
      testParent = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated testParent is not null
      return testParent != null;
    }
  }

  /**
   * Insert setter for inserting nested object property testParent.
   */
  private class InsertTestParentSetter 
      extends com.poesys.db.dto.AbstractInsertSetter {
    // Property testParent source: AddToOneAssociationRequiredObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create an InsertTestParentSetter object.
     */
    public InsertTestParentSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestParent.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.ArrayList<com.poesys.db.dto.IDbDto> array =
        new java.util.ArrayList<com.poesys.db.dto.IDbDto>(1);
      array.add(testParent);
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = array;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      // Key type: SequenceKey
      return true;
    }
  }

  /**
   * Setter for processing added testParent, updated testParent, and 
   * deleted testParent. 
   */
   
  private class UpdateTestParentSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObject<com.poesys.db.memcached_test.ITestParent> {
    private static final long serialVersionUID = 1L;

    /**
     * Create an UpdateTestParentSetter object.
     */
    public UpdateTestParentSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, com.poesys.db.memcached_test.ITestParent dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // testParent source: AddToOneAssociationRequiredObjectProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestParent> factory = 
        manager.getFactory(com.poesys.db.memcached_test.TestParent.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdate<com.poesys.db.memcached_test.ITestParent> updater = 
        factory.getUpdate(new com.poesys.db.memcached_test.sql.UpdateTestParent());

      // Update the leaf class.
      updater.update(connection, dto);
      // Complete the update by setting the DTO to EXISTING status.
      dto.setExisting();
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, com.poesys.db.memcached_test.ITestParent dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestParent> factory = 
        manager.getFactory(com.poesys.db.memcached_test.TestParent.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDelete<com.poesys.db.memcached_test.ITestParent> dao = 
        factory.getDelete(new com.poesys.db.memcached_test.sql.DeleteTestParent());
      dao.delete(connection, dto);
    }

    @Override
    protected void doNew(java.sql.Connection connection, com.poesys.db.memcached_test.ITestParent dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestParent> factory = 
        manager.getFactory(com.poesys.db.memcached_test.TestParent.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsert<com.poesys.db.memcached_test.ITestParent> inserter =
        factory.getInsert(new com.poesys.db.memcached_test.sql.InsertTestParent(), createKey());


      // Insert the superclass objects from the root down. Suppress nested
      // inserts for the superclasses, wait until the concrete class. Also set 
      // pre-insert suppression off to have the root insert linked, to-one class
      // objects.
      dto.setSuppressNestedInserts(true);
      dto.setSuppressNestedPreInserts(false);

      // Suppress inserts in concrete class.
      dto.setSuppressNestedPreInserts(true);
      
      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      dto.setSuppressNestedInserts(false);
      inserter.insert(connection, dto);
    }

    @Override
    protected com.poesys.db.memcached_test.ITestParent getDto() {
      return testParent;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestParent.class.getName();
    }

    @Override
    protected boolean createKey() {
      // Key type: SequenceKey
      return true;
    }
  }

  /**
   * Foreign key object used by QueryTestParentSetter nested class to query object
   */
  private IPrimaryKey testParentKey;
  
  /**
   * Set the foreign key testParentKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param testParentKey the foreign key
   */
  void setTestParentKey(IPrimaryKey testParentKey) {
    this.testParentKey = testParentKey;
  }

  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested up
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryUpByTestChild
   */
  private class QueryUpSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.memcached_test.ITestChild, ITestChild, java.util.Collection<com.poesys.db.memcached_test.ITestChild>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryUpSetter object.
     */
    public QueryUpSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITestChild getParametersDto() {
      return AbstractTestChild.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.memcached_test.ITestChild, ITestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryUpByTestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestChild> list) {
      // No status change; this is just filling in the object data.
      up = list;
      // Add the primary keys to the serialized key list if there are any.
      if (up != null) {
        for (com.poesys.db.dto.IDbDto object : up) {
          upKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated up list is not null
      return up != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested up collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTestChild
   */
  private class ReadUpSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.memcached_test.ITestChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadUpSetter object to read the up collection.
     */
    public ReadUpSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.ITestChild> getObjectCollection() {
      return up;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return upKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestChild> collection) {
     up = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association up.
   *
   * @see com.poesys.db.memcached_test.sql.InsertTestChild
   */
  private class InsertUpSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association up source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertUpSetter object.
     */
    public InsertUpSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = up;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added up, updated up, and 
   * deleted up. 
   */
   
  /**
   * Query setter for querying nested down
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryDownByTestChild
   */
  private class QueryDownSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.memcached_test.ITestChild, ITestChild, java.util.Collection<com.poesys.db.memcached_test.ITestChild>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryDownSetter object.
     */
    public QueryDownSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITestChild getParametersDto() {
      return AbstractTestChild.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.memcached_test.ITestChild, ITestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryDownByTestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestChild> list) {
      // No status change; this is just filling in the object data.
      down = list;
      // Add the primary keys to the serialized key list if there are any.
      if (down != null) {
        for (com.poesys.db.dto.IDbDto object : down) {
          downKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated down list is not null
      return down != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested down collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTestChild
   */
  private class ReadDownSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.memcached_test.ITestChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadDownSetter object to read the down collection.
     */
    public ReadDownSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.ITestChild> getObjectCollection() {
      return down;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return downKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestChild> collection) {
     down = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association down.
   *
   * @see com.poesys.db.memcached_test.sql.InsertTestChild
   */
  private class InsertDownSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association down source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertDownSetter object.
     */
    public InsertDownSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = down;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added down, updated down, and 
   * deleted down. 
   */
   
  /**
   * Query setter for querying nested grandchildren
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryGrandchildrenByTestChild
   */
  private class QueryGrandchildrenSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.memcached_test.ITestChildChild, ITestChild, java.util.Collection<com.poesys.db.memcached_test.ITestChildChild>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryGrandchildrenSetter object.
     */
    public QueryGrandchildrenSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChildChild.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITestChild getParametersDto() {
      return AbstractTestChild.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.memcached_test.ITestChildChild, ITestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryGrandchildrenByTestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestChildChild> list) {
      // No status change; this is just filling in the object data.
      grandchildren = list;
      // Add the primary keys to the serialized key list if there are any.
      if (grandchildren != null) {
        for (com.poesys.db.dto.IDbDto object : grandchildren) {
          grandchildrenKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated grandchildren list is not null
      return grandchildren != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested grandchildren collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTestChildChild
   */
  private class ReadGrandchildrenSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.memcached_test.ITestChildChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadGrandchildrenSetter object to read the grandchildren collection.
     */
    public ReadGrandchildrenSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChildChild.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.ITestChildChild> getObjectCollection() {
      return grandchildren;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return grandchildrenKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestChildChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestChildChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestChildChild> collection) {
     grandchildren = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association grandchildren.
   *
   * @see com.poesys.db.memcached_test.sql.InsertTestChildChild
   */
  private class InsertGrandchildrenSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association grandchildren source: AddToManyChildCollectionProperties

    /**
     * Create an InsertGrandchildrenSetter object.
     */
    public InsertGrandchildrenSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChildChild.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = grandchildren;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added grandchildren and updated grandchildren.
   * Deleted grandchildren are deleted in the database cascade delete.
   */
   
  /**
   * Query setter for querying nested upTest2Child2TestChildLinks
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryUpTest2Child2TestChildLinksByTestChild
   */
  private class QueryUpTest2Child2TestChildLinksSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.memcached_test.ITestChild2TestChild, ITestChild, java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryUpTest2Child2TestChildLinksSetter object.
     */
    public QueryUpTest2Child2TestChildLinksSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild2TestChild.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITestChild getParametersDto() {
      return AbstractTestChild.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.memcached_test.ITestChild2TestChild, ITestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryUpTest2Child2TestChildLinksByTestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> list) {
      // No status change; this is just filling in the object data.
      upTest2Child2TestChildLinks = list;
      // Add the primary keys to the serialized key list if there are any.
      if (upTest2Child2TestChildLinks != null) {
        for (com.poesys.db.dto.IDbDto object : upTest2Child2TestChildLinks) {
          upTest2Child2TestChildLinksKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated upTest2Child2TestChildLinks list is not null
      return upTest2Child2TestChildLinks != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested upTest2Child2TestChildLinks collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTestChild2TestChild
   */
  private class ReadUpTest2Child2TestChildLinksSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.memcached_test.ITestChild2TestChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadUpTest2Child2TestChildLinksSetter object to read the upTest2Child2TestChildLinks collection.
     */
    public ReadUpTest2Child2TestChildLinksSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild2TestChild.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> getObjectCollection() {
      return upTest2Child2TestChildLinks;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return upTest2Child2TestChildLinksKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestChild2TestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestChild2TestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> collection) {
     upTest2Child2TestChildLinks = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association upTest2Child2TestChildLinks.
   *
   * @see com.poesys.db.memcached_test.sql.InsertTestChild2TestChild
   */
  private class InsertUpTest2Child2TestChildLinksSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association upTest2Child2TestChildLinks source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertUpTest2Child2TestChildLinksSetter object.
     */
    public InsertUpTest2Child2TestChildLinksSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild2TestChild.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = upTest2Child2TestChildLinks;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added upTest2Child2TestChildLinks and updated upTest2Child2TestChildLinks.
   * Deleted upTest2Child2TestChildLinks are deleted in the database cascade delete.
   */
   
  /**
   * Query setter for querying nested downTest2Child2TestChildLinks
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryDownTest2Child2TestChildLinksByTestChild
   */
  private class QueryDownTest2Child2TestChildLinksSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.memcached_test.ITestChild2TestChild, ITestChild, java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryDownTest2Child2TestChildLinksSetter object.
     */
    public QueryDownTest2Child2TestChildLinksSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild2TestChild.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITestChild getParametersDto() {
      return AbstractTestChild.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.memcached_test.ITestChild2TestChild, ITestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryDownTest2Child2TestChildLinksByTestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> list) {
      // No status change; this is just filling in the object data.
      downTest2Child2TestChildLinks = list;
      // Add the primary keys to the serialized key list if there are any.
      if (downTest2Child2TestChildLinks != null) {
        for (com.poesys.db.dto.IDbDto object : downTest2Child2TestChildLinks) {
          downTest2Child2TestChildLinksKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated downTest2Child2TestChildLinks list is not null
      return downTest2Child2TestChildLinks != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested downTest2Child2TestChildLinks collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTestChild2TestChild
   */
  private class ReadDownTest2Child2TestChildLinksSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.memcached_test.ITestChild2TestChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadDownTest2Child2TestChildLinksSetter object to read the downTest2Child2TestChildLinks collection.
     */
    public ReadDownTest2Child2TestChildLinksSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild2TestChild.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> getObjectCollection() {
      return downTest2Child2TestChildLinks;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return downTest2Child2TestChildLinksKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestChild2TestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestChild2TestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> collection) {
     downTest2Child2TestChildLinks = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association downTest2Child2TestChildLinks.
   *
   * @see com.poesys.db.memcached_test.sql.InsertTestChild2TestChild
   */
  private class InsertDownTest2Child2TestChildLinksSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association downTest2Child2TestChildLinks source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertDownTest2Child2TestChildLinksSetter object.
     */
    public InsertDownTest2Child2TestChildLinksSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild2TestChild.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = downTest2Child2TestChildLinks;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added downTest2Child2TestChildLinks and updated downTest2Child2TestChildLinks.
   * Deleted downTest2Child2TestChildLinks are deleted in the database cascade delete.
   */
   
  /**
   * Create an empty TestChild for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractTestChild() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the testParent property.
    querySetters.add(new QueryTestParentSetter());
    preSetters.add(new InsertTestParentSetter());
    postSetters.add(new UpdateTestParentSetter());
    
    // Add the many-to-many collection setters for the up property.
    querySetters.add(new QueryUpSetter());
    readObjectSetters.add(new ReadUpSetter());
    insertSetters.add(new InsertUpSetter());
    
    // Add the many-to-many collection setters for the down property.
    querySetters.add(new QueryDownSetter());
    readObjectSetters.add(new ReadDownSetter());
    insertSetters.add(new InsertDownSetter());
    
    // Add the many-to-many collection setters for the grandchildren property.
    querySetters.add(new QueryGrandchildrenSetter());
    readObjectSetters.add(new ReadGrandchildrenSetter());
    insertSetters.add(new InsertGrandchildrenSetter());
    
    // Add the many-to-many collection setters for the upTest2Child2TestChildLinks property.
    querySetters.add(new QueryUpTest2Child2TestChildLinksSetter());
    readObjectSetters.add(new ReadUpTest2Child2TestChildLinksSetter());
    insertSetters.add(new InsertUpTest2Child2TestChildLinksSetter());
    
    // Add the many-to-many collection setters for the downTest2Child2TestChildLinks property.
    querySetters.add(new QueryDownTest2Child2TestChildLinksSetter());
    readObjectSetters.add(new ReadDownTest2Child2TestChildLinksSetter());
    insertSetters.add(new InsertDownTest2Child2TestChildLinksSetter());
  }

  /**
   * Create a TestChild. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the TestChild
   * @param testParentId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param childNo composite subkey attribute that uniquely identifies child combined with parent key
   */
  public AbstractTestChild(IPrimaryKey key, java.math.BigInteger testParentId, java.math.BigInteger childNo) {
    this.key = key;

    this.testParentId = testParentId;

    if (testParentId == null) {
      throw new com.poesys.db.InvalidParametersException("testParentId is required for " + key.getValueList());
    }
    
    this.childNo = childNo;

    if (childNo == null) {
      throw new com.poesys.db.InvalidParametersException("childNo is required for " + key.getValueList());
    }
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the testParent property.
    querySetters.add(new QueryTestParentSetter());
    insertSetters.add(new InsertTestParentSetter());
    preSetters.add(new InsertTestParentSetter());
    postSetters.add(new UpdateTestParentSetter());
    
    
    // Add the many-to-many collection setters for the up property.
    querySetters.add(new QueryUpSetter());
    readObjectSetters.add(new ReadUpSetter());
    insertSetters.add(new InsertUpSetter());
    
    // Add the many-to-many collection setters for the down property.
    querySetters.add(new QueryDownSetter());
    readObjectSetters.add(new ReadDownSetter());
    insertSetters.add(new InsertDownSetter());
    
    // Add the many-to-many collection setters for the grandchildren property.
    querySetters.add(new QueryGrandchildrenSetter());
    readObjectSetters.add(new ReadGrandchildrenSetter());
    insertSetters.add(new InsertGrandchildrenSetter());
    
    // Add the many-to-many collection setters for the upTest2Child2TestChildLinks property.
    querySetters.add(new QueryUpTest2Child2TestChildLinksSetter());
    readObjectSetters.add(new ReadUpTest2Child2TestChildLinksSetter());
    insertSetters.add(new InsertUpTest2Child2TestChildLinksSetter());
    
    // Add the many-to-many collection setters for the downTest2Child2TestChildLinks property.
    querySetters.add(new QueryDownTest2Child2TestChildLinksSetter());
    readObjectSetters.add(new ReadDownTest2Child2TestChildLinksSetter());
    insertSetters.add(new InsertDownTest2Child2TestChildLinksSetter());
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractTestChild other = (AbstractTestChild)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractTestChild other = (AbstractTestChild)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.db.memcached_test";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (grandchildren != null) {
      for (com.poesys.db.dto.IDbDto dto : grandchildren) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (upTest2Child2TestChildLinks != null) {
      for (com.poesys.db.dto.IDbDto dto : upTest2Child2TestChildLinks) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (downTest2Child2TestChildLinks != null) {
      for (com.poesys.db.dto.IDbDto dto : downTest2Child2TestChildLinks) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("com.poesys.db.memcached_test");
    String subsystem =
      "com.poesys.db.memcached_test"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property testParentId
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger testParentId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddParentKeyAttributes
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTestParentId() {
    return testParentId;
  }

  /**
   * Clear the testParentId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTestParentId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property childNo
   *
   * <p>
   * Composite subkey attribute that uniquely identifies child combined with parent key
   * </p>
   *
   * Added by AddOrderedSubKeyProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.math.BigInteger childNo;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddOrderedSubKeyProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getChildNo() {
    return childNo;
  }

  /**
   * Clear the childNo data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearChildNo() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property testParent
   *
   * <p>
   * The parent of all the test children
   * </p>
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  private com.poesys.db.memcached_test.ITestParent testParent;
  
  /**
   * Get an object of com.poesys.db.memcached_test.ITestParent.
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   * 
   * @return a com.poesys.db.memcached_test.ITestParent
   */

  public com.poesys.db.memcached_test.ITestParent getTestParent() {
    return testParent;
  }

  /**
   * Clear the testParent data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTestParent() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property up
   *
   * 
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.memcached_test.ITestChild> up;
  // Ordered list of keys of the objects in the up list
  java.util.List<com.poesys.db.pk.IPrimaryKey> upKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.memcached_test.ITestChild.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.ITestChild>
   */

  public java.util.Collection<com.poesys.db.memcached_test.ITestChild> getUp() {
    return up;
  }

  /**
   * Clear the up data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearUp() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property down
   *
   * 
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.memcached_test.ITestChild> down;
  // Ordered list of keys of the objects in the down list
  java.util.List<com.poesys.db.pk.IPrimaryKey> downKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.memcached_test.ITestChild.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.ITestChild>
   */

  public java.util.Collection<com.poesys.db.memcached_test.ITestChild> getDown() {
    return down;
  }

  /**
   * Clear the down data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDown() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property grandchildren
   *
   * 
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.memcached_test.ITestChildChild> grandchildren;
  // Ordered list of keys of the objects in the grandchildren list
  java.util.List<com.poesys.db.pk.IPrimaryKey> grandchildrenKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.memcached_test.ITestChildChild.
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.ITestChildChild>
   */

  public java.util.Collection<com.poesys.db.memcached_test.ITestChildChild> getGrandchildren() {
    return grandchildren;
  }

  /**
   * Clear the grandchildren data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearGrandchildren() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property upTest2Child2TestChildLinks
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> upTest2Child2TestChildLinks;
  // Ordered list of keys of the objects in the upTest2Child2TestChildLinks list
  java.util.List<com.poesys.db.pk.IPrimaryKey> upTest2Child2TestChildLinksKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.memcached_test.ITestChild2TestChild.
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild>
   */

  public java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> getUpTest2Child2TestChildLinks() {
    return upTest2Child2TestChildLinks;
  }

  /**
   * Clear the upTest2Child2TestChildLinks data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearUpTest2Child2TestChildLinks() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property downTest2Child2TestChildLinks
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> downTest2Child2TestChildLinks;
  // Ordered list of keys of the objects in the downTest2Child2TestChildLinks list
  java.util.List<com.poesys.db.pk.IPrimaryKey> downTest2Child2TestChildLinksKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.memcached_test.ITestChild2TestChild.
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild>
   */

  public java.util.Collection<com.poesys.db.memcached_test.ITestChild2TestChild> getDownTest2Child2TestChildLinks() {
    return downTest2Child2TestChildLinks;
  }

  /**
   * Clear the downTest2Child2TestChildLinks data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDownTest2Child2TestChildLinks() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up grandchildren.
    if (subject != null && subject instanceof com.poesys.db.memcached_test.ITestChildChild && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        grandchildren != null) {
      // Delete to-many grandchildren child from collection
      grandchildren.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up upTest2Child2TestChildLinks.
    if (subject != null && subject instanceof com.poesys.db.memcached_test.ITestChild2TestChild && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        upTest2Child2TestChildLinks != null) {
      // Delete to-many upTest2Child2TestChildLinks child from collection
      upTest2Child2TestChildLinks.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up downTest2Child2TestChildLinks.
    if (subject != null && subject instanceof com.poesys.db.memcached_test.ITestChild2TestChild && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        downTest2Child2TestChildLinks != null) {
      // Delete to-many downTest2Child2TestChildLinks child from collection
      downTest2Child2TestChildLinks.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Cascade delete to upTest2Child2TestChildLinks.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        upTest2Child2TestChildLinks != null) {
      // Mark upTest2Child2TestChildLinks association object cascade-deleted.
      outer: for (com.poesys.db.memcached_test.ITestChild2TestChild value : upTest2Child2TestChildLinks) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }

    // Cascade delete to downTest2Child2TestChildLinks.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        downTest2Child2TestChildLinks != null) {
      // Mark downTest2Child2TestChildLinks association object cascade-deleted.
      outer: for (com.poesys.db.memcached_test.ITestChild2TestChild value : downTest2Child2TestChildLinks) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }
  }

  /**
   * Create the inserters for the TestChild and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestChild> testChildFactory =
      manager.getFactory("com.poesys.db.memcached_test.TestChild",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<ITestChild> sql =
      new com.poesys.db.memcached_test.sql.InsertTestChild();
    com.poesys.db.dao.insert.IInsert<ITestChild> inserter =
      testChildFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}