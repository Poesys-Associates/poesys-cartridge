/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package com.poesys.db.test;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * TestX. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The TestX object is the "this" side of a many-to-many association.
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTestXProxy extends AbstractLazyLoadingDtoProxy implements ITestX {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
    // Setter strategy nested classes for multiple-object associations

  /** Flag indicating whether the ys property has been loaded */
  boolean ysLoaded = false;

  /**
   * Query setter for lazily querying nested ys collection
   * (collection property)
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryYsByTestX
   */
  private class QueryYsSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<com.poesys.db.test.ITestY, ITestX, java.util.Collection<com.poesys.db.test.ITestY>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryYsSetter object.
     */
    public QueryYsSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestY.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITestX getParametersDto() {
      return AbstractTestXProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.test.ITestY, ITestX> getSql() {
      return new com.poesys.db.test.sql.QueryYsByTestX();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ITestY> collection) {
      try {
        // Register the observer parent with the subject children.
        for (com.poesys.db.test.ITestY child : collection) {
          child.attach(AbstractTestXProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractTestXProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setY(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded ys
      return ysLoaded;
    }
  }


  /**
   * Read-Object setter for de-serializing nested ys collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryTestY
   */
  private class ReadYsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ITestY> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadYsSetter object to read the y collection.
     */
    public ReadYsSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestY.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ITestY> getObjectCollection() {
      java.util.Collection<com.poesys.db.test.ITestY> ys = null;
      try {
        ys = ((com.poesys.db.test.TestX)dto).getYs();
      } catch (java.sql.SQLException e) {
        throw new RuntimeException("SQL Exception on collection query: " + e.getMessage(), e);
      }
      return ys;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.test.TestX)dto).yKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ITestY> getSql() {
      return new com.poesys.db.test.sql.QueryTestY();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ITestY> collection) {
      ((com.poesys.db.test.TestX)dto).ys = collection;
    }
  }


  /**
   * Add a com.poesys.db.test.ITestY object to the Ys collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @param object the com.poesys.db.test.ITestY object to add to the collection
   * @throws java.sql.SQLException when there is a database problem
   */
  public void addYsTestY(com.poesys.db.test.ITestY object)throws java.sql.SQLException {
    // Collection is lazily loaded, check and load if necessary.
    if (!ysLoaded) {
      getYs();
    }
    ((TestX)dto).addYsTestY(object);
  }



  /**
   * Read-Object setter for de-serializing nested zs collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryTestZ
   */
  private class ReadZsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ITestZ> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadZsSetter object to read the zs collection.
     */
    public ReadZsSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestZ.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ITestZ> getObjectCollection() {
      java.util.Collection<com.poesys.db.test.ITestZ> zs =  ((com.poesys.db.test.TestX)dto).getZs();
      return zs;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.test.TestX)dto).zsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ITestZ> getSql() {
      return new com.poesys.db.test.sql.QueryTestZ();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ITestZ> collection) {
      ((com.poesys.db.test.TestX)dto).zs = collection;
    }
  }


  /**
   * Add a com.poesys.db.test.ITestZ object to the Zs collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @param object the com.poesys.db.test.ITestZ object to add to the collection
   */
  public void addZsTestZ(com.poesys.db.test.ITestZ object) {
    ((TestX)dto).addZsTestZ(object);
  }

  /**
   * Create a TestXProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractTestXProxy(TestX dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadYsSetter());
    readObjectSetters.add(new ReadZsSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractTestXProxy otherProxy = (AbstractTestXProxy)obj;
    return ((TestX)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((TestX)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getTestXId() {
    return ((TestX)dto).getTestXId();
  }

  /**
   * Get an object of java.lang.String
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getXAttr() {
    return ((TestX)dto).getXAttr();
  }

  public void setXAttr(java.lang.String xAttr)
      {
    ((TestX)dto).setXAttr(xAttr);
  }

  /**
   * Get a collection of com.poesys.db.test.ITestY
   * loading the ys association if it is not already in memory.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * Lazy: true
   * 
   * @return a java.util.Collection<com.poesys.db.test.ITestY>
   * @throws java.sql.SQLException when there is a database problem
   */
  public java.util.Collection<com.poesys.db.test.ITestY> getYs() throws java.sql.SQLException {
    // Lazy-load the local property ys if not loaded.
    if (!ysLoaded) {
      try {
        com.poesys.db.dto.ISet setter = new QueryYsSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((TestX)dto).getYs();
  }

  /**
   * Clear the lazily loaded property ys if it is loaded.
   */
  public void clearYs() {
    // Only clear if loaded already.
    if (ysLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((TestX)dto).setY(null);
        ((TestX)dto).undoStatus();
        ysLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the ys from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param ys the lazily loaded value to assign
   */
  public void setY(java.util.Collection<com.poesys.db.test.ITestY> ys)
      {
    ((TestX)dto).setY(ys);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    ysLoaded = true;
  }

  /**
   * Get a collection of com.poesys.db.test.ITestZ
   *
   * Source: AddAssociationClassCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<com.poesys.db.test.ITestZ>
   */
  public java.util.Collection<com.poesys.db.test.ITestZ> getZs() {
    return ((TestX)dto).getZs();
  }

  public void setZs(java.util.Collection<com.poesys.db.test.ITestZ> zs)
      throws com.poesys.db.InvalidParametersException {
    ((TestX)dto).setZs(zs);
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((TestX)dto).markChildrenDeleted();
  }
}