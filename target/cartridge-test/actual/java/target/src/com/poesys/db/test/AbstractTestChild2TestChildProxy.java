/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package com.poesys.db.test;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * TestChild2TestChild. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTestChild2TestChildProxy extends AbstractLazyLoadingDtoProxy implements ITestChild2TestChild {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  // Lazy-loading query setter strategy nested classes for single-object associations
  


  /**
   * Read-Object setter for de-serializing nested tc1 collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryTestChild2TestChild
   */
  private class ReadTc1Setter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ITestChild2TestChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadTc1Setter object to read the tc1 collection.
     */
    public ReadTc1Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestChild2TestChild.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ITestChild2TestChild> getObjectCollection() {
      java.util.Collection<com.poesys.db.test.ITestChild2TestChild> tc1 =  ((com.poesys.db.test.TestChild2TestChild)dto).getTc1();
      return tc1;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.test.TestChild2TestChild)dto).tc1Keys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ITestChild2TestChild> getSql() {
      return new com.poesys.db.test.sql.QueryTestChild2TestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ITestChild2TestChild> collection) {
      ((com.poesys.db.test.TestChild2TestChild)dto).tc1 = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested tc2 collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryTestChild2TestChild
   */
  private class ReadTc2Setter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ITestChild2TestChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadTc2Setter object to read the tc2 collection.
     */
    public ReadTc2Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TestChild2TestChild.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ITestChild2TestChild> getObjectCollection() {
      java.util.Collection<com.poesys.db.test.ITestChild2TestChild> tc2 =  ((com.poesys.db.test.TestChild2TestChild)dto).getTc2();
      return tc2;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.test.TestChild2TestChild)dto).tc2Keys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ITestChild2TestChild> getSql() {
      return new com.poesys.db.test.sql.QueryTestChild2TestChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ITestChild2TestChild> collection) {
      ((com.poesys.db.test.TestChild2TestChild)dto).tc2 = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested tc1TC2TC2TC2TCLinks collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryTC2TC2TC2TC
   */
  private class ReadTc1TC2TC2TC2TCLinksSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ITC2TC2TC2TC> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadTc1TC2TC2TC2TCLinksSetter object to read the tc1TC2TC2TC2TCLinks collection.
     */
    public ReadTc1TC2TC2TC2TCLinksSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TC2TC2TC2TC.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ITC2TC2TC2TC> getObjectCollection() {
      java.util.Collection<com.poesys.db.test.ITC2TC2TC2TC> tc1TC2TC2TC2TCLinks =  ((com.poesys.db.test.TestChild2TestChild)dto).getTc1TC2TC2TC2TCLinks();
      return tc1TC2TC2TC2TCLinks;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.test.TestChild2TestChild)dto).tc1TC2TC2TC2TCLinksKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ITC2TC2TC2TC> getSql() {
      return new com.poesys.db.test.sql.QueryTC2TC2TC2TC();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ITC2TC2TC2TC> collection) {
      ((com.poesys.db.test.TestChild2TestChild)dto).tc1TC2TC2TC2TCLinks = collection;
    }
  }



  /**
   * Read-Object setter for de-serializing nested tc2TC2TC2TC2TCLinks collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.db.test.sql.QueryTC2TC2TC2TC
   */
  private class ReadTc2TC2TC2TC2TCLinksSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.test.ITC2TC2TC2TC> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadTc2TC2TC2TC2TCLinksSetter object to read the tc2TC2TC2TC2TCLinks collection.
     */
    public ReadTc2TC2TC2TC2TCLinksSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.TC2TC2TC2TC.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.test.ITC2TC2TC2TC> getObjectCollection() {
      java.util.Collection<com.poesys.db.test.ITC2TC2TC2TC> tc2TC2TC2TC2TCLinks =  ((com.poesys.db.test.TestChild2TestChild)dto).getTc2TC2TC2TC2TCLinks();
      return tc2TC2TC2TC2TCLinks;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.db.test.TestChild2TestChild)dto).tc2TC2TC2TC2TCLinksKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ITC2TC2TC2TC> getSql() {
      return new com.poesys.db.test.sql.QueryTC2TC2TC2TC();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.test.ITC2TC2TC2TC> collection) {
      ((com.poesys.db.test.TestChild2TestChild)dto).tc2TC2TC2TC2TCLinks = collection;
    }
  }

  /**
   * Create a TestChild2TestChildProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractTestChild2TestChildProxy(TestChild2TestChild dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadTc1Setter());
    readObjectSetters.add(new ReadTc2Setter());
    readObjectSetters.add(new ReadTc1TC2TC2TC2TCLinksSetter());
    readObjectSetters.add(new ReadTc2TC2TC2TC2TCLinksSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractTestChild2TestChildProxy otherProxy = (AbstractTestChild2TestChildProxy)obj;
    return ((TestChild2TestChild)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((TestChild2TestChild)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get a collection of com.poesys.db.test.ITestChild2TestChild
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<com.poesys.db.test.ITestChild2TestChild>
   */
  public java.util.Collection<com.poesys.db.test.ITestChild2TestChild> getTc1() {
    return ((TestChild2TestChild)dto).getTc1();
  }

  /**
   * Get a collection of com.poesys.db.test.ITestChild2TestChild
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<com.poesys.db.test.ITestChild2TestChild>
   */
  public java.util.Collection<com.poesys.db.test.ITestChild2TestChild> getTc2() {
    return ((TestChild2TestChild)dto).getTc2();
  }

  /**
   * Get a collection of com.poesys.db.test.ITC2TC2TC2TC
   *
   * Source: AddAssociationClassCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<com.poesys.db.test.ITC2TC2TC2TC>
   */
  public java.util.Collection<com.poesys.db.test.ITC2TC2TC2TC> getTc1TC2TC2TC2TCLinks() {
    return ((TestChild2TestChild)dto).getTc1TC2TC2TC2TCLinks();
  }

  /**
   * Get a collection of com.poesys.db.test.ITC2TC2TC2TC
   *
   * Source: AddAssociationClassCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<com.poesys.db.test.ITC2TC2TC2TC>
   */
  public java.util.Collection<com.poesys.db.test.ITC2TC2TC2TC> getTc2TC2TC2TC2TCLinks() {
    return ((TestChild2TestChild)dto).getTc2TC2TC2TC2TCLinks();
  }

  /**
   * Get an object of com.poesys.db.test.ITestChild
   *
   * Source: AddAssociationKeyObjectProperties
   * Lazy: false
   * 
   * @return a com.poesys.db.test.ITestChild
   */
  public com.poesys.db.test.ITestChild getUp() {
    return ((TestChild2TestChild)dto).getUp();
  }

  /**
   * Get an object of com.poesys.db.test.ITestChild
   *
   * Source: AddAssociationKeyObjectProperties
   * Lazy: false
   * 
   * @return a com.poesys.db.test.ITestChild
   */
  public com.poesys.db.test.ITestChild getDown() {
    return ((TestChild2TestChild)dto).getDown();
  }

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddOrderedSubKeyProperties + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getDownChildNo() {
    return ((TestChild2TestChild)dto).getDownChildNo();
  }

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddOrderedSubKeyProperties + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getUpChildNo() {
    return ((TestChild2TestChild)dto).getUpChildNo();
  }

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getDownTestParentId() {
    return ((TestChild2TestChild)dto).getDownTestParentId();
  }

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getUpTestParentId() {
    return ((TestChild2TestChild)dto).getUpTestParentId();
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((TestChild2TestChild)dto).markChildrenDeleted();
  }
}