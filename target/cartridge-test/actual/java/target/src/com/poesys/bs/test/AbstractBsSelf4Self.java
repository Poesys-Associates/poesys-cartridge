/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package com.poesys.bs.test;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import com.poesys.db.test.ISelf4Self;
import com.poesys.db.test.Self4SelfProxy;
import com.poesys.db.test.Self4Self;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the Self4Self. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Immutable</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsSelf4Self 
    extends AbstractDto<com.poesys.db.test.ISelf4Self> {

  /**
   * Create a BsSelf4Self object from a Self4Self object.
   * 
   * @param dto the data-access layer Self4Self DTO
   * @throws DelegateException when there is a problem creating the Self4Self
   */
  public AbstractBsSelf4Self(ISelf4Self dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a Self4Self from new data.
   *
   * @param key the primary key of the Self4Self
   * @param children4Object associated Self4 object
   * @param parents4Object associated Self4 object
   * @param children4Key1 Attribute that is part of the association key
   * @param parents4Key1 Attribute that is part of the association key
   * @param children4Key2 Attribute that is part of the association key
   * @param parents4Key2 Attribute that is part of the association key
   */
  public AbstractBsSelf4Self(IPrimaryKey key, com.poesys.db.test.ISelf4 children4Object, com.poesys.db.test.ISelf4 parents4Object, java.lang.Long children4Key1, java.lang.Long parents4Key1, java.lang.Long children4Key2, java.lang.Long parents4Key2) {
    super(new Self4SelfProxy(new Self4Self(key, children4Object, parents4Object, children4Key1, parents4Key1, children4Key2, parents4Key2)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ISelf4Self> other = (IDto<ISelf4Self>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ISelf4Self> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Associated object
   * </p>
   * <p>
   * Added by AddAssociationKeyObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Self4Self</li>
   * </ul>
   * </p>
   * @return a com.poesys.bs.test.BsSelf4 child4
   */
  public com.poesys.bs.test.BsSelf4 getChild4() {
    // Return 4
    return new com.poesys.bs.test.BsSelf4(dto.getChild4());
  }

  /**
   * <p>
   * Associated object
   * </p>
   * <p>
   * Added by AddAssociationKeyObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Self4Self</li>
   * </ul>
   * </p>
   * @return a com.poesys.bs.test.BsSelf4 parent4
   */
  public com.poesys.bs.test.BsSelf4 getParent4() {
    // Return 4
    return new com.poesys.bs.test.BsSelf4(dto.getParent4());
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Self4Self</li>
   * </ul>
   * </p>
   * @return a java.lang.Long children4Key1
   */
  public java.lang.Long getChildren4Key1() {
    return dto.getChildren4Key1();
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Self4Self</li>
   * </ul>
   * </p>
   * @return a java.lang.Long parents4Key1
   */
  public java.lang.Long getParents4Key1() {
    return dto.getParents4Key1();
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Self4Self</li>
   * </ul>
   * </p>
   * @return a java.lang.Long children4Key2
   */
  public java.lang.Long getChildren4Key2() {
    return dto.getChildren4Key2();
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Self4Self</li>
   * </ul>
   * </p>
   * @return a java.lang.Long parents4Key2
   */
  public java.lang.Long getParents4Key2() {
    return dto.getParents4Key2();
  }
}