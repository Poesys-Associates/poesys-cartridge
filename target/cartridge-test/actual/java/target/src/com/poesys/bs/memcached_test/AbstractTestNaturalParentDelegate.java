/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDelegate.vsl

package com.poesys.bs.memcached_test;


import com.poesys.bs.delegate.AbstractDataDelegate;
import com.poesys.bs.delegate.DelegateException;
import com.poesys.db.connection.IConnectionFactory.DBMS;
import com.poesys.db.dao.insert.IInsertSql;
import com.poesys.db.dao.update.IUpdateSql;
import com.poesys.db.dao.delete.IDeleteSql;
import com.poesys.db.dao.query.IKeyQuerySql;
import com.poesys.db.dao.query.IQuerySql;


/**
 * <p>
 * A business delegate that provides an application programming interface for
 * TestNaturalParent objects and their dependents. You should not modify this class;
 * instead, override or add methods in the class TestNaturalParentDelegate, which
 * specializes this class.
 * </p>
 * 
 * @see TestNaturalParentDelegate
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTestNaturalParentDelegate
    extends AbstractDataDelegate<BsTestNaturalParent, com.poesys.db.memcached_test.ITestNaturalParent, com.poesys.db.pk.NaturalPrimaryKey> {
  /**
   * Create an AbstractTestNaturalParentDelegate object by supplying the database
   * subsystem in the database.properties file.
   * 
   * @param subsystem the database subsystem to use in database.properties
   */
  public AbstractTestNaturalParentDelegate(String subsystem) {
    super(subsystem, 2147483647);
  }

  /**
   * Create an AbstractTestNaturalParentDelegate object by supplying the database
   * subsystem in the database.properties file and a specific DBMS, usually
   * IConnectionFactory.DBMS.JNDI.
   * 
   * @param subsystem the database subsystem to use in database.properties
   * @param dbms the DBMS to use (usually IConnectionFactory.DBMS.JNDI)
   */
  public AbstractTestNaturalParentDelegate(String subsystem, DBMS dbms) {
    super(subsystem, dbms, 2147483647);
  }

  @Override
  protected String getClassName() {
    return com.poesys.db.memcached_test.TestNaturalParent.class.getName();
  }

  @Override
  protected IInsertSql<com.poesys.db.memcached_test.ITestNaturalParent> getInsertSql() {
    return new com.poesys.db.memcached_test.sql.InsertTestNaturalParent();
  }

  @Override
  protected IDeleteSql<com.poesys.db.memcached_test.ITestNaturalParent> getDeleteSql() {
    return new com.poesys.db.memcached_test.sql.DeleteTestNaturalParent();
  }

  @Override
  protected IUpdateSql<com.poesys.db.memcached_test.ITestNaturalParent> getUpdateSql() {
    return null;
  }

  @Override
  protected IKeyQuerySql<com.poesys.db.memcached_test.ITestNaturalParent> getQueryByKeySql() {
    return new com.poesys.db.memcached_test.sql.QueryTestNaturalParent();
  }

  @Override
  protected IQuerySql<com.poesys.db.memcached_test.ITestNaturalParent> getQueryListSql() {
    // Query-All method not required
    return new com.poesys.db.memcached_test.sql.QueryAllTestNaturalParent();
  }

  @Override
  protected com.poesys.bs.memcached_test.BsTestNaturalParent wrapData(com.poesys.db.memcached_test.ITestNaturalParent dto) {
    return new com.poesys.bs.memcached_test.BsTestNaturalParent(dto);
  }

  /**
   * <p>
   * Create a new TestNaturalParent with data fields.
   * </p>
   * <p>
   * The TestNaturalParent class has a natural key; this method creates the primary
   * key from the appropriate input properties.
   * </p>
   * 
   * @param key1 
   * @param key2 
   * @return the new TestNaturalParent object
   * @throws DelegateException when there is a problem generating the key or
   *             creating the object
   */
  public com.poesys.bs.memcached_test.BsTestNaturalParent createTestNaturalParent(java.lang.Long key1, java.lang.Long key2)
      throws DelegateException {
    com.poesys.db.pk.NaturalPrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.LongColumnValue("key1", key1));
      list.add(new com.poesys.db.col.LongColumnValue("key2", key2));
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestNaturalParent");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a data-access DTO for direct access, no proxy required.
    com.poesys.db.memcached_test.ITestNaturalParent dto =
      new com.poesys.db.memcached_test.TestNaturalParent(key, key1, key2);

    // Create the business DTO.
    return new com.poesys.bs.memcached_test.BsTestNaturalParent(dto);
  }

  /**
   * Create a new TestNaturalChild child of TestNaturalParent with a composite key.
   * 
   * @param parent the parent of the child object to create
   * @param key1 composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param key2 composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param subkey 
   * @return a new TestNaturalChild business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public com.poesys.bs.memcached_test.BsTestNaturalChild createTestNaturalChild(com.poesys.bs.memcached_test.BsTestNaturalParent parent, java.lang.Long key1, java.lang.Long key2, java.lang.Long subkey) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.CompositePrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.LongColumnValue("subkey", subkey));
	  com.poesys.db.pk.IPrimaryKey subKey = 
	    com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestNaturalChild");
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parent.getPrimaryKey(), 
                                                              subKey,
                                                              "com.poesys.db.memcached_test.TestNaturalChild");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a composite-key child data-access TestNaturalChild DTO for direct access, no proxy required.
    com.poesys.db.memcached_test.ITestNaturalChild dto =
      new com.poesys.db.memcached_test.TestNaturalChild(key, key1, key2, subkey);

    // Create the business DTO.
    return new com.poesys.bs.memcached_test.BsTestNaturalChild(dto);
  }
  /**
   * Create a new TestAssociationChild child of TestNaturalParent with a composite key.
   * 
   * @param parent the parent of the child object to create
   * @param key1 composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param key2 composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param testXId Attribute that is part of the association key
   * @param testYId Attribute that is part of the association key
   * @param tsACAttr Data attribute for the Test Association Child composite aggregation of the Test
Natural Parent, identified by the zKey TestZ object
   * @return a new TestAssociationChild business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public com.poesys.bs.memcached_test.BsTestAssociationChild createTestAssociationChild(com.poesys.bs.memcached_test.BsTestNaturalParent parent, java.lang.Long key1, java.lang.Long key2, java.math.BigInteger testXId, java.math.BigInteger testYId, java.lang.Long tsACAttr) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.CompositePrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.BigIntegerColumnValue("testXId", testXId));
      list.add(new com.poesys.db.col.BigIntegerColumnValue("testYId", testYId));
	  com.poesys.db.pk.IPrimaryKey subKey = 
	    com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.memcached_test.TestAssociationChild");
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parent.getPrimaryKey(), 
                                                              subKey,
                                                              "com.poesys.db.memcached_test.TestAssociationChild");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a composite-key child data-access TestAssociationChild DTO for direct access, no proxy required.
    com.poesys.db.memcached_test.ITestAssociationChild dto =
      new com.poesys.db.memcached_test.TestAssociationChild(key, key1, key2, testXId, testYId, tsACAttr);

    // Create the business DTO.
    return new com.poesys.bs.memcached_test.BsTestAssociationChild(dto);
  }

  @Override
  public void truncateTable(String tableName) throws DelegateException {
    java.sql.Connection c = getConnection();
    com.poesys.db.dao.ddl.ISql sql = null;
    com.poesys.db.dao.ddl.IExecuteSql executive = null;

    // First truncate any child tables.
    sql = new com.poesys.db.dao.ddl.TruncateTableSql("TestNaturalChild");
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "TestNaturalChild", e);
    }

    sql = new com.poesys.db.dao.ddl.TruncateTableSql("TestAssociationChild");
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "TestAssociationChild", e);
    }

    // Now truncate the current table.
    sql = new com.poesys.db.dao.ddl.TruncateTableSql(tableName);
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "TestNaturalParent", e);
    }
  }
}
