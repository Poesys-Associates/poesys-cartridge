/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.db.test;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the Self2Self. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Immutable</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractSelf2Self extends AbstractDto implements ISelf2Self {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the parents2 association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryParents2Setter extends com.poesys.db.dto.AbstractObjectSetter<com.poesys.db.test.ISelf2> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryParents2Setter object.
     */
    public QueryParents2Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self2.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return parents2Key;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ISelf2> getSql() {
      return new com.poesys.db.test.sql.QuerySelf2();
    }

    @Override
    protected void set(com.poesys.db.test.ISelf2 dto) {
      // No status change, this is just filling in the object data.
      parents2 = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated parents2Self2 is not null
      return parents2 != null;
    }
  }


  /**
   * Foreign key object used by QueryParents2Setter nested class to query object
   */
  private IPrimaryKey parents2Key;
  
  /**
   * Set the foreign key parents2Key. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param parents2Key the foreign key
   */
  void setParents2Key(IPrimaryKey parents2Key) {
    this.parents2Key = parents2Key;
  }

  /**
   * Nested class that manages the children2 association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryChildren2Setter extends com.poesys.db.dto.AbstractObjectSetter<com.poesys.db.test.ISelf2> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryChildren2Setter object.
     */
    public QueryChildren2Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self2.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return children2Key;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ISelf2> getSql() {
      return new com.poesys.db.test.sql.QuerySelf2();
    }

    @Override
    protected void set(com.poesys.db.test.ISelf2 dto) {
      // No status change, this is just filling in the object data.
      children2 = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated children2Self2 is not null
      return children2 != null;
    }
  }


  /**
   * Foreign key object used by QueryChildren2Setter nested class to query object
   */
  private IPrimaryKey children2Key;
  
  /**
   * Set the foreign key children2Key. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param children2Key the foreign key
   */
  void setChildren2Key(IPrimaryKey children2Key) {
    this.children2Key = children2Key;
  }


  /**
   * Create an empty Self2Self for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractSelf2Self() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the parents2Self2 property.
    querySetters.add(new QueryParents2Setter());

    // Add the setters for the children2Self2 property.
    querySetters.add(new QueryChildren2Setter());
  }

  /**
   * Create a Self2Self. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Self2Self
   * @param children2Object wraps an associated ISelf2 object
   * @param parents2Object wraps an associated ISelf2 object
   * @param children2Self2Id Attribute that is part of the association key
   * @param parents2Self2Id Attribute that is part of the association key
   */
  public AbstractSelf2Self(IPrimaryKey key, com.poesys.db.test.ISelf2 children2Object, com.poesys.db.test.ISelf2 parents2Object, java.math.BigInteger children2Self2Id, java.math.BigInteger parents2Self2Id) {
    this.key = key;

    this.children2Self2Id = children2Self2Id;

    if (children2Self2Id == null) {
      throw new com.poesys.db.InvalidParametersException("children2Self2Id is required for " + key.getValueList());
    }
    
    this.parents2Self2Id = parents2Self2Id;

    if (parents2Self2Id == null) {
      throw new com.poesys.db.InvalidParametersException("parents2Self2Id is required for " + key.getValueList());
    }
    
    // Associated key object
    children2 = children2Object;
    
    // Associated key object
    parents2 = parents2Object;
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the parents2 property.
    querySetters.add(new QueryParents2Setter());
    
    
    // Add the setters for the children2 property.
    querySetters.add(new QueryChildren2Setter());
    
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractSelf2Self other = (AbstractSelf2Self)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractSelf2Self other = (AbstractSelf2Self)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.db.test";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("com.poesys.db.test");
    String subsystem =
      "com.poesys.db.test"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property parents2
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private com.poesys.db.test.ISelf2 parents2;
  
  /**
   * Get an object of com.poesys.db.test.ISelf2.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a com.poesys.db.test.ISelf2
   */

  public com.poesys.db.test.ISelf2 getParents2() {
    return parents2;
  }

  /**
   * Clear the parents2 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearParents2() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property children2
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private com.poesys.db.test.ISelf2 children2;
  
  /**
   * Get an object of com.poesys.db.test.ISelf2.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a com.poesys.db.test.ISelf2
   */

  public com.poesys.db.test.ISelf2 getChildren2() {
    return children2;
  }

  /**
   * Clear the children2 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearChildren2() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property children2Self2Id
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger children2Self2Id;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getChildren2Self2Id() {
    return children2Self2Id;
  }

  /**
   * Clear the children2Self2Id data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearChildren2Self2Id() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property parents2Self2Id
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger parents2Self2Id;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getParents2Self2Id() {
    return parents2Self2Id;
  }

  /**
   * Clear the parents2Self2Id data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearParents2Self2Id() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }

  /**
   * Create the inserters for the Self2Self and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.db.test.ISelf2Self> self2SelfFactory =
      manager.getFactory("com.poesys.db.test.Self2Self",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<ISelf2Self> sql =
      new com.poesys.db.test.sql.InsertSelf2Self();
    com.poesys.db.dao.insert.IInsert<ISelf2Self> inserter =
      self2SelfFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}