/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.db.memcached_test;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the TestParent. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTestParent extends AbstractDto implements ITestParent {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested children
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryChildrenByTestParent
   */
  private class QueryChildrenSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.memcached_test.ITestChild, ITestParent, java.util.List<com.poesys.db.memcached_test.ITestChild>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryChildrenSetter object.
     */
    public QueryChildrenSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITestParent getParametersDto() {
      return AbstractTestParent.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.memcached_test.ITestChild, ITestParent> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryChildrenByTestParent();
    }

    @Override
    protected void set(java.util.List<com.poesys.db.memcached_test.ITestChild> list) {
      // No status change; this is just filling in the object data.
      children = list;
      // Add the primary keys to the serialized key list if there are any.
      if (children != null) {
        for (com.poesys.db.dto.IDbDto object : children) {
          childrenKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated children list is not null
      return children != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested children list
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTestChild
   */
  private class ReadChildrenSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<com.poesys.db.memcached_test.ITestChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadChildrenSetter object to read the children list.
     */
    public ReadChildrenSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild.class.getName();
    }

    @Override
    protected java.util.List<com.poesys.db.memcached_test.ITestChild> getObjectList() {
      return children;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return childrenKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestChild();
    }

    @Override
    protected void set(java.util.List<com.poesys.db.memcached_test.ITestChild> list) {
      children = list;
    }
  }

  /**
   * Insert setter for inserting nested to-many association children.
   *
   * @see com.poesys.db.memcached_test.sql.InsertTestChild
   */
  private class InsertChildrenSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association children source: AddToManyChildCollectionProperties

    /**
     * Create an InsertChildrenSetter object.
     */
    public InsertChildrenSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestChild.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = children;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added children and updated children.
   * Deleted children are deleted in the database cascade delete.
   */
   
  /**
   * Add com.poesys.db.memcached_test.ITestChild object to children collection.
   * 
   * @param object the com.poesys.db.memcached_test.ITestChild object
   */
  public void addChildrenTestChild(com.poesys.db.memcached_test.ITestChild object) {
    if (children == null) {
      // Association not yet created, create it.
      children = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.memcached_test.ITestChild>();
    }
    children.add(object);
    // Add the primary key to the primary key array.
    childrenKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested explicitChildren
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryExplicitChildrenByTestParent
   */
  private class QueryExplicitChildrenSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.memcached_test.ITestExplicitKeyChild, ITestParent, java.util.Collection<com.poesys.db.memcached_test.ITestExplicitKeyChild>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryExplicitChildrenSetter object.
     */
    public QueryExplicitChildrenSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestExplicitKeyChild.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITestParent getParametersDto() {
      return AbstractTestParent.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.memcached_test.ITestExplicitKeyChild, ITestParent> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryExplicitChildrenByTestParent();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestExplicitKeyChild> list) {
      // No status change; this is just filling in the object data.
      explicitChildren = list;
      // Add the primary keys to the serialized key list if there are any.
      if (explicitChildren != null) {
        for (com.poesys.db.dto.IDbDto object : explicitChildren) {
          explicitChildrenKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated explicitChildren list is not null
      return explicitChildren != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested explicitChildren collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTestExplicitKeyChild
   */
  private class ReadExplicitChildrenSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.db.memcached_test.ITestExplicitKeyChild> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadExplicitChildrenSetter object to read the explicitChildren collection.
     */
    public ReadExplicitChildrenSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestExplicitKeyChild.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.ITestExplicitKeyChild> getObjectCollection() {
      return explicitChildren;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return explicitChildrenKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestExplicitKeyChild> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestExplicitKeyChild();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestExplicitKeyChild> collection) {
     explicitChildren = collection;
    }
  }

  /**
   * Insert setter for inserting nested to-many association explicitChildren.
   *
   * @see com.poesys.db.memcached_test.sql.InsertTestExplicitKeyChild
   */
  private class InsertExplicitChildrenSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association explicitChildren source: AddToManyChildCollectionProperties

    /**
     * Create an InsertExplicitChildrenSetter object.
     */
    public InsertExplicitChildrenSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestExplicitKeyChild.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = explicitChildren;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added explicitChildren and updated explicitChildren.
   * Deleted explicitChildren are deleted in the database cascade delete.
   */
   
  /**
   * Add com.poesys.db.memcached_test.ITestExplicitKeyChild object to explicitChildren collection.
   * 
   * @param object the com.poesys.db.memcached_test.ITestExplicitKeyChild object
   */
  public void addExplicitChildrenTestExplicitKeyChild(com.poesys.db.memcached_test.ITestExplicitKeyChild object) {
    if (explicitChildren == null) {
      // Association not yet created, create it.
      explicitChildren = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.memcached_test.ITestExplicitKeyChild>();
    }
    explicitChildren.add(object);
    // Add the primary key to the primary key array.
    explicitChildrenKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Create an empty TestParent for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractTestParent() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the children property.
    querySetters.add(new QueryChildrenSetter());
    readObjectSetters.add(new ReadChildrenSetter());
    insertSetters.add(new InsertChildrenSetter());
    
    // Add the many-to-many collection setters for the explicitChildren property.
    querySetters.add(new QueryExplicitChildrenSetter());
    readObjectSetters.add(new ReadExplicitChildrenSetter());
    insertSetters.add(new InsertExplicitChildrenSetter());
  }

  /**
   * Create a TestParent. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the TestParent
   * @param testParentId primary key attribute
   * @param parentOccupation 
   */
  public AbstractTestParent(IPrimaryKey key, java.math.BigInteger testParentId, java.lang.String parentOccupation) {
    this.key = key;

    this.testParentId = testParentId;

    if (testParentId == null) {
      throw new com.poesys.db.InvalidParametersException("testParentId is required for " + key.getValueList());
    }
    
    this.parentOccupation = parentOccupation;

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the children property.
    querySetters.add(new QueryChildrenSetter());
    readObjectSetters.add(new ReadChildrenSetter());
    insertSetters.add(new InsertChildrenSetter());
    
    // Add the many-to-many collection setters for the explicitChildren property.
    querySetters.add(new QueryExplicitChildrenSetter());
    readObjectSetters.add(new ReadExplicitChildrenSetter());
    insertSetters.add(new InsertExplicitChildrenSetter());
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractTestParent other = (AbstractTestParent)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractTestParent other = (AbstractTestParent)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.db.memcached_test";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (children != null) {
      for (com.poesys.db.dto.IDbDto dto : children) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (explicitChildren != null) {
      for (com.poesys.db.dto.IDbDto dto : explicitChildren) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("com.poesys.db.memcached_test");
    String subsystem =
      "com.poesys.db.memcached_test"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property testParentId
   *
   * <p>
   * Primary key attribute
   * </p>
   *
   * Added by AddGeneratedKeyProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger testParentId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTestParentId() {
    return testParentId;
  }

  /**
   * Clear the testParentId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTestParentId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property parentOccupation
   *
   * 
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String parentOccupation;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getParentOccupation() {
    return parentOccupation;
  }

  /**
   * Clear the parentOccupation data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearParentOccupation() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the parentOccupation.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param parentOccupation the value with which to set the property
   */
  public  void setParentOccupation(java.lang.String parentOccupation) {
    this.parentOccupation = parentOccupation;
    setChanged();
  }
  /**
   * Nested property children
   *
   * <p>
   * The test child of the test parent
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.List<com.poesys.db.memcached_test.ITestChild> children;
  // Ordered list of keys of the objects in the children list
  java.util.List<com.poesys.db.pk.IPrimaryKey> childrenKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a list of com.poesys.db.memcached_test.ITestChild.
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @return a java.util.List<com.poesys.db.memcached_test.ITestChild>
   */

  public java.util.List<com.poesys.db.memcached_test.ITestChild> getChildren() {
    return children;
  }

  /**
   * Clear the children data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearChildren() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property explicitChildren
   *
   * <p>
   * The child with an explicit key
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.memcached_test.ITestExplicitKeyChild> explicitChildren;
  // Ordered list of keys of the objects in the explicitChildren list
  java.util.List<com.poesys.db.pk.IPrimaryKey> explicitChildrenKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.memcached_test.ITestExplicitKeyChild.
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.ITestExplicitKeyChild>
   */

  public java.util.Collection<com.poesys.db.memcached_test.ITestExplicitKeyChild> getExplicitChildren() {
    return explicitChildren;
  }

  /**
   * Clear the explicitChildren data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearExplicitChildren() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up children.
    if (subject != null && subject instanceof com.poesys.db.memcached_test.ITestChild && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        children != null) {
      // Delete to-many children child from collection
      children.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up explicitChildren.
    if (subject != null && subject instanceof com.poesys.db.memcached_test.ITestExplicitKeyChild && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        explicitChildren != null) {
      // Delete to-many explicitChildren child from collection
      explicitChildren.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }
  }

  /**
   * Create the inserters for the TestParent and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestParent> testParentFactory =
      manager.getFactory("com.poesys.db.memcached_test.TestParent",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<ITestParent> sql =
      new com.poesys.db.memcached_test.sql.InsertTestParent();
    com.poesys.db.dao.insert.IInsert<ITestParent> inserter =
      testParentFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}