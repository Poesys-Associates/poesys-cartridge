/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.db.test;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the Self4Self. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Immutable</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractSelf4Self extends AbstractDto implements ISelf4Self {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the child4 association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryChild4Setter extends com.poesys.db.dto.AbstractObjectSetter<com.poesys.db.test.ISelf4> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryChild4Setter object.
     */
    public QueryChild4Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self4.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return child4Key;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ISelf4> getSql() {
      return new com.poesys.db.test.sql.QuerySelf4();
    }

    @Override
    protected void set(com.poesys.db.test.ISelf4 dto) {
      // No status change, this is just filling in the object data.
      child4 = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated child is not null
      return child4 != null;
    }
  }


  /**
   * Foreign key object used by QueryChild4Setter nested class to query object
   */
  private IPrimaryKey child4Key;
  
  /**
   * Set the foreign key child4Key. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param child4Key the foreign key
   */
  void setChild4Key(IPrimaryKey child4Key) {
    this.child4Key = child4Key;
  }

  /**
   * Nested class that manages the parent4 association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryParent4Setter extends com.poesys.db.dto.AbstractObjectSetter<com.poesys.db.test.ISelf4> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryParent4Setter object.
     */
    public QueryParent4Setter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Self4.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return parent4Key;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.ISelf4> getSql() {
      return new com.poesys.db.test.sql.QuerySelf4();
    }

    @Override
    protected void set(com.poesys.db.test.ISelf4 dto) {
      // No status change, this is just filling in the object data.
      parent4 = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated parent is not null
      return parent4 != null;
    }
  }


  /**
   * Foreign key object used by QueryParent4Setter nested class to query object
   */
  private IPrimaryKey parent4Key;
  
  /**
   * Set the foreign key parent4Key. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param parent4Key the foreign key
   */
  void setParent4Key(IPrimaryKey parent4Key) {
    this.parent4Key = parent4Key;
  }


  /**
   * Create an empty Self4Self for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractSelf4Self() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the child property.
    querySetters.add(new QueryChild4Setter());

    // Add the setters for the parent property.
    querySetters.add(new QueryParent4Setter());
  }

  /**
   * Create a Self4Self. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Self4Self
   * @param children4Object wraps an associated ISelf4 object
   * @param parents4Object wraps an associated ISelf4 object
   * @param children4Key1 Attribute that is part of the association key
   * @param parents4Key1 Attribute that is part of the association key
   * @param children4Key2 Attribute that is part of the association key
   * @param parents4Key2 Attribute that is part of the association key
   */
  public AbstractSelf4Self(IPrimaryKey key, com.poesys.db.test.ISelf4 children4Object, com.poesys.db.test.ISelf4 parents4Object, java.lang.Long children4Key1, java.lang.Long parents4Key1, java.lang.Long children4Key2, java.lang.Long parents4Key2) {
    this.key = key;

    this.children4Key1 = children4Key1;

    if (children4Key1 == null) {
      throw new com.poesys.db.InvalidParametersException("children4Key1 is required for " + key.getValueList());
    }
    
    this.parents4Key1 = parents4Key1;

    if (parents4Key1 == null) {
      throw new com.poesys.db.InvalidParametersException("parents4Key1 is required for " + key.getValueList());
    }
    
    this.children4Key2 = children4Key2;

    if (children4Key2 == null) {
      throw new com.poesys.db.InvalidParametersException("children4Key2 is required for " + key.getValueList());
    }
    
    this.parents4Key2 = parents4Key2;

    if (parents4Key2 == null) {
      throw new com.poesys.db.InvalidParametersException("parents4Key2 is required for " + key.getValueList());
    }
    
    // Associated key object
    child4 = children4Object;
    
    // Associated key object
    parent4 = parents4Object;
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the child4 property.
    querySetters.add(new QueryChild4Setter());
    
    
    // Add the setters for the parent4 property.
    querySetters.add(new QueryParent4Setter());
    
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractSelf4Self other = (AbstractSelf4Self)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractSelf4Self other = (AbstractSelf4Self)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.db.test";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("com.poesys.db.test");
    String subsystem =
      "com.poesys.db.test"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property child4
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private com.poesys.db.test.ISelf4 child4;
  
  /**
   * Get an object of com.poesys.db.test.ISelf4.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a com.poesys.db.test.ISelf4
   */

  public com.poesys.db.test.ISelf4 getChild4() {
    return child4;
  }

  /**
   * Clear the child4 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearChild4() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property parent4
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private com.poesys.db.test.ISelf4 parent4;
  
  /**
   * Get an object of com.poesys.db.test.ISelf4.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a com.poesys.db.test.ISelf4
   */

  public com.poesys.db.test.ISelf4 getParent4() {
    return parent4;
  }

  /**
   * Clear the parent4 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearParent4() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property children4Key1
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long children4Key1;
  
  /**
   * Get an object of java.lang.Long.
   *
   * Source: AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.lang.Long
   */

  public java.lang.Long getChildren4Key1() {
    return children4Key1;
  }

  /**
   * Clear the children4Key1 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearChildren4Key1() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property parents4Key1
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long parents4Key1;
  
  /**
   * Get an object of java.lang.Long.
   *
   * Source: AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.lang.Long
   */

  public java.lang.Long getParents4Key1() {
    return parents4Key1;
  }

  /**
   * Clear the parents4Key1 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearParents4Key1() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property children4Key2
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long children4Key2;
  
  /**
   * Get an object of java.lang.Long.
   *
   * Source: AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.lang.Long
   */

  public java.lang.Long getChildren4Key2() {
    return children4Key2;
  }

  /**
   * Clear the children4Key2 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearChildren4Key2() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property parents4Key2
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: true
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Long parents4Key2;
  
  /**
   * Get an object of java.lang.Long.
   *
   * Source: AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.lang.Long
   */

  public java.lang.Long getParents4Key2() {
    return parents4Key2;
  }

  /**
   * Clear the parents4Key2 data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearParents4Key2() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }

  /**
   * Create the inserters for the Self4Self and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.db.test.ISelf4Self> self4SelfFactory =
      manager.getFactory("com.poesys.db.test.Self4Self",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<ISelf4Self> sql =
      new com.poesys.db.test.sql.InsertSelf4Self();
    com.poesys.db.dao.insert.IInsert<ISelf4Self> inserter =
      self4SelfFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}