/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.db.memcached_test;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the TestZ. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The TestZ object is the assocation class that represents the many-to-many
 * association of TestX and TestY objects.
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTestZ extends AbstractDto implements ITestZ {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  

  /**
   * Nested class that manages the x association data
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryXSetter extends com.poesys.db.dto.AbstractObjectSetter<com.poesys.db.memcached_test.ITestX> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryXSetter object.
     */
    public QueryXSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestX.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return xKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.memcached_test.ITestX> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestX();
    }

    @Override
    protected void set(com.poesys.db.memcached_test.ITestX dto) {
      // No status change, this is just filling in the object data.
      x = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated testX is not null
      return x != null;
    }
  }


  /**
   * Foreign key object used by QueryXSetter nested class to query object
   */
  private IPrimaryKey xKey;
  
  /**
   * Set the foreign key xKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param xKey the foreign key
   */
  void setXKey(IPrimaryKey xKey) {
    this.xKey = xKey;
  }

  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested tests
   *
   * Source: AddToManyAssociatedKeyCollectionProperties
   *
   * @see com.poesys.db.memcached_test.sql.QueryTestsByTestZ
   */
  private class QueryTestsSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.db.memcached_test.ITestAssociationChild, ITestZ, java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryTestsSetter object.
     */
    public QueryTestsSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestAssociationChild.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITestZ getParametersDto() {
      return AbstractTestZ.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.db.memcached_test.ITestAssociationChild, ITestZ> getSql() {
      return new com.poesys.db.memcached_test.sql.QueryTestsByTestZ();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild> list) {
      // No status change; this is just filling in the object data.
      tests = list;
      // Add the primary keys to the serialized key list if there are any.
      if (tests != null) {
        for (com.poesys.db.dto.IDbDto object : tests) {
          testsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated tests list is not null
      return tests != null;
    }
  }

  /**
   * Insert setter for inserting nested to-many association tests.
   *
   * @see com.poesys.db.memcached_test.sql.InsertTestAssociationChild
   */
  private class InsertTestsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association tests source: AddToManyAssociatedKeyCollectionProperties

    /**
     * Create an InsertTestsSetter object.
     */
    public InsertTestsSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestAssociationChild.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = tests;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added tests, updated tests, and 
   * deleted tests. 
   */
   
  private class UpdateTestsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<com.poesys.db.memcached_test.ITestAssociationChild, java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateTestsSetter object.
     */
    public UpdateTestsSetter() {
      super("com.poesys.db.memcached_test", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // tests source: AddToManyAssociatedKeyCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestAssociationChild> factory = 
        manager.getFactory(com.poesys.db.memcached_test.TestAssociationChild.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<com.poesys.db.memcached_test.ITestAssociationChild> updater =
        factory.getUpdateBatch(new com.poesys.db.memcached_test.sql.UpdateTestAssociationChild());

      // Update the object of the current class.
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestAssociationChild> factory = 
        manager.getFactory(com.poesys.db.memcached_test.TestAssociationChild.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<com.poesys.db.memcached_test.ITestAssociationChild> dao = 
        factory.getDeleteBatch(new com.poesys.db.memcached_test.sql.DeleteTestAssociationChild());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestAssociationChild> factory = 
        manager.getFactory(com.poesys.db.memcached_test.TestAssociationChild.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<com.poesys.db.memcached_test.ITestAssociationChild> inserter =
        factory.getInsertBatch(new com.poesys.db.memcached_test.sql.InsertTestAssociationChild());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild> getDtos() {
      return tests;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.db.memcached_test.TestAssociationChild.class.getName();
    }
  }

  /**
   * Add com.poesys.db.memcached_test.ITestAssociationChild object to tests collection.
   * 
   * @param object the com.poesys.db.memcached_test.ITestAssociationChild object
   */
  public void addTestsTestAssociationChild(com.poesys.db.memcached_test.ITestAssociationChild object) {
    if (tests == null) {
      // Association not yet created, create it.
      tests = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.memcached_test.ITestAssociationChild>();
    }
    tests.add(object);
    // Add the primary key to the primary key array.
    testsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Create an empty TestZ for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractTestZ() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the testY property.

    // Add the setters for the testX property.
    querySetters.add(new QueryXSetter());
    
    // Add the many-to-many collection setters for the tests property.
    querySetters.add(new QueryTestsSetter());
    insertSetters.add(new InsertTestsSetter());
    postSetters.add(new UpdateTestsSetter());
  }

  /**
   * Create a TestZ. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the TestZ
   * @param xsObject wraps an associated ITestX object
   * @param ysObject wraps an associated ITestY object
   * @param testXId Attribute that is part of the association key
   * @param testYId Attribute that is part of the association key
   * @param zAttr 
   */
  public AbstractTestZ(IPrimaryKey key, com.poesys.db.memcached_test.ITestX xsObject, com.poesys.db.memcached_test.ITestY ysObject, java.math.BigInteger testXId, java.math.BigInteger testYId, java.lang.String zAttr) {
    this.key = key;

    this.testXId = testXId;

    if (testXId == null) {
      throw new com.poesys.db.InvalidParametersException("testXId is required for " + key.getValueList());
    }
    
    this.testYId = testYId;

    if (testYId == null) {
      throw new com.poesys.db.InvalidParametersException("testYId is required for " + key.getValueList());
    }
    
    this.zAttr = zAttr;

    // Associated key object
    x = xsObject;
    
    // Associated key object
    y = ysObject;
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the y property.
    
    
    // Add the setters for the x property.
    querySetters.add(new QueryXSetter());
    
    
    // Add the many-to-many collection setters for the tests property.
    querySetters.add(new QueryTestsSetter());
    insertSetters.add(new InsertTestsSetter());
    postSetters.add(new UpdateTestsSetter());
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    AbstractTestZ other = (AbstractTestZ)arg0;
    return other.key.equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    AbstractTestZ other = (AbstractTestZ)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.key.compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.db.memcached_test";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (tests != null) {
      for (com.poesys.db.dto.IDbDto dto : tests) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("com.poesys.db.memcached_test");
    String subsystem =
      "com.poesys.db.memcached_test"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property zAttr
   *
   * 
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String zAttr;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getZAttr() {
    return zAttr;
  }

  /**
   * Clear the zAttr data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearZAttr() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the zAttr.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param zAttr the value with which to set the property
   */
  public  void setZAttr(java.lang.String zAttr) {
    this.zAttr = zAttr;
    setChanged();
  }
  /**
   * Nested property tests
   *
   * 
   *
   * Added by AddToManyAssociatedKeyCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild> tests;
  // Ordered list of keys of the objects in the tests list
  java.util.List<com.poesys.db.pk.IPrimaryKey> testsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.db.memcached_test.ITestAssociationChild.
   *
   * Source: AddToManyAssociatedKeyCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild>
   */

  public java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild> getTests() {
    return tests;
  }

  /**
   * Clear the tests data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTests() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the tests.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param tests the value with which to set the property
   */
  public  void setTests(java.util.Collection<com.poesys.db.memcached_test.ITestAssociationChild> tests) {
    this.tests = tests;
    // Add the primary keys of the new collection to the serialized key list.
    testsKeys.clear();
    if (tests != null) {
      for (com.poesys.db.dto.IDbDto object : tests) {
        testsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property y
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  private com.poesys.db.memcached_test.ITestY y;
  
  /**
   * Get an object of com.poesys.db.memcached_test.ITestY.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a com.poesys.db.memcached_test.ITestY
   * @throws java.sql.SQLException when there is a database problem
   */

  public com.poesys.db.memcached_test.ITestY getY() throws java.sql.SQLException {
    return y;
  }

  /**
   * Clear the y data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearY() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  void setY(com.poesys.db.memcached_test.ITestY y)
      throws com.poesys.db.InvalidParametersException {
    if (y == null) {
      throw new com.poesys.db.InvalidParametersException("y is required");
    }
    
    this.y = y;
    setChanged();
  }
  /**
   * Nested property x
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private com.poesys.db.memcached_test.ITestX x;
  
  /**
   * Get an object of com.poesys.db.memcached_test.ITestX.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a com.poesys.db.memcached_test.ITestX
   */

  public com.poesys.db.memcached_test.ITestX getX() {
    return x;
  }

  /**
   * Clear the x data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearX() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property testXId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger testXId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTestXId() {
    return testXId;
  }

  /**
   * Clear the testXId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTestXId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property testYId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger testYId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTestYId() {
    return testYId;
  }

  /**
   * Clear the testYId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTestYId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up tests.
    if (subject != null && subject instanceof com.poesys.db.memcached_test.ITestAssociationChild && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        tests != null) {
      // Delete to-many tests child from collection
      tests.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }
  }

  /**
   * Create the inserters for the TestZ and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.db.memcached_test.ITestZ> testZFactory =
      manager.getFactory("com.poesys.db.memcached_test.TestZ",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<ITestZ> sql =
      new com.poesys.db.memcached_test.sql.InsertTestZ();
    com.poesys.db.dao.insert.IInsert<ITestZ> inserter =
      testZFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}