/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.db.test;


import com.poesys.db.pk.IPrimaryKey;

/**
 * <p>
 * A data-access layer data-transfer object for the MapElement. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A polymorphism mapped to a genome map
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractMapElement extends com.poesys.db.test.TairObject implements IMapElement {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the map association data
   *
   * Source: AddAssociationObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryMapSetter extends com.poesys.db.dto.AbstractObjectSetter<com.poesys.db.test.IMap> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryMapSetter object.
     */
    public QueryMapSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Map.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return mapKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.IMap> getSql() {
      return new com.poesys.db.test.sql.QueryMap();
    }

    @Override
    protected void set(com.poesys.db.test.IMap dto) {
      // No status change, this is just filling in the object data.
      map = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated map is not null
      return map != null;
    }
  }

  /**
   * Insert setter for inserting nested object property map.
   */
  private class InsertMapSetter 
      extends com.poesys.db.dto.AbstractInsertSetter {
    // Property map source: AddAssociationObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create an InsertMapSetter object.
     */
    public InsertMapSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Map.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.ArrayList<com.poesys.db.dto.IDbDto> array =
        new java.util.ArrayList<com.poesys.db.dto.IDbDto>(1);
      array.add(map);
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = array;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      // Key type: IdentityKey
      return false;
    }
  }

  /**
   * Setter for processing added map, updated map, and 
   * deleted map. 
   */
   
  private class UpdateMapSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObject<com.poesys.db.test.IMap> {
    private static final long serialVersionUID = 1L;

    /**
     * Create an UpdateMapSetter object.
     */
    public UpdateMapSetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, com.poesys.db.test.IMap dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // map source: AddAssociationObjectProperties
        // Immutable: true
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, com.poesys.db.test.IMap dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.db.test.IMap> factory = 
        manager.getFactory(com.poesys.db.test.Map.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDelete<com.poesys.db.test.IMap> dao = 
        factory.getDelete(new com.poesys.db.test.sql.DeleteMap());
      dao.delete(connection, dto);
    }

    @Override
    protected void doNew(java.sql.Connection connection, com.poesys.db.test.IMap dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.db.test.IMap> factory = 
        manager.getFactory(com.poesys.db.test.Map.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsert<com.poesys.db.test.IMap> inserter =
        factory.getInsert(new com.poesys.db.test.sql.InsertMap(), createKey());

      // TairObject
      final com.poesys.db.dao.IDaoFactory<com.poesys.db.test.ITairObject> tairObjectFactory =
        manager.getFactory("com.poesys.db.test.TairObject", "com.poesys.db.test", 2147483647);
      com.poesys.db.dao.insert.IInsert<com.poesys.db.test.ITairObject> tairObjectInserter =
        tairObjectFactory.getInsert(new com.poesys.db.test.sql.InsertTairObject(), false);

      // Insert the superclass objects from the root down. Suppress nested
      // inserts for the superclasses, wait until the concrete class. Also set 
      // pre-insert suppression off to have the root insert linked, to-one class
      // objects.
      dto.setSuppressNestedInserts(true);
      dto.setSuppressNestedPreInserts(false);
      tairObjectInserter.insert(connection, dto);

      // Suppress inserts in concrete class.
      dto.setSuppressNestedPreInserts(true);
      
      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      dto.setSuppressNestedInserts(false);
      inserter.insert(connection, dto);
    }

    @Override
    protected com.poesys.db.test.IMap getDto() {
      return map;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.db.test.Map.class.getName();
    }

    @Override
    protected boolean createKey() {
      // Key type: IdentityKey
      return false;
    }
  }

  /**
   * Foreign key object used by QueryMapSetter nested class to query object
   */
  private IPrimaryKey mapKey;
  
  /**
   * Set the foreign key mapKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param mapKey the foreign key
   */
  void setMapKey(IPrimaryKey mapKey) {
    this.mapKey = mapKey;
  }

  /**
   * Nested class that manages the poly association data
   *
   * Source: AddAssociationObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryPolySetter extends com.poesys.db.dto.AbstractObjectSetter<com.poesys.db.test.IPoly> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryPolySetter object.
     */
    public QueryPolySetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Poly.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return polyKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.db.test.IPoly> getSql() {
      return new com.poesys.db.test.sql.QueryPoly();
    }

    @Override
    protected void set(com.poesys.db.test.IPoly dto) {
      // No status change, this is just filling in the object data.
      poly = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated poly is not null
      return poly != null;
    }
  }

  /**
   * Insert setter for inserting nested object property poly.
   */
  private class InsertPolySetter 
      extends com.poesys.db.dto.AbstractInsertSetter {
    // Property poly source: AddAssociationObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create an InsertPolySetter object.
     */
    public InsertPolySetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.db.test.Poly.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.ArrayList<com.poesys.db.dto.IDbDto> array =
        new java.util.ArrayList<com.poesys.db.dto.IDbDto>(1);
      array.add(poly);
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = array;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      // Key type: IdentityKey
      return false;
    }
  }

  /**
   * Setter for processing added poly, updated poly, and 
   * deleted poly. 
   */
   
  private class UpdatePolySetter 
      extends com.poesys.db.dto.AbstractProcessNestedObject<com.poesys.db.test.IPoly> {
    private static final long serialVersionUID = 1L;

    /**
     * Create an UpdatePolySetter object.
     */
    public UpdatePolySetter() {
      super("com.poesys.db.test", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, com.poesys.db.test.IPoly dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // poly source: AddAssociationObjectProperties
        // Immutable: true
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, com.poesys.db.test.IPoly dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.db.test.IPoly> factory = 
        manager.getFactory(com.poesys.db.test.Poly.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDelete<com.poesys.db.test.IPoly> dao = 
        factory.getDelete(new com.poesys.db.test.sql.DeletePoly());
      dao.delete(connection, dto);
    }

    @Override
    protected void doNew(java.sql.Connection connection, com.poesys.db.test.IPoly dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.db.test.IPoly> factory = 
        manager.getFactory(com.poesys.db.test.Poly.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsert<com.poesys.db.test.IPoly> inserter =
        factory.getInsert(new com.poesys.db.test.sql.InsertPoly(), createKey());

      // TairObject
      final com.poesys.db.dao.IDaoFactory<com.poesys.db.test.ITairObject> tairObjectFactory =
        manager.getFactory("com.poesys.db.test.TairObject", "com.poesys.db.test", 2147483647);
      com.poesys.db.dao.insert.IInsert<com.poesys.db.test.ITairObject> tairObjectInserter =
        tairObjectFactory.getInsert(new com.poesys.db.test.sql.InsertTairObject(), false);

      // Insert the superclass objects from the root down. Suppress nested
      // inserts for the superclasses, wait until the concrete class. Also set 
      // pre-insert suppression off to have the root insert linked, to-one class
      // objects.
      dto.setSuppressNestedInserts(true);
      dto.setSuppressNestedPreInserts(false);
      tairObjectInserter.insert(connection, dto);

      // Suppress inserts in concrete class.
      dto.setSuppressNestedPreInserts(true);
      
      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      dto.setSuppressNestedInserts(false);
      inserter.insert(connection, dto);
    }

    @Override
    protected com.poesys.db.test.IPoly getDto() {
      return poly;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.db.test.Poly.class.getName();
    }

    @Override
    protected boolean createKey() {
      // Key type: IdentityKey
      return false;
    }
  }

  /**
   * Foreign key object used by QueryPolySetter nested class to query object
   */
  private IPrimaryKey polyKey;
  
  /**
   * Set the foreign key polyKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param polyKey the foreign key
   */
  void setPolyKey(IPrimaryKey polyKey) {
    this.polyKey = polyKey;
  }


  /**
   * Create an empty MapElement for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractMapElement() {
    super();
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the map property.
    querySetters.add(new QueryMapSetter());
    preSetters.add(new InsertMapSetter());
    postSetters.add(new UpdateMapSetter());

    // Add the setters for the poly property.
    querySetters.add(new QueryPolySetter());
    preSetters.add(new InsertPolySetter());
    postSetters.add(new UpdatePolySetter());
  }

  /**
   * Create a MapElement. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the MapElement
   * @param mapsObject wraps an associated IMap object
   * @param polysObject wraps an associated IPoly object
   * @param tairObjectId primary key attribute
   * @param mapId Attribute that is part of the key of an associated object (not part of primary key of association)
   * @param polyId Attribute that is part of the key of an associated object (not part of primary key of association)
   * @param version 
   * @param elementType 
   */
  public AbstractMapElement(IPrimaryKey key, com.poesys.db.test.IMap mapsObject, com.poesys.db.test.IPoly polysObject, java.math.BigInteger tairObjectId, java.math.BigInteger mapId, java.math.BigInteger polyId, java.lang.Integer version, java.lang.String elementType) {
    super(key, tairObjectId, version);

    this.mapId = mapId;

    if (mapId == null) {
      throw new com.poesys.db.InvalidParametersException("mapId is required for " + key.getValueList());
    }
    
    this.polyId = polyId;

    if (polyId == null) {
      throw new com.poesys.db.InvalidParametersException("polyId is required for " + key.getValueList());
    }
    
    this.elementType = elementType;

    // Associated key object
    map = mapsObject;
    
    // Associated key object
    poly = polysObject;
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the map property.
    querySetters.add(new QueryMapSetter());
    insertSetters.add(new InsertMapSetter());
    preSetters.add(new InsertMapSetter());
    postSetters.add(new UpdateMapSetter());
    
    
    // Add the setters for the poly property.
    querySetters.add(new QueryPolySetter());
    insertSetters.add(new InsertPolySetter());
    preSetters.add(new InsertPolySetter());
    postSetters.add(new UpdatePolySetter());
    
    abstractClass = false;
    createInserters();
  }

  /**
   * Nested property elementType
   *
   * 
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String elementType;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getElementType() {
    return elementType;
  }

  /**
   * Clear the elementType data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearElementType() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the elementType.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param elementType the value with which to set the property
   */
  public  void setElementType(java.lang.String elementType) {
    this.elementType = elementType;
    setChanged();
  }
  /**
   * Nested property map
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private com.poesys.db.test.IMap map;
  
  /**
   * Get an object of com.poesys.db.test.IMap.
   *
   * Source: AddAssociationObjectProperties
   * 
   * @return a com.poesys.db.test.IMap
   */

  public com.poesys.db.test.IMap getMap() {
    return map;
  }

  /**
   * Clear the map data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearMap() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property poly
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private com.poesys.db.test.IPoly poly;
  
  /**
   * Get an object of com.poesys.db.test.IPoly.
   *
   * Source: AddAssociationObjectProperties
   * 
   * @return a com.poesys.db.test.IPoly
   */

  public com.poesys.db.test.IPoly getPoly() {
    return poly;
  }

  /**
   * Clear the poly data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPoly() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property mapId
   *
   * <p>
   * Attribute from key of associated object (not part of primary key of association)
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddAssociationAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger mapId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddAssociationAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getMapId() {
    return mapId;
  }

  /**
   * Clear the mapId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearMapId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property polyId
   *
   * <p>
   * Attribute from key of associated object (not part of primary key of association)
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddAssociationAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger polyId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddAssociationAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getPolyId() {
    return polyId;
  }

  /**
   * Clear the polyId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPolyId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }

  /**
   * Create the inserters for the MapElement and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.db.test.IMapElement> mapElementFactory =
      manager.getFactory("com.poesys.db.test.MapElement",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<IMapElement> sql =
      new com.poesys.db.test.sql.InsertMapElement();
    com.poesys.db.dao.insert.IInsert<IMapElement> inserter =
      mapElementFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}