/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDelegate.vsl

package com.poesys.bs.memcached_test;


import com.poesys.bs.delegate.AbstractDataDelegate;
import com.poesys.bs.delegate.DelegateException;
import com.poesys.db.connection.IConnectionFactory.DBMS;
import com.poesys.db.dao.insert.IInsertSql;
import com.poesys.db.dao.update.IUpdateSql;
import com.poesys.db.dao.delete.IDeleteSql;
import com.poesys.db.dao.query.IKeyQuerySql;
import com.poesys.db.dao.query.IQuerySql;


/**
 * <p>
 * A business delegate that provides an application programming interface for
 * TestSequenceKey objects and their dependents. You should not modify this class;
 * instead, override or add methods in the class TestSequenceKeyDelegate, which
 * specializes this class.
 * </p>
 * 
 * @see TestSequenceKeyDelegate
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTestSequenceKeyDelegate
    extends AbstractDataDelegate<BsTestSequenceKey, com.poesys.db.memcached_test.ITestSequenceKey, com.poesys.db.pk.SequencePrimaryKey> {
  /**
   * Create an AbstractTestSequenceKeyDelegate object by supplying the database
   * subsystem in the database.properties file.
   * 
   * @param subsystem the database subsystem to use in database.properties
   */
  public AbstractTestSequenceKeyDelegate(String subsystem) {
    super(subsystem, 2147483647);
  }

  /**
   * Create an AbstractTestSequenceKeyDelegate object by supplying the database
   * subsystem in the database.properties file and a specific DBMS, usually
   * IConnectionFactory.DBMS.JNDI.
   * 
   * @param subsystem the database subsystem to use in database.properties
   * @param dbms the DBMS to use (usually IConnectionFactory.DBMS.JNDI)
   */
  public AbstractTestSequenceKeyDelegate(String subsystem, DBMS dbms) {
    super(subsystem, dbms, 2147483647);
  }

  @Override
  protected String getClassName() {
    return com.poesys.db.memcached_test.TestSequenceKey.class.getName();
  }

  @Override
  protected IInsertSql<com.poesys.db.memcached_test.ITestSequenceKey> getInsertSql() {
    return new com.poesys.db.memcached_test.sql.InsertTestSequenceKey();
  }

  @Override
  protected IDeleteSql<com.poesys.db.memcached_test.ITestSequenceKey> getDeleteSql() {
    return new com.poesys.db.memcached_test.sql.DeleteTestSequenceKey();
  }

  @Override
  protected IUpdateSql<com.poesys.db.memcached_test.ITestSequenceKey> getUpdateSql() {
    return new com.poesys.db.memcached_test.sql.UpdateTestSequenceKey();
  }

  @Override
  protected IKeyQuerySql<com.poesys.db.memcached_test.ITestSequenceKey> getQueryByKeySql() {
    return new com.poesys.db.memcached_test.sql.QueryTestSequenceKey();
  }

  @Override
  protected IQuerySql<com.poesys.db.memcached_test.ITestSequenceKey> getQueryListSql() {
    // Query-All method not required
    return new com.poesys.db.memcached_test.sql.QueryAllTestSequenceKey();
  }

  @Override
  protected com.poesys.bs.memcached_test.BsTestSequenceKey wrapData(com.poesys.db.memcached_test.ITestSequenceKey dto) {
    return new com.poesys.bs.memcached_test.BsTestSequenceKey(dto);
  }

  /**
   * <p>
   * Create a new TestSequenceKey with data fields.
   * </p>
   * <p>
   * The TestSequenceKey class has a sequence key; this method generates the
   * sequence for later insertion into the database.
   * </p>
   * 
   * @param testSequenceKeyId primary key attribute
   * @param data1 The first data element in the class
   * @return the new TestSequenceKey object
   * @throws DelegateException when there is a problem generating the key or
   *             creating the object
   */
  public com.poesys.bs.memcached_test.BsTestSequenceKey createTestSequenceKey(java.math.BigInteger testSequenceKeyId, java.lang.String data1)
      throws DelegateException {
      com.poesys.db.pk.SequencePrimaryKey key = null;

    // Generate a new TestSequenceKey id if the input key is null.
    if (testSequenceKeyId == null) {
      java.sql.Connection connection = null;
      try {
        connection = getConnection();
        if (connection == null) {
          throw new DelegateException("Could not get database connection to generate sequence");
        }
        
        if (dbms.equals(DBMS.MYSQL) || dbms.equals(DBMS.JNDI_MYSQL)) {
          key =
            com.poesys.db.pk.PrimaryKeyFactory.createMySqlSequenceKey(connection,
                                                                      "TestSequenceKey",
                                                                      "testSequenceKeyId",
                                                                      "com.poesys.db.memcached_test.TestSequenceKey");
        } else if (dbms.equals(DBMS.ORACLE) || dbms.equals(DBMS.JNDI_ORACLE)) {
          // Create key with sequence TestSequenceKey
          key =
            com.poesys.db.pk.PrimaryKeyFactory.createOracleSequenceKey(connection,
                                                                       "TestSequenceKey",
                                                                       "testSequenceKeyId",
                                                                       "com.poesys.db.memcached_test.TestSequenceKey");
        } else {
          throw new DelegateException("com.poesys.bs.delegate.msg.noDbms");
        }
        // Get the sequence number for use as an attribute value.
        testSequenceKeyId = key.getValue();
      } catch (com.poesys.db.InvalidParametersException e) {
        Object[] args = e.getParameters().toArray();
        String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
        throw new DelegateException(message, e);
      } catch (com.poesys.db.NoPrimaryKeyException e) {
        Object[] args = e.getParameters().toArray();
        String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
        throw new DelegateException(message, e);
      } catch (java.sql.SQLException e) {
        throw new DelegateException(e.getMessage(), e);
      } finally {
        // Done with this connection, close it and return it to the pool.
        if (connection != null) {
          try {
            connection.close();
          } catch (java.sql.SQLException e) {
            throw new DelegateException(e.getMessage(), e);
          }
        }
      }
    } else {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("testSequenceKeyId", testSequenceKeyId, "com.poesys.db.memcached_test.TestSequenceKey");
    }

    // Create a data-access DTO for direct access, no proxy required.
    com.poesys.db.memcached_test.ITestSequenceKey dto =
      new com.poesys.db.memcached_test.TestSequenceKey(key, testSequenceKeyId, data1);

    // Create the business DTO.
    return new com.poesys.bs.memcached_test.BsTestSequenceKey(dto);
  }

}
