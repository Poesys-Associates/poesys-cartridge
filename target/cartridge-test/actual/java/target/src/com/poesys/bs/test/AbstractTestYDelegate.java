/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDelegate.vsl

package com.poesys.bs.test;


import com.poesys.bs.delegate.AbstractDataDelegate;
import com.poesys.bs.delegate.DelegateException;
import com.poesys.db.connection.IConnectionFactory.DBMS;
import com.poesys.db.dao.insert.IInsertSql;
import com.poesys.db.dao.update.IUpdateSql;
import com.poesys.db.dao.delete.IDeleteSql;
import com.poesys.db.dao.query.IKeyQuerySql;
import com.poesys.db.dao.query.IQuerySql;


/**
 * <p>
 * A business delegate that provides an application programming interface for
 * TestY objects and their dependents. You should not modify this class;
 * instead, override or add methods in the class TestYDelegate, which
 * specializes this class.
 * </p>
 * <p>
 * The TestY object is the "other" side of a many-to-many association.
 * </p>
 * @see TestYDelegate
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTestYDelegate
    extends AbstractDataDelegate<BsTestY, com.poesys.db.test.ITestY, com.poesys.db.pk.SequencePrimaryKey> {
  /**
   * Create an AbstractTestYDelegate object by supplying the database
   * subsystem in the database.properties file.
   * 
   * @param subsystem the database subsystem to use in database.properties
   */
  public AbstractTestYDelegate(String subsystem) {
    super(subsystem, 2147483647);
  }

  /**
   * Create an AbstractTestYDelegate object by supplying the database
   * subsystem in the database.properties file and a specific DBMS, usually
   * IConnectionFactory.DBMS.JNDI.
   * 
   * @param subsystem the database subsystem to use in database.properties
   * @param dbms the DBMS to use (usually IConnectionFactory.DBMS.JNDI)
   */
  public AbstractTestYDelegate(String subsystem, DBMS dbms) {
    super(subsystem, dbms, 2147483647);
  }

  @Override
  protected String getClassName() {
    return com.poesys.db.test.TestY.class.getName();
  }

  @Override
  protected IInsertSql<com.poesys.db.test.ITestY> getInsertSql() {
    return new com.poesys.db.test.sql.InsertTestY();
  }

  @Override
  protected IDeleteSql<com.poesys.db.test.ITestY> getDeleteSql() {
    return new com.poesys.db.test.sql.DeleteTestY();
  }

  @Override
  protected IUpdateSql<com.poesys.db.test.ITestY> getUpdateSql() {
    return new com.poesys.db.test.sql.UpdateTestY();
  }

  @Override
  protected IKeyQuerySql<com.poesys.db.test.ITestY> getQueryByKeySql() {
    return new com.poesys.db.test.sql.QueryTestY();
  }

  @Override
  protected IQuerySql<com.poesys.db.test.ITestY> getQueryListSql() {
    // Query-All method not required
    return new com.poesys.db.test.sql.QueryAllTestY();
  }

  @Override
  protected com.poesys.bs.test.BsTestY wrapData(com.poesys.db.test.ITestY dto) {
    return new com.poesys.bs.test.BsTestY(dto);
  }

  /**
   * <p>
   * Create a new TestY with data fields.
   * </p>
   * <p>
   * The TestY class has a sequence key; this method generates the
   * sequence for later insertion into the database.
   * </p>
   * 
   * @param testYId primary key attribute
   * @param yAttr 
   * @return the new TestY object
   * @throws DelegateException when there is a problem generating the key or
   *             creating the object
   */
  public com.poesys.bs.test.BsTestY createTestY(java.math.BigInteger testYId, java.lang.String yAttr)
      throws DelegateException {
      com.poesys.db.pk.SequencePrimaryKey key = null;

    // Generate a new TestY id if the input key is null.
    if (testYId == null) {
      java.sql.Connection connection = null;
      try {
        connection = getConnection();
        if (connection == null) {
          throw new DelegateException("Could not get database connection to generate sequence");
        }
        
        if (dbms.equals(DBMS.MYSQL) || dbms.equals(DBMS.JNDI_MYSQL)) {
          key =
            com.poesys.db.pk.PrimaryKeyFactory.createMySqlSequenceKey(connection,
                                                                      "TestY",
                                                                      "testYId",
                                                                      "com.poesys.db.test.TestY");
        } else if (dbms.equals(DBMS.ORACLE) || dbms.equals(DBMS.JNDI_ORACLE)) {
          // Create key with sequence TestY
          key =
            com.poesys.db.pk.PrimaryKeyFactory.createOracleSequenceKey(connection,
                                                                       "TestY",
                                                                       "testYId",
                                                                       "com.poesys.db.test.TestY");
        } else {
          throw new DelegateException("com.poesys.bs.delegate.msg.noDbms");
        }
        // Get the sequence number for use as an attribute value.
        testYId = key.getValue();
      } catch (com.poesys.db.InvalidParametersException e) {
        Object[] args = e.getParameters().toArray();
        String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
        throw new DelegateException(message, e);
      } catch (com.poesys.db.NoPrimaryKeyException e) {
        Object[] args = e.getParameters().toArray();
        String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
        throw new DelegateException(message, e);
      } catch (java.sql.SQLException e) {
        throw new DelegateException(e.getMessage(), e);
      } finally {
        // Done with this connection, close it and return it to the pool.
        if (connection != null) {
          try {
            connection.close();
          } catch (java.sql.SQLException e) {
            throw new DelegateException(e.getMessage(), e);
          }
        }
      }
    } else {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("testYId", testYId, "com.poesys.db.test.TestY");
    }

    // Create a data-access DTO for direct access, no proxy required.
    com.poesys.db.test.ITestY dto =
      new com.poesys.db.test.TestY(key, testYId, yAttr);

    // Create the business DTO.
    return new com.poesys.bs.test.BsTestY(dto);
  }

  /**
   * Create a new TestAssociationChild child of TestY with a composite key.
   * 
   * @param parent the parent of the child object to create
   * @param key1 composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param key2 composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param testXId Attribute that is part of the association key
   * @param testYId Attribute that is part of the association key
   * @param tsACAttr Data attribute for the Test Association Child composite aggregation of the Test
Natural Parent, identified by the zKey TestZ object
   * @return a new TestAssociationChild business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public com.poesys.bs.test.BsTestAssociationChild createTestAssociationChild(com.poesys.bs.test.BsTestY parent, java.lang.Long key1, java.lang.Long key2, java.math.BigInteger testXId, java.math.BigInteger testYId, java.lang.Long tsACAttr) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.CompositePrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.BigIntegerColumnValue("testXId", testXId));
      list.add(new com.poesys.db.col.BigIntegerColumnValue("testYId", testYId));
	  com.poesys.db.pk.IPrimaryKey subKey = 
	    com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.db.test.TestAssociationChild");
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parent.getPrimaryKey(), 
                                                              subKey,
                                                              "com.poesys.db.test.TestAssociationChild");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a composite-key child data-access TestAssociationChild DTO for direct access, no proxy required.
    com.poesys.db.test.ITestAssociationChild dto =
      new com.poesys.db.test.TestAssociationChild(key, key1, key2, testXId, testYId, tsACAttr);

    // Create the business DTO.
    return new com.poesys.bs.test.BsTestAssociationChild(dto);
  }
  /**
   * Create a new TestZ association class child of TestY with 
   * an association key. This class links the input objects.
   * 
   * @param xsObject associated TestX object (part of the key)
   * @param ysObject associated TestY object (part of the key)
   * @param testXId Attribute that is part of the association key
   * @param testYId Attribute that is part of the association key
   * @param zAttr 
   * @return a new TestZ business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public com.poesys.bs.test.BsTestZ createTestZ(com.poesys.bs.test.BsTestX xsObject, com.poesys.bs.test.BsTestY ysObject, java.math.BigInteger testXId, java.math.BigInteger testYId, java.lang.String zAttr) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.AssociationPrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.pk.IPrimaryKey> list =
        new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
      list.add(xsObject.getPrimaryKey());
      list.add(ysObject.getPrimaryKey());
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "com.poesys.db.test.TestZ");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create an association-key child data-access TestZ DTO proxy (supports lazy loading).
    com.poesys.db.test.ITestZ dto =
      new com.poesys.db.test.TestZProxy(new com.poesys.db.test.TestZ(key, xsObject.toDto(), ysObject.toDto(), testXId, testYId, zAttr));

    // Create the business DTO.
    return new com.poesys.bs.test.BsTestZ(dto);
  }

  @Override
  public void truncateTable(String tableName) throws DelegateException {
    java.sql.Connection c = getConnection();
    com.poesys.db.dao.ddl.ISql sql = null;
    com.poesys.db.dao.ddl.IExecuteSql executive = null;

    // First truncate any child tables.
    sql = new com.poesys.db.dao.ddl.TruncateTableSql("TestAssociationChild");
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "TestAssociationChild", e);
    }

    sql = new com.poesys.db.dao.ddl.TruncateTableSql("TestZ");
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "TestZ", e);
    }

    // Now truncate the current table.
    sql = new com.poesys.db.dao.ddl.TruncateTableSql(tableName);
    executive = new com.poesys.db.dao.ddl.ExecuteSql(sql);
    try {
      executive.execute(c);
    } catch (java.sql.SQLException e) {
      throw new DelegateException(e.getMessage() + ": " + "TestY", e);
    }
  }
}
