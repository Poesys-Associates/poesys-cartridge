/**
 * Copyright 2009 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package com.poesys.bs.test;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import com.poesys.db.test.ITestZ;
import com.poesys.db.test.TestZProxy;
import com.poesys.db.test.TestZ;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the TestZ. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The TestZ object is the assocation class that represents the many-to-many
 * association of TestX and TestY objects.
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsTestZ 
    extends AbstractDto<com.poesys.db.test.ITestZ> {

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsTestAssociationChild objects from a Collection tests of data-access-layer 
   * com.poesys.db.test.ITestAssociationChild objects
   */
  private class BsTestsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.db.test.ITestAssociationChild, com.poesys.bs.test.BsTestAssociationChild> {
    @Override
    public com.poesys.bs.test.BsTestAssociationChild get(com.poesys.db.test.ITestAssociationChild dto) {
      return new com.poesys.bs.test.BsTestAssociationChild(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of TestAssociationChild objects from an input Collection tests of 
   * business-layer BsTestAssociationChild objects
   */
  private class TestsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.bs.test.BsTestAssociationChild, com.poesys.db.test.ITestAssociationChild> {
    @Override
    public com.poesys.db.test.ITestAssociationChild get(com.poesys.bs.test.BsTestAssociationChild dto) {
      return dto.toDto();
    }
  }

  /**
   * Create a BsTestZ object from a TestZ object.
   * 
   * @param dto the data-access layer TestZ DTO
   * @throws DelegateException when there is a problem creating the TestZ
   */
  public AbstractBsTestZ(ITestZ dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a TestZ from new data.
   *
   * @param key the primary key of the TestZ
   * @param xsObject associated TestX object
   * @param ysObject associated TestY object
   * @param testXId Attribute that is part of the association key
   * @param testYId Attribute that is part of the association key
   * @param zAttr 
   */
  public AbstractBsTestZ(IPrimaryKey key, com.poesys.db.test.ITestX xsObject, com.poesys.db.test.ITestY ysObject, java.math.BigInteger testXId, java.math.BigInteger testYId, java.lang.String zAttr) {
    super(new TestZProxy(new TestZ(key, xsObject, ysObject, testXId, testYId, zAttr)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ITestZ> other = (IDto<ITestZ>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ITestZ> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * 
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestZ</li>
   * </ul>
   * </p>
   * @return a java.lang.String zAttr
   */
  public java.lang.String getZAttr() {
    return dto.getZAttr();
  }

  /**
   * <p>
   * Set the zAttr.
   * </p>
   * 
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestZ</li>
   * </ul>
   * </p>
   * @param zAttr the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setZAttr(java.lang.String zAttr) 
      throws com.poesys.db.dto.DtoStatusException {
    dto.setZAttr(zAttr);
  }

  /**
   * 
   * <p>
   * Added by AddToManyAssociatedKeyCollectionProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestZ</li>
   * </ul>
   * </p>
   * @return a com.poesys.bs.test.BsTestAssociationChild zAttr
   */
  public java.util.Collection<com.poesys.bs.test.BsTestAssociationChild> getTests() {
    BsTestsCollectionBuilder builder = new BsTestsCollectionBuilder();
    return builder.getCollection(dto.getTests());
  }

  /**
   * <p>
   * Set the tests.
   * </p>
   * 
   * <p>
   * Added by AddToManyAssociatedKeyCollectionProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object TestZ</li>
   * </ul>
   * </p>
   * @param zAttr the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setTests(java.util.Collection<com.poesys.bs.test.BsTestAssociationChild> zAttr) 
      throws com.poesys.db.dto.DtoStatusException{
    TestsCollectionBuilder builder = new TestsCollectionBuilder();
      dto.setTests(builder.getCollection(zAttr));
  }

  /**
   * <p>
   * Associated object
   * </p>
   * <p>
   * Added by AddAssociationKeyObjectProperties as data member
   * </p>
   * <p>
   * This property loads lazily on demand the first time you call this method,
   * not when you instantiate the BsTestZ object.
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object TestZ</li>
   * </ul>
   * </p>
   * @return a com.poesys.bs.test.BsTestY y
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public com.poesys.bs.test.BsTestY getY() throws java.sql.SQLException {
    // Return 4
    return new com.poesys.bs.test.BsTestY(dto.getY());
  }

  /**
   * <p>
   * Associated object
   * </p>
   * <p>
   * Added by AddAssociationKeyObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object TestZ</li>
   * </ul>
   * </p>
   * @return a com.poesys.bs.test.BsTestX x
   */
  public com.poesys.bs.test.BsTestX getX() {
    // Return 4
    return new com.poesys.bs.test.BsTestX(dto.getX());
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object TestZ</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger testXId
   */
  public java.math.BigInteger getTestXId() {
    return dto.getTestXId();
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object TestZ</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger testYId
   */
  public java.math.BigInteger getTestYId() {
    return dto.getTestYId();
  }

  /**
   * Add a TestAssociationChild object to the tests collection.
   *
   * @param object the object to add to the collection
   */
  public void addTestsTestAssociationChild(com.poesys.bs.test.BsTestAssociationChild object) {
    dto.addTestsTestAssociationChild(object.toDto());
  }
}