// license-header java merge-point
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: IDbDto.vsl

#set ($dto = $class.transformToDto(null))
## Whether the objects of the class can change
package ${dto.packageName};

import com.poesys.db.dto.IDbDto;

#if (${dto.superclass})
import ${dto.superpackage}.I${dto.superclass};
#else
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
#end


/**
 * <p>
 * A data-access layer data-transfer-object interface for the ${dto.name}. 
 * The data-transfer-object class and proxy class implement this interface, as
 * does the business-layer data-transfer-object class.
 * </p>
${dto.documentation}
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
#foreach ($name in ${dto.stereotypeNames})
 *     <li>$name</li>
#end
 * </ul>
 * <p>
 * Class is read/write: ${dto.readWrite}
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public interface I${dto.name} extends IDbDto#if (${dto.superclass}), I${dto.superclass}#end {
#if (!${dto.superclass})

  boolean equals(Object arg0);

  int hashCode();

  /**
   * <p>
   * Mark any children of this DTO as deleted.
   * </p>
   *
   * @throws DtoStatusException when the child cannot be set to DELETED status
   */
  void markChildrenDeleted() throws DtoStatusException;

  IPrimaryKey getPrimaryKey();
#end
  
## Generate access method specs for data members
#foreach ($property in $dto.dataMembers)
#if ($property.toMany)
#set ($propertyName = ${stringUtils.uncapitalize(${property.queryName})})
#set ($className = $property.queryName)
#set ($getterMethod = $property.queryGetterName)
#else
#set ($propertyName = $property.uniqueName)
#set ($className = ${stringUtils.capitalize(${property.uniqueName})})
#set ($getterMethod = $property.getterName)
#end

  /**
${property.getDocumentation()}
   * <p>
   * Added by ${property.source}
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: ${property.prefix}
#if ($property.lazy)
   * </p>
   * <p>
   * This property loads lazily on demand rather than when you first query the 
   * I${dto.name} object.
#end
   * </p>
   * @return a ${property.typeName} ${propertyName}
#if ($property.lazy)
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
#end
   */
  ${property.visibility} ${property.typeName} ${getterMethod}()#if ($property.lazy) throws java.sql.SQLException#end;
## Only output a clearer if the property is lazily loaded.
#if ($property.lazy)

  /**
   * Clear the ${propertyName} so that it will lazily reload.
   */
  ${property.visibility} void clear${className}();
#end
## Only output a setter if the DTO and property are read/write and the class is mutable.
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: ${dto.readWrite}
// Mutable DTO: not ${dto.immutable}
// Mutable property: not ${property.immutable}
// Read/Write property: ${property.readWrite}
#if (${dto.readWrite} && !${dto.immutable} && !${property.immutable} && ${property.readWrite})

  /**
   * <p>
   * Set the ${propertyName}.
   * </p>
   *
   * @param ${propertyName} the value to set into the ${propertyName}
#if (${property.required})
   * @throws com.poesys.db.InvalidParametersException when the ${propertyName} 
   *       value is null
#end
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
## TODO Use ${property.visibility} after fixing the bug that doesn't set that attribute of the property.
  public void ${property.setterName}(${property.typeName} ${propertyName}) throws com.poesys.db.dto.DtoStatusException#if (${property.required}), com.poesys.db.InvalidParametersException#end;

#end
#end
## Specify the add() methods for adding objects to nested collections.
## Only read/write/mutable DTOs contain add methods.
#if (${dto.readWrite} && !${dto.immutable})
#foreach($property in $dto.collectionProperties)

  /**
   * Add a ${property.dto.name} object to the ${stringUtils.uncapitalize(${property.queryName})} collection.
   *
   * @param object the object to add to the collection
#if ($property.lazy)
   * @throws java.sql.SQLException when there is a problem lazily loading the 
   *                               collection
#end
   */
  ${property.visibility} void add${property.queryName}${property.dto.name}(${property.className} object)#if ($property.lazy) throws java.sql.SQLException#end;
#end
#end
}