// license-header java merge-point
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractQueryAssociatedOneToManyObjects.vsl

## The to-many property
#set ($query = $association.transformToQuery())
#set ($subsystem = $query.subsystem)
#set ($queryName = ${stringUtils.capitalize($query.name)})
package ${association.packageName}.sql;


import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.dao.query.IParameterizedQuerySql;
import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A query Command pattern object that implements a SQL query of a collection of 
 * ${query.typeName} objects using the primary key of an associated 
 * ${query.foreignTypeName} object through the association ${query.name}. This
 * is a many-to-one association from ${query.typeName} to ${query.foreignTypeName}.
 * </p>
 * <p>
 * This SQL specification contains a SQL statement that queries a collection of
 * ${query.typeName} objects from the database using the foreign key type
 * ${query.foreignTypeName}.
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractQuery${queryName}By${query.foreignTypeName} 
    implements IParameterizedQuerySql<${query.packageName}.I${query.typeName}, ${query.foreignPackageName}.I${query.foreignTypeName}> {
  /** SQL query statement for ${query.sqlTableName} */
  private static final String SQL =
    "SELECT ${query.selectList} FROM ${query.fromClause} WHERE ${query.whereExpr}";

  @Override
  public void bindParameters(PreparedStatement stmt, ${query.foreignPackageName}.I${query.foreignTypeName} parameters) {
    // Set the parameters starting with the first parameter.
    parameters.getPrimaryKey().setParams(stmt, 1);
  }

  @Override
  public String getParameterValues(${query.foreignPackageName}.I${query.foreignTypeName} parameters) {
    // Create the output string with the key parameters.
    return parameters.getPrimaryKey().getValueList();
  }

  @Override
  public ${query.packageName}.I${query.typeName} getData(ResultSet rs) {
#if (${query.associatedDto.abstractClass})
    // ${query.associatedDto.name} is an abstract class, cannot query the object data directly
    // TODO Return null for now
    return null;
#else
    try {
      return ${query.linksSubsystem.fullyQualifiedName}.${query.linksSubsystem.className}Factory.get${query.typeName}Data(getPrimaryKey(rs), rs);
    } catch (com.poesys.db.InvalidParametersException | SQLException e) {
      throw new com.poesys.db.DbErrorException("Error getting data", e);
    }
#end
  }

  @Override
  public IPrimaryKey getPrimaryKey(ResultSet rs) {
    try {
      return ${query.linksSubsystem.fullyQualifiedName}.${query.linksSubsystem.className}Factory.get${query.TypeName}PrimaryKey(rs, "");
    } catch (com.poesys.db.InvalidParametersException | SQLException e) {
      throw new com.poesys.db.DbErrorException("Error getting primary key", e);
    }
  }

  @Override
  public String getSql() {
    return SQL;
  }
}