// license-header java merge-point
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractInsert.vsl

## The main data-access data-transfer object (DTO)
#set ($dto = $class.transformToDto(null))
package ${dto.packageName}.sql;



import java.sql.PreparedStatement;

import com.poesys.db.dao.insert.IInsertSql;
import com.poesys.db.pk.IPrimaryKey;


#set($sep = "")
/**
 * SQL statement specification for inserting a ${dto.name}
 * 
 * @author Robert J. Muller
 */
public class AbstractInsert${dto.name} implements IInsertSql<${dto.packageName}.I${dto.name}> {
  private static final String SQL =
    "INSERT INTO ${dto.sqlTableName} (${dto.sqlInsertList}) VALUES (#foreach ($property in $dto.insertProperties)${sep}?#set($sep=",")#end)";

  @Override
  public String getSql(IPrimaryKey key) {
    return SQL;
  }

  @Override
  public void setParams(PreparedStatement stmt, int index, 
                        ${dto.packageName}.I${dto.name} object) {
#foreach ($property in $dto.insertProperties)
## Exclude any natural key columns, already set
#if (!$property.key)
#if (${property.supportedJdbcType})
    try {
      ${property.jdbcSetCall};
    } catch (java.sql.SQLException e) {
      String message = com.poesys.db.Message.getMessage("com.poesys.db.sql.msg.parameter", null);
      throw new com.poesys.db.DbErrorException(message, e);
    }
#else
    // Source ${property.source}
    // TODO Unsupported JDBC type ${property.typeName} for ${dto.name}.${property.uniqueName}; override this method in the concrete subclass to set the params for the $dto.name
#end
    index++;
#end
#end
  }
  
  @Override
  public String getParamString(${dto.packageName}.I${dto.name} object) {
    StringBuilder builder = new StringBuilder();

    // Get the primary key string
    builder.append(object.getPrimaryKey().getStringKey());
#foreach ($property in $dto.insertProperties)
#if (!$property.key)
    // Get the non-key attributes.
    builder.append(", ");
    builder.append("${property.uniqueName}: ");
    builder.append(object.${property.getterName}());
#end
#end
    return builder.toString();
  }
}
