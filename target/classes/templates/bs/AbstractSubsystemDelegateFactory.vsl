// license-header java merge-point
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractSubsystemDelegateFactory.vsl

#set ($sub = $subsystem.transformToSubsystem())
#set ($className = $sub.className)
## used in catalog.xml for directory name
#set ($businessPackageDir = ${stringUtils.replace($sub.businessPackageName, ".", "/")})
package ${sub.businessPackageName};


import com.poesys.db.connection.IConnectionFactory.DBMS;


/**
 * <p>
 * A set of factory methods for the instantiable business delegates in the 
 * ${sub.className} subsystem. This class is abstract and has a single concrete 
 * subclass, ${sub.className}DelegateFactory, that you can modify to override
 * the default behavior in the abstract class or implement an as-yet 
 * unimplemented delegate factory. You can, for example, override all the
 * factory methods with a different connection strategy.
 * </p>
$sub.documentation
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class Abstract${sub.className}DelegateFactory {
#set ($initial = true)
#foreach ($dto in ${sub.dtos})
#if (!$dto.abstractClass && !$dto.child)
#if ($initial)
  /** 
   * The fully qualified name of the ${className} subsystem properties file,
   * not including the locale information. This comes from the UML subsystem
   * as the package name concatenated to the subsystem name (the fully qualified
   * subsystem name). The actual file is then in the package with the subsystem 
   * name concatenated to the locale name followed by the .properties extension.
   * For example, the subsystem ${sub.name} in the ${subsystem.packageName} 
   * package has the property file ${sub.fullyQualifiedName}_en_US.properties
   * for the default locale english (US).
   */
  private static final String PROPERTY_FILE = "${sub.fullyQualifiedName}";
    
  /** Resource bundle for subsystem property file */
  private static final java.util.ResourceBundle rb =
    java.util.ResourceBundle.getBundle(PROPERTY_FILE);

  /** Initialize the subsystem name from the property file. */
  private static final String subsystem = rb.getString("subsystem");

  /** Initialize the DBMS type from the property file. */
  protected static final DBMS JNDI_DBMS = DBMS.stringValue(rb.getString("jndi_dbms"));
  
  /** Initialize the ${sub.memory}#if ($sub.software != "")( ${sub.software}) #end DAO manager for the subsystem. */
  protected static final com.poesys.db.dao.IDaoManager manager = 
#if($sub.memory == "direct")
    com.poesys.db.dao.DaoManagerFactory.initDirectManager(subsystem);
#elseif($sub.memory == "cached")
    com.poesys.db.dao.DaoManagerFactory.initCacheManager(subsystem);
#elseif($sub.memory == "clustered")
    com.poesys.db.dao.DaoManagerFactory.initMessagingManager(subsystem);
#elseif($sub.memory == "distributed")
#if($sub.software == "memcached")
    com.poesys.db.dao.DaoManagerFactory.initMemcachedManager(subsystem);
#end
#end
#set ($initial = false)
#end

  /**
   * Get the ${dto.name}Delegate. The file ${className}.properties supplies the
   * database subsystem for the delegate to use. The method enables caching and
   * constructs the Delegate with the subsystem from the property file. The
   * database and password are set from the database properties file entries
   * for the subsystem. Use this method in contexts where you don't know 
   * whether a JNDI server will be available, such as lazy loading contexts or
   * JUnit test cases.
   * 
   * @return the delegate
   */
  public static ${dto.name}Delegate get${dto.name}Delegate() {
    return new ${dto.name}Delegate(subsystem);
  }
  
  /**
   * Get the ${dto.name}Delegate using the JNDI_DBMS static member initialized
   * from the ${className}.properties file. The system uses the JNDI name to
   * access the data source. Use this method in contexts where you know that
   * the JNDI server will always be available.
   * 
   * @return the JNDI delegate
   */
  public static ${dto.name}Delegate getJndi${dto.name}Delegate() {
    return new ${dto.name}Delegate(subsystem, JNDI_DBMS);
  }
#end
#end
}