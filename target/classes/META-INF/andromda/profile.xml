<?xml version="1.0" encoding="UTF-8" ?>
<profile>
	<documentation>
		The Poesys/DB system uses a set of stereotypes and tag
		values that represent all the extra information that UML requires to
		represent the specific objects in an object-oriented database schema.
	</documentation>
	<elements>
		<elementGroup name="Stereotypes">
			<element name="NATURAL_KEY">
				<documentation>
					A class with a natural key, a key containing one or
					more of the actual data columns from the class that taken together
					uniquely identify each object.
                </documentation>
				<value>NaturalKey</value>
				<appliedOnElement>class</appliedOnElement>
			</element>
			<element name="COMPOSITE_KEY">
				<documentation>
					A class with a composite key, a key containing the
					key of the parent composite class (a class associated with the
					present class with a composite aggregation association) and another
					key that taken together uniquely identify each object. Represented
					in the generated objects by the key name from the parent class and
					the property names identified by the PK stereotype.
                </documentation>
				<value>CompositeKey</value>
				<appliedOnElement>class</appliedOnElement>
			</element>
			<element name="ASSOCIATION_KEY">
				<documentation>
					A class with an association key, a key containing two
					or more keys from associated classes that taken together uniquely
					identify each object. The object is a link that associates two or
					more objects. Represented in the generated objects by the names of
					the primary keys (the default) or the property names if specified.
					If the association is recursive, property names are mandatory as
					the key names are the same but the column names in the association
					class need to be unique.
                </documentation>
				<value>AssociationKey</value>
				<appliedOnElement>class</appliedOnElement>
			</element>
			<element name="SEQUENCE_KEY">
				<documentation>
					A class with a sequence key, a key consisting of a
					unique integer
					value generated by a sequence generator;
					represented
					in the generated objects by a generated id property, usually
					&lt;class name&gt;_id or &lt;class name
					&gt;Id (database or Java)
				</documentation>
				<value>SequenceKey</value>
				<appliedOnElement>class</appliedOnElement>
			</element>
			<element name="GUID_KEY">
				<documentation>
					A class with a GUID key, a key consisting of a
					globally unique
					identifier represented in the database as a
					40-byte
					string of printing characters and in memory as a binary GUID
					object.
                </documentation>
				<value>GuidKey</value>
				<appliedOnElement>class</appliedOnElement>
			</element>
			<element name="IDENTITY_KEY">
				<documentation>
					A class with an identity key, a key consisting of a
					unique integer
					value generated internally for each table (an
					auto-generated or identity key in SQL Server, Sybase, or MySQL, for
					example);
					represented in the generated
					objects by a generated id
					property, usually &lt;class name&gt;_id or
					&lt;class name &gt;Id
					(database or Java)
                </documentation>
				<value>IdentityKey</value>
				<appliedOnElement>class</appliedOnElement>
			</element>
			<element name="PK">
				<documentation>
					A property that is part of the primary key (the
					additional natural
					key for a composite key in addition to the
					parent
					key, for example); use this for natural or composite keys only
				</documentation>
				<value>PK</value>
				<appliedOnElement>property in the context of a NaturalKey or
					Composite Keyclass</appliedOnElement>
			</element>
			<element name="AK">
				<documentation>
					A property that is part of an alternate key, a set of
					persistent
					attributes that uniquely identify a persistent
					object
					(row) but which is not part of the primary key; use the
					@uniqueGroup tag to name the specific alternate
					key to which the
					attribute belongs
                </documentation>
				<value>AK</value>
				<appliedOnElement>property</appliedOnElement>
			</element>
			<element name="PERSISTENT">
				<documentation>
					A class that represents a persistent object in a data
					store or a
					property of such a class, either of which can
					be read only
					and that can have a different name in the data store;
					optional on
					properties that have the same
					name in the data store and that are
					read-write properties
				</documentation>
				<value>Persistent</value>
				<appliedOnElement>class or property</appliedOnElement>
			</element>
			<element name="IMMUTABLE">
				<documentation>A class with objects that you cannot change in the
					persistent store after creation</documentation>
				<value>Immutable</value>
				<appliedOnElement>class</appliedOnElement>
			</element>
			<element name="UNREMOVABLE">
				<documentation>A class with objects that you cannot delete from the
					persistent store after creation</documentation>
				<value>Unremovable</value>
				<appliedOnElement>class</appliedOnElement>
			</element>
			<element name="LAZY">
				<documentation>
					A property that loads lazily (when used) rather than
					immediately
					with the rest of the persistent properties
				</documentation>
				<value>Lazy</value>
				<appliedOnElement>property</appliedOnElement>
			</element>
			<element name="NUMBER">
				<documentation>A property that is a numeric value with a precision
					and scale</documentation>
				<value>Number</value>
				<appliedOnElement>property</appliedOnElement>
			</element>
			<element name="SIZED_PROPERTY">
				<documentation>A property that has a length or size, usually a
					character string or binary object</documentation>
				<value>SizedProperty</value>
				<appliedOnElement>property</appliedOnElement>
			</element>
			<element name="BOOLEAN_STRING">
				<documentation>
					A boolean property that the persistent store
					represents with a
					string rather than with a 1/0 integer
				</documentation>
				<value>BooleanString</value>
				<appliedOnElement>property</appliedOnElement>
			</element>
			<element name="SUBSYSTEM">
				<documentation>
					A package or namespace that contains a set of
					persistent classes and a factory that assists in generating objects
					of those classes; the name is the name of the database layer and
					usually is in the format &gt;org&lt;.db.name
                </documentation>
				<value>Subsystem</value>
				<appliedOnElement>package</appliedOnElement>
			</element>
			<element name="DIRECT">
				<documentation>
					A subsystem that uses direct memory management
					without caching of DTOs
		</documentation>
				<value>Direct</value>
				<appliedOnElement>package</appliedOnElement>
			</element>
			<element name="CACHED">
				<documentation>
					A subsystem that uses map-baesd caching memory
					management of DTOs
		</documentation>
				<value>Cached</value>
				<appliedOnElement>package</appliedOnElement>
			</element>
			<element name="CLUSTERED">
				<documentation>
					A subsystem that uses map-baesd caching memory
					management of DTOs with
					messaging for clustered applications
				</documentation>
				<value>Clustered</value>
				<appliedOnElement>package</appliedOnElement>
			</element>
			<element name="DISTRIBUTED">
				<documentation>
					A subsystem that uses distributed cache memory
					management of DTOs for
					clustered applications
                </documentation>
				<value>Distributed</value>
				<appliedOnElement>package</appliedOnElement>
			</element>
			<element name="CROSS_DATABASE">
				<documentation>
					Stereotype indicating that a generalization is
					between classes that are
					implemented in different databases and
					hence cannot have foreign key constraints that enforce the
					association.
				</documentation>
				<value>CrossDatabase</value>
				<appliedOnElement>generalization</appliedOnElement>
			</element>
		</elementGroup>
		<elementGroup name="Tagged Values">
			<documentation>The tagged values which apply to the Poesys/DB
				namespace.</documentation>
			<element name="NAME">
				<documentation>
					The persistent-store name of a persistent class or
					property if
					different from the element name
                </documentation>
				<value>name</value>
				<appliedOnElement>Persistent</appliedOnElement>
			</element>
			<element name="OBJECT_NAME">
				<documentation>
					The object name of an instance of an associated class
					in the association class; appears in the association class PSM
					class to represent the linked object of the associated class in a
					link; value is set in the Persistent stereotype on an association
					end for an association to an association class; allows specifying a
					singular name for the object and a plural name for collections of
					the object that are in the associated classes; also used as the
					name of the foreign-key constraint that corresponds to the property
				</documentation>
				<value>objectName</value>
				<appliedOnElement>Persistent</appliedOnElement>
			</element>
			<element name="GENERATED_NAME">
				<documentation>
					The persistent-store name of a primary key column for
					a generated identity, sequence, or GUID key column
                </documentation>
				<value>generatedName</value>
				<appliedOnElement>identity/sequence/guid key stereotypes
				</appliedOnElement>
			</element>
			<element name="SEQUENCE_NAME">
				<documentation>
					The persistent-store name of a sequence the delegate
					uses to generate a primary key for an Oracle or MySQL object marked
					as SequenceKey
                </documentation>
				<value>sequenceName</value>
				<appliedOnElement>sequence key stereotype</appliedOnElement>
			</element>
			<element name="EXPIRATION">
				<documentation>
					The expiration time in milliseconds of an object in a
					cache that supports object expiration; default is 
					Integer.MAX_VALUE (leaving the value null or entering 0
					yields the default value); -1 means expire immediately, no
					caching
                </documentation>
				<value>expiration</value>
				<appliedOnElement>persistent stereotype</appliedOnElement>
			</element>
			<element name="LENGTH">
				<documentation>
					The maximum number of characters, bytes, or other
					unit allowed for a persistent property value; used to set the
					constraint on the string data type in the schema
                </documentation>
				<value>length</value>
				<appliedOnElement>SizedProperty</appliedOnElement>
			</element>
			<element name="REPRESENTATION">
				<documentation>
					The two-valued array of strings that contains the
					string representation of a boolean value, with the first string
					representing "true" and the second representing "false"
				</documentation>
				<value>representation</value>
				<appliedOnElement>property</appliedOnElement>
			</element>
			<element name="PRECISION">
				<documentation>
					The maximum number of digits for a persistent number;
					used to set the constraint on the numeric data type in the schema
				</documentation>
				<value>precision</value>
				<appliedOnElement>Number</appliedOnElement>
			</element>
			<element name="SCALE">
				<documentation>
					The maximum number of digits following the decimal
					point for a persistent number; used to set the constraint on the
					numeric data type in the schema
                </documentation>
				<value>scale</value>
				<appliedOnElement>Number</appliedOnElement>
			</element>
			<element name="FETCH_SIZE">
				<documentation>
					The number of rows to fetch at once when querying a
					to-many property
				</documentation>
				<value>fetchSize</value>
				<appliedOnElement>Persistent</appliedOnElement>
			</element>
			<element name="BATCH_SIZE">
				<documentation>
					The number of rows to process when processing a
					to-many property (insert, update, delete)
                </documentation>
				<value>batchSize</value>
				<appliedOnElement>Persistent</appliedOnElement>
			</element>
			<element name="READ_ONLY">
				<documentation>
					Whether the persistent attribute is read only; if
					true, AndroMDA generates only getters, if false, both getters and
					setters; defaults to false (read/write)
                </documentation>
				<value>readOnly</value>
				<appliedOnElement>Persistent</appliedOnElement>
				<allowedValues>
					<value>true</value>
					<value>false</value>
				</allowedValues>
			</element>
			<element name="LAZY_LINKS">
				<documentation>
					Whether to load the collection of association class
					objects (link objects, as opposed to the association-end
					collections of associated objects) lazily (true) or eagerly (false)
				</documentation>
				<value>lazy</value>
				<appliedOnElement>AssociationKey</appliedOnElement>
				<allowedValues>
					<value>true</value>
					<value>false</value>
				</allowedValues>
			</element>
			<element name="PK_CHILD">
				<documentation>
					Whether to treat the class to which the association
					end belongs as a child; set to false when the two classes are in
					different subsystems that will be implemented in different
					databases.
                </documentation>
				<value>child</value>
				<appliedOnElement>PK</appliedOnElement>
				<allowedValues>
					<value>true</value>
					<value>false</value>
				</allowedValues>
			</element>
			<element name="BUSINESS_PACKAGE">
				<documentation>
					The name of the business-layer package that
					corresponds to the subsystem database package (usually replaces
					"db" with "bs")
                </documentation>
				<value>businessPackage</value>
				<appliedOnElement>Subsystem</appliedOnElement>
			</element>
			<element name="UNIQUE_GROUP">
				<documentation>
					The name of the group of persistent attributes of
					which the current attribute is a member, the values of which
					uniquely identify a persistent object (row)
                </documentation>
				<value>uniqueGroup</value>
				<appliedOnElement>AK</appliedOnElement>
			</element>
			<element name="SOFTWARE">
				<documentation>
					The name of the software package that implements
					distributed caching for a subsystem
                </documentation>
				<value>software</value>
				<appliedOnElement>Distributed</appliedOnElement>
				<allowedValues>
					<value>memcached</value>
				</allowedValues>
			</element>
		</elementGroup>
	</elements>
</profile>