// license-header java merge-point
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractUpdate.vsl

## The main data-access data-transfer object (DTO)
#set ($dto = $class.transformToDto(null))
package ${dto.packageName}.sql;


import java.sql.PreparedStatement;
import java.sql.SQLException;

import com.poesys.db.dao.update.IUpdateSql;
import com.poesys.db.pk.IPrimaryKey;


#set($sep = "")
/**
 * SQL statement specification for updating a ${dto.name} with read/write properties
 * 
 * @author Robert J. Muller
 */
public class AbstractUpdate${dto.name} implements IUpdateSql<${dto.packageName}.I${dto.name}> {
#if ($dto.localMembers.size() > 0 || $dto.objectProperties.size() > 0 || $foreignKey.keyProperties.size() > 0)
  /** SQL UPDATE statement for $dto.name */
  private static final String SQL =
## Update local members and non-key, read/write object properties.
    "UPDATE ${dto.sqlTableName} SET #foreach ($element in $dto.localMembers)#if($element.readWrite)${sep}${element.sqlColumnName} = ?#set($sep=", ")#end#end#foreach ($object in $dto.objectProperties)#if($object.readWrite)#set ($foreignKey = $dto.getForeignKey($object.prefix))#foreach ($key in $foreignKey.keyProperties)#if(!$key.key)${sep}${key.sqlColumnName} = ?#set($sep=", ")#end#end#end#end WHERE ";

  @Override
  public String getSql(IPrimaryKey key) {
    StringBuilder builder = new StringBuilder(SQL);
    builder.append(key.getSqlWhereExpression(""));
    return builder.toString();
  }

  @Override
  public int setParams(PreparedStatement stmt, int index, ${dto.packageName}.I${dto.name} object)
      throws SQLException {
#foreach ($property in $dto.localMembers)
#if ($property.readWrite)
#if (${property.supportedJdbcType})
    ${property.jdbcSetCall};
#else
    // TODO Override this method in the conçrete subclass to set the params for the $dto.name
#end
    index++;
#end
#end
#foreach($object in $dto.objectProperties)
#if($object.readWrite)
#set ($foreignKey = $dto.getForeignKey($object.prefix))
#set($primaryKey = false)
#foreach ($key in $foreignKey.keyProperties)
#if($key.key)
#set($primaryKey = true)
#end
#end
#if ($primaryKey == false && $object.required)
    // sets key params for required $object.uniqueName object
    index = object.${object.getterName}().getPrimaryKey().setParams(stmt, index);
#elseif ($primaryKey == false)
    // sets key params for optional $object.uniqueName object, which may be null
    if (object.${object.getterName}() != null) {
      index = object.${object.getterName}().getPrimaryKey().setParams(stmt, index);
    } else {
      // Set the individual parameters to null with the associated SQL type.
#foreach ($key in $foreignKey.keyProperties)
      stmt.setNull(index, java.sql.Types.${key.sqlTypeAnsi});
      index++;
#end
    }
#end
#end
#end
    // sets primary key in where clause
    index = object.getPrimaryKey().setParams(stmt, index);
    return index;
  }
#else
  /** No object properties to update, null SQL statement. */
  private static final String SQL = null;

  @Override
  public String getSql(IPrimaryKey key) {
    return null;
  }

  @Override
  public int setParams(PreparedStatement stmt, int index, ${dto.packageName}.I${dto.name} object)
      throws SQLException {
      return index;
  }
#end
}
