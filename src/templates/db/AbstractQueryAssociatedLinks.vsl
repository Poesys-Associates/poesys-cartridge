// license-header java merge-point
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractQueryAssociatedLinks.vsl

## The to-many property
#set ($query = $associationEnd.transformToQuery())
#set ($subsystem = $query.linksSubsystem)
#set ($queryName = ${stringUtils.capitalize($query.linksPropertyName)})
#set ($subsystemPathName = $stringUtils.replace($subsystem.fullyQualifiedName, ".", "/"))
package ${subsystem.fullyQualifiedName}.sql;


import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.ConstraintViolationException;
import com.poesys.db.InvalidParametersException;
import com.poesys.db.dao.query.IParameterizedQuerySql;
import com.poesys.db.pk.IPrimaryKey;

import ${subsystem.fullyQualifiedName}.${subsystem.className}Factory;


/**
 * <p>
 * A query Command pattern object that implements a SQL query of a collection of 
 * ${query.associationTypeName} objects using the primary key of the associated
 * class ${query.typeName}. These objects are the linking objects from the SQL 
 * table ${query.sqlLinkingTableName} rather than the objects associated through
 * the link (${query.foreignTypeName}), which have a separate representation.
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractQuery${queryName}By${query.typeName} 
    implements IParameterizedQuerySql<${query.associationPackageName}.I${query.associationTypeName}, ${query.packageName}.I${query.typeName}> {
  /** SQL query statement for ${query.sqlLinkingTableName} */
  private static final String SQL =
    "SELECT ${query.associationDto.sqlSelectList} FROM ${query.linksFromClause} WHERE ${query.linksWhereExpr}";

  public void bindParameters(PreparedStatement stmt, ${query.packageName}.I${query.typeName} parameters)
      throws SQLException {
    // Set the parameters starting with the first parameter.
    parameters.getPrimaryKey().setParams(stmt, 1);
  }

  public String getParameterValues(${query.packageName}.I${query.typeName} parameters) {
    // Create the output string with the key parameters.
    return parameters.getPrimaryKey().getValueList();
  }

  public ${query.associationPackageName}.I${query.associationTypeName} getData(ResultSet rs) throws SQLException,
      ConstraintViolationException {
    return ${subsystem.className}Factory.get${query.associationTypeName}Data(getPrimaryKey(rs), rs);
  }

  public IPrimaryKey getPrimaryKey(ResultSet rs) throws SQLException,
      InvalidParametersException {
    return ${subsystem.className}Factory.get${query.associationTypeName}PrimaryKey(rs, "");
  }

  public String getSql() {
    return SQL;
  }
}